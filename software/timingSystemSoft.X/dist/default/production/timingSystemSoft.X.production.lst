

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Mar 08 01:15:25 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0094                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  009F                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185                           
   186                           	psect	strings
   187  043B                     __pstrings:
   188  043B                     stringtab:
   189  043B                     __stringtab:
   190  043B                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193  043B                     stringdir:
   194  043B  3004               	movlw	high stringdir
   195  043C  008A               	movwf	10
   196  043D  0804               	movf	4,w
   197  043E  0A84               	incf	4,f
   198  043F  0782               	addwf	2,f
   199  0440                     __stringbase:
   200  0440  3400               	retlw	0
   201  0441                     __end_of__stringtab:
   202  0441                     _dpowers:
   203  0441  3401               	retlw	1
   204  0442  3400               	retlw	0
   205  0443  340A               	retlw	10
   206  0444  3400               	retlw	0
   207  0445  3464               	retlw	100
   208  0446  3400               	retlw	0
   209  0447  34E8               	retlw	232
   210  0448  3403               	retlw	3
   211  0449  3410               	retlw	16
   212  044A  3427               	retlw	39
   213  044B                     __end_of_dpowers:
   214  000C                     _PIR1bits	set	12
   215  001E                     _ADRESH	set	30
   216  001F                     _ADCON0bits	set	31
   217  000F                     _TMR1H	set	15
   218  000E                     _TMR1L	set	14
   219  0010                     _T1CONbits	set	16
   220  000B                     _INTCONbits	set	11
   221  0060                     _TMR1IF	set	96
   222  0031                     _RB1	set	49
   223  0080                     _TMR1ON	set	128
   224  0030                     _RB0	set	48
   225  003B                     _RC3	set	59
   226  003A                     _RC2	set	58
   227  0038                     _RC0	set	56
   228  0043                     _RD3	set	67
   229  0042                     _RD2	set	66
   230  0047                     _RD7	set	71
   231  0046                     _RD6	set	70
   232  0045                     _RD5	set	69
   233  0044                     _RD4	set	68
   234  009E                     _ADRESL	set	158
   235  009F                     _ADCON1bits	set	159
   236  008C                     _PIE1bits	set	140
   237  0081                     _OPTION_REGbits	set	129
   238  0088                     _TRISD	set	136
   239  0087                     _TRISC	set	135
   240  0086                     _TRISB	set	134
   241  044B                     STR_1:
   242  044B  3431               	retlw	49	;'1'
   243  044C  342D               	retlw	45	;'-'
   244  044D  3420               	retlw	32	;' '
   245  044E  3420               	retlw	32	;' '
   246  044F  3420               	retlw	32	;' '
   247  0450  3420               	retlw	32	;' '
   248  0451  3420               	retlw	32	;' '
   249  0452  3420               	retlw	32	;' '
   250  0453  3425               	retlw	37	;'%'
   251  0454  3430               	retlw	48	;'0'
   252  0455  3432               	retlw	50	;'2'
   253  0456  3464               	retlw	100	;'d'
   254  0457  343A               	retlw	58	;':'
   255  0458  3425               	retlw	37	;'%'
   256  0459  3430               	retlw	48	;'0'
   257  045A  3432               	retlw	50	;'2'
   258  045B  3464               	retlw	100	;'d'
   259  045C  343A               	retlw	58	;':'
   260  045D  3425               	retlw	37	;'%'
   261  045E  3430               	retlw	48	;'0'
   262  045F  3432               	retlw	50	;'2'
   263  0460  3464               	retlw	100	;'d'
   264  0461  3400               	retlw	0
   265                           
   266                           	psect	cinit
   267  000F                     start_initialization:	
   268                           ; #config settings
   269                           
   270  000F                     __initialization:
   271                           
   272                           ; Clear objects allocated to BITCOMMON
   273  000F  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   274                           
   275                           ; Clear objects allocated to BANK0
   276  0010  1383               	bcf	3,7	;select IRP bank0
   277  0011  303C               	movlw	low __pbssBANK0
   278  0012  0084               	movwf	4
   279  0013  3050               	movlw	low (__pbssBANK0+20)
   280  0014  120A  118A  252A  120A  118A  	fcall	clear_ram0
   281  0019                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284  0019                     __end_of__initialization:
   285  0019  0183               	clrf	3
   286  001A  120A  118A  29F1   	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	bitbssCOMMON
   289  03D8                     __pbitbssCOMMON:
   290  03D8                     _inverte:
   291  03D8                     	ds	1
   292  03D9                     _startTimer:
   293  03D9                     	ds	1
   294                           
   295                           	psect	bssBANK0
   296  003C                     __pbssBANK0:
   297  003C                     _valor:
   298  003C                     	ds	2
   299  003E                     _contador:
   300  003E                     	ds	2
   301  0040                     _centesimos:
   302  0040                     	ds	2
   303  0042                     _segundos:
   304  0042                     	ds	2
   305  0044                     _minutos:
   306  0044                     	ds	2
   307  0046                     _buffer:
   308  0046                     	ds	10
   309                           
   310                           	psect	clrtext
   311  052A                     clear_ram0:	
   312                           ;	Called with FSR containing the base address, and
   313                           ;	W with the last address+1
   314                           
   315  052A  0064               	clrwdt	;clear the watchdog before getting into this loop
   316  052B                     clrloop0:
   317  052B  0180               	clrf	0	;clear RAM location pointed to by FSR
   318  052C  0A84               	incf	4,f	;increment pointer
   319  052D  0604               	xorwf	4,w	;XOR with final address
   320  052E  1903               	btfsc	3,2	;have we reached the end yet?
   321  052F  3400               	retlw	0	;all done for this memory range, return
   322  0530  0604               	xorwf	4,w	;XOR again to restore value
   323  0531  2D2B               	goto	clrloop0	;do the next byte
   324                           
   325                           	psect	cstackCOMMON
   326  0070                     __pcstackCOMMON:
   327  0070                     ?_isdigit:
   328  0070                     ?_setCronometro:	
   329                           ; 1 bit 
   330                           
   331  0070                     ?_cronometro:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ??_cronometro:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_Lcd_Port:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_Lcd_Cmd:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_Lcd_Init:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Lcd_Write_Char:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_Lcd_Write_String:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_ContaSegundos:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_ContaSegundos:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_Lcd_Clear:	
   362                           ; 1 bytes @ 0x0
   363                           
   364                           
   365                           ; 2 bytes @ 0x0
   366  0070                     	ds	2
   367  0072                     ??_isdigit:
   368  0072                     ??_Lcd_Port:	
   369                           ; 1 bytes @ 0x2
   370                           
   371  0072                     ?___wmul:	
   372                           ; 1 bytes @ 0x2
   373                           
   374  0072                     ?___lwdiv:	
   375                           ; 2 bytes @ 0x2
   376                           
   377  0072                     Lcd_Port@a:	
   378                           ; 2 bytes @ 0x2
   379                           
   380  0072                     _isdigit$829:	
   381                           ; 1 bytes @ 0x2
   382                           
   383  0072                     ___wmul@multiplier:	
   384                           ; 1 bytes @ 0x2
   385                           
   386  0072                     ___lwdiv@divisor:	
   387                           ; 2 bytes @ 0x2
   388                           
   389                           
   390                           ; 2 bytes @ 0x2
   391  0072                     	ds	1
   392  0073                     ??_Lcd_Cmd:
   393  0073                     ??_Lcd_Write_Char:	
   394                           ; 1 bytes @ 0x3
   395                           
   396  0073                     isdigit@c:	
   397                           ; 1 bytes @ 0x3
   398                           
   399                           
   400                           ; 1 bytes @ 0x3
   401  0073                     	ds	1
   402  0074                     Lcd_Write_Char@temp:
   403  0074                     ___wmul@multiplicand:	
   404                           ; 1 bytes @ 0x4
   405                           
   406  0074                     ___lwdiv@dividend:	
   407                           ; 2 bytes @ 0x4
   408                           
   409                           
   410                           ; 2 bytes @ 0x4
   411  0074                     	ds	1
   412  0075                     Lcd_Cmd@a:
   413  0075                     Lcd_Write_Char@y:	
   414                           ; 1 bytes @ 0x5
   415                           
   416                           
   417                           ; 1 bytes @ 0x5
   418  0075                     	ds	1
   419  0076                     ??_Lcd_Clear:
   420  0076                     ?_Lcd_Set_Cursor:	
   421                           ; 1 bytes @ 0x6
   422                           
   423  0076                     ??_Lcd_Init:	
   424                           ; 1 bytes @ 0x6
   425                           
   426  0076                     ??___wmul:	
   427                           ; 1 bytes @ 0x6
   428                           
   429  0076                     ??___lwdiv:	
   430                           ; 1 bytes @ 0x6
   431                           
   432  0076                     Lcd_Set_Cursor@b:	
   433                           ; 1 bytes @ 0x6
   434                           
   435  0076                     Lcd_Write_Char@a:	
   436                           ; 1 bytes @ 0x6
   437                           
   438  0076                     ___wmul@product:	
   439                           ; 1 bytes @ 0x6
   440                           
   441                           
   442                           ; 2 bytes @ 0x6
   443  0076                     	ds	1
   444  0077                     ??_Lcd_Set_Cursor:
   445  0077                     ??_Lcd_Write_String:	
   446                           ; 1 bytes @ 0x7
   447                           
   448  0077                     ___lwdiv@quotient:	
   449                           ; 1 bytes @ 0x7
   450                           
   451                           
   452                           ; 2 bytes @ 0x7
   453  0077                     	ds	1
   454  0078                     Lcd_Write_String@i:
   455                           
   456                           ; 2 bytes @ 0x8
   457  0078                     	ds	1
   458  0079                     ___lwdiv@counter:
   459                           
   460                           ; 1 bytes @ 0x9
   461  0079                     	ds	1
   462  007A                     ??___lwmod:
   463  007A                     Lcd_Write_String@a:	
   464                           ; 1 bytes @ 0xA
   465                           
   466                           
   467                           ; 1 bytes @ 0xA
   468  007A                     	ds	1
   469                           
   470                           	psect	cstackBANK0
   471  0020                     __pcstackBANK0:
   472  0020                     ?___lwmod:
   473  0020                     Lcd_Set_Cursor@a:	
   474                           ; 2 bytes @ 0x0
   475                           
   476  0020                     ___lwmod@divisor:	
   477                           ; 1 bytes @ 0x0
   478                           
   479                           
   480                           ; 2 bytes @ 0x0
   481  0020                     	ds	1
   482  0021                     Lcd_Set_Cursor@z:
   483                           
   484                           ; 1 bytes @ 0x1
   485  0021                     	ds	1
   486  0022                     Lcd_Set_Cursor@y:
   487  0022                     ___lwmod@dividend:	
   488                           ; 1 bytes @ 0x2
   489                           
   490                           
   491                           ; 2 bytes @ 0x2
   492  0022                     	ds	1
   493  0023                     Lcd_Set_Cursor@temp:
   494                           
   495                           ; 1 bytes @ 0x3
   496  0023                     	ds	1
   497  0024                     ___lwmod@counter:
   498                           
   499                           ; 1 bytes @ 0x4
   500  0024                     	ds	1
   501  0025                     ?_sprintf:
   502  0025                     sprintf@f:	
   503                           ; 2 bytes @ 0x5
   504                           
   505                           
   506                           ; 1 bytes @ 0x5
   507  0025                     	ds	7
   508  002C                     ??_sprintf:
   509                           
   510                           ; 1 bytes @ 0xC
   511  002C                     	ds	3
   512  002F                     sprintf@ap:
   513                           
   514                           ; 1 bytes @ 0xF
   515  002F                     	ds	1
   516  0030                     sprintf@prec:
   517                           
   518                           ; 1 bytes @ 0x10
   519  0030                     	ds	1
   520  0031                     sprintf@val:
   521                           
   522                           ; 2 bytes @ 0x11
   523  0031                     	ds	2
   524  0033                     sprintf@flag:
   525                           
   526                           ; 1 bytes @ 0x13
   527  0033                     	ds	1
   528  0034                     sprintf@width:
   529                           
   530                           ; 2 bytes @ 0x14
   531  0034                     	ds	2
   532  0036                     sprintf@sp:
   533                           
   534                           ; 1 bytes @ 0x16
   535  0036                     	ds	1
   536  0037                     sprintf@c:
   537                           
   538                           ; 1 bytes @ 0x17
   539  0037                     	ds	1
   540  0038                     ??_setCronometro:
   541                           
   542                           ; 1 bytes @ 0x18
   543  0038                     	ds	1
   544  0039                     ??_main:
   545                           
   546                           ; 1 bytes @ 0x19
   547  0039                     	ds	3
   548                           
   549                           	psect	maintext
   550  01F1                     __pmaintext:	
   551 ;;
   552 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   553 ;;
   554 ;; *************** function _main *****************
   555 ;; Defined at:
   556 ;;		line 49 in file "main.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;		None
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : B00/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   570 ;;      Params:         0       0       0       0       0
   571 ;;      Locals:         0       0       0       0       0
   572 ;;      Temps:          0       3       0       0       0
   573 ;;      Totals:         0       3       0       0       0
   574 ;;Total ram usage:        3 bytes
   575 ;; Hardware stack levels required when called: 6
   576 ;; This function calls:
   577 ;;		_Lcd_Clear
   578 ;;		_Lcd_Init
   579 ;;		_setCronometro
   580 ;; This function is called by:
   581 ;;		Startup code after reset
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585  01F1                     _main:	
   586                           ;psect for function _main
   587                           
   588  01F1                     l1821:	
   589                           ;incstack = 0
   590                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   591                           
   592                           
   593                           ;main.c: 52:     TRISB = 0b11111111;
   594  01F1  30FF               	movlw	255
   595  01F2  1683               	bsf	3,5	;RP0=1, select bank1
   596  01F3  1303               	bcf	3,6	;RP1=0, select bank1
   597  01F4  0086               	movwf	6	;volatile
   598  01F5                     l1823:
   599                           
   600                           ;main.c: 53:     TRISC = 0b00000000;
   601  01F5  0187               	clrf	7	;volatile
   602  01F6                     l1825:
   603                           
   604                           ;main.c: 54:     TRISD = 0b00000000;
   605  01F6  0188               	clrf	8	;volatile
   606  01F7                     l1827:
   607                           
   608                           ;main.c: 57:     OPTION_REGbits.nRBPU = 0;
   609  01F7  1381               	bcf	1,7	;volatile
   610  01F8                     l1829:
   611                           
   612                           ;main.c: 60:     INTCONbits.GIE = 1;
   613  01F8  178B               	bsf	11,7	;volatile
   614  01F9                     l1831:
   615                           
   616                           ;main.c: 61:     INTCONbits.PEIE = 1;
   617  01F9  170B               	bsf	11,6	;volatile
   618  01FA                     l1833:
   619                           
   620                           ;main.c: 62:     PIE1bits.TMR1IE = 1;
   621  01FA  140C               	bsf	12,0	;volatile
   622  01FB                     l1835:
   623                           
   624                           ;main.c: 65:     T1CONbits.TMR1CS = 0;
   625  01FB  1283               	bcf	3,5	;RP0=0, select bank0
   626  01FC  1303               	bcf	3,6	;RP1=0, select bank0
   627  01FD  1090               	bcf	16,1	;volatile
   628  01FE                     l1837:
   629                           
   630                           ;main.c: 66:     T1CONbits.T1CKPS0 = 1;
   631  01FE  1610               	bsf	16,4	;volatile
   632  01FF                     l1839:
   633                           
   634                           ;main.c: 67:     T1CONbits.T1CKPS1 = 1;
   635  01FF  1690               	bsf	16,5	;volatile
   636                           
   637                           ;main.c: 70:     TMR1L = 0x95;
   638  0200  3095               	movlw	149
   639  0201  008E               	movwf	14	;volatile
   640                           
   641                           ;main.c: 71:     TMR1H = 0xE7;
   642  0202  30E7               	movlw	231
   643  0203  008F               	movwf	15	;volatile
   644  0204                     l1841:
   645                           
   646                           ;main.c: 73:     T1CONbits.TMR1ON = 0;
   647  0204  1010               	bcf	16,0	;volatile
   648  0205                     l1843:
   649                           
   650                           ;main.c: 76:     ADCON1bits.PCFG0 = 0;
   651  0205  1683               	bsf	3,5	;RP0=1, select bank1
   652  0206  1303               	bcf	3,6	;RP1=0, select bank1
   653  0207  101F               	bcf	31,0	;volatile
   654  0208                     l1845:
   655                           
   656                           ;main.c: 77:     ADCON1bits.PCFG1 = 1;
   657  0208  149F               	bsf	31,1	;volatile
   658  0209                     l1847:
   659                           
   660                           ;main.c: 78:     ADCON1bits.PCFG2 = 1;
   661  0209  151F               	bsf	31,2	;volatile
   662  020A                     l1849:
   663                           
   664                           ;main.c: 79:     ADCON1bits.PCFG3 = 1;
   665  020A  159F               	bsf	31,3	;volatile
   666  020B                     l1851:
   667                           
   668                           ;main.c: 82:     ADCON0bits.ADCS0 = 0;
   669  020B  1283               	bcf	3,5	;RP0=0, select bank0
   670  020C  1303               	bcf	3,6	;RP1=0, select bank0
   671  020D  131F               	bcf	31,6	;volatile
   672  020E                     l1853:
   673                           
   674                           ;main.c: 83:     ADCON0bits.ADCS1 = 0;
   675  020E  139F               	bcf	31,7	;volatile
   676  020F                     l1855:
   677                           
   678                           ;main.c: 85:     ADCON1bits.ADFM = 0;
   679  020F  1683               	bsf	3,5	;RP0=1, select bank1
   680  0210  1303               	bcf	3,6	;RP1=0, select bank1
   681  0211  139F               	bcf	31,7	;volatile
   682  0212                     l1857:
   683                           
   684                           ;main.c: 87:     ADRESL = 0x00;
   685  0212  019E               	clrf	30	;volatile
   686  0213                     l1859:
   687                           
   688                           ;main.c: 88:     ADRESH = 0x00;
   689  0213  1283               	bcf	3,5	;RP0=0, select bank0
   690  0214  1303               	bcf	3,6	;RP1=0, select bank0
   691  0215  019E               	clrf	30	;volatile
   692  0216                     l1861:
   693                           
   694                           ;main.c: 90:     ADCON0bits.ADON = 1;
   695  0216  141F               	bsf	31,0	;volatile
   696  0217                     l1863:
   697                           
   698                           ;main.c: 93:     RC0 = 0;
   699  0217  1007               	bcf	7,0	;volatile
   700  0218                     l1865:
   701                           
   702                           ;main.c: 94:     RC2 = 0;
   703  0218  1107               	bcf	7,2	;volatile
   704  0219                     l1867:
   705                           
   706                           ;main.c: 95:     RC3 = 0;
   707  0219  1187               	bcf	7,3	;volatile
   708  021A                     l1869:
   709                           
   710                           ;main.c: 98:     Lcd_Init();
   711  021A  120A  118A  226D  120A  118A  	fcall	_Lcd_Init
   712  021F                     l1871:
   713                           
   714                           ;main.c: 99:     Lcd_Clear();
   715  021F  120A  118A  251D  120A  118A  	fcall	_Lcd_Clear
   716  0224                     l124:	
   717                           ;main.c: 102:     while(1)
   718                           
   719  0224  0064               	clrwdt	;# 
   720  0225                     l1873:
   721                           
   722                           ;main.c: 106:         if(!RB0)
   723  0225  1283               	bcf	3,5	;RP0=0, select bank0
   724  0226  1303               	bcf	3,6	;RP1=0, select bank0
   725  0227  1806               	btfsc	6,0	;volatile
   726  0228  2A2A               	goto	u1351
   727  0229  2A2B               	goto	u1350
   728  022A                     u1351:
   729  022A  2A40               	goto	l1883
   730  022B                     u1350:
   731  022B                     l1875:
   732                           
   733                           ;main.c: 107:         {;main.c: 108:             TMR1ON = 1;
   734  022B  1410               	bsf	16,0	;volatile
   735                           
   736                           ;main.c: 110:             RC0 = 1;
   737  022C  1407               	bsf	7,0	;volatile
   738                           
   739                           ;main.c: 111:             RC2 = 1;
   740  022D  1507               	bsf	7,2	;volatile
   741  022E                     l1877:
   742                           
   743                           ;main.c: 113:             _delay((unsigned long)((300)*(20000000/4000.0)));
   744  022E  3008               	movlw	8
   745  022F  1283               	bcf	3,5	;RP0=0, select bank0
   746  0230  1303               	bcf	3,6	;RP1=0, select bank0
   747  0231  00BB               	movwf	??_main+2
   748  0232  309D               	movlw	157
   749  0233  00BA               	movwf	??_main+1
   750  0234  3005               	movlw	5
   751  0235  00B9               	movwf	??_main
   752  0236                     u1387:
   753  0236  0BB9               	decfsz	??_main,f
   754  0237  2A36               	goto	u1387
   755  0238  0BBA               	decfsz	??_main+1,f
   756  0239  2A36               	goto	u1387
   757  023A  0BBB               	decfsz	??_main+2,f
   758  023B  2A36               	goto	u1387
   759  023C                     l1879:
   760                           
   761                           ;main.c: 114:             RC0 = 0;
   762  023C  1283               	bcf	3,5	;RP0=0, select bank0
   763  023D  1303               	bcf	3,6	;RP1=0, select bank0
   764  023E  1007               	bcf	7,0	;volatile
   765  023F                     l1881:
   766                           
   767                           ;main.c: 115:             RC2 = 0;
   768  023F  1107               	bcf	7,2	;volatile
   769  0240                     l1883:
   770                           
   771                           ;main.c: 119:         if(!RB1) TMR1ON = 0;
   772  0240  1886               	btfsc	6,1	;volatile
   773  0241  2A43               	goto	u1361
   774  0242  2A44               	goto	u1360
   775  0243                     u1361:
   776  0243  2A45               	goto	l1887
   777  0244                     u1360:
   778  0244                     l1885:
   779  0244  1010               	bcf	16,0	;volatile
   780  0245                     l1887:
   781                           
   782                           ;main.c: 121:         setCronometro();
   783  0245  120A  118A  2462  120A  118A  	fcall	_setCronometro
   784  024A                     l1889:
   785                           
   786                           ;main.c: 123:         ADCON0bits.CHS0 = 0;
   787  024A  1283               	bcf	3,5	;RP0=0, select bank0
   788  024B  1303               	bcf	3,6	;RP1=0, select bank0
   789  024C  119F               	bcf	31,3	;volatile
   790  024D                     l1891:
   791                           
   792                           ;main.c: 124:         ADCON0bits.CHS1 = 0;
   793  024D  121F               	bcf	31,4	;volatile
   794  024E                     l1893:
   795                           
   796                           ;main.c: 125:         ADCON0bits.CHS2 = 0;
   797  024E  129F               	bcf	31,5	;volatile
   798  024F                     l1895:
   799                           
   800                           ;main.c: 127:         ADCON0bits.GO = 1;
   801  024F  151F               	bsf	31,2	;volatile
   802  0250                     l1897:
   803                           
   804                           ;main.c: 128:         _delay((unsigned long)((10)*(20000000/4000000.0)));
   805  0250  300F               	movlw	15
   806  0251  1283               	bcf	3,5	;RP0=0, select bank0
   807  0252  1303               	bcf	3,6	;RP1=0, select bank0
   808  0253  00B9               	movwf	??_main
   809  0254                     u1397:
   810  0254  0BB9               	decfsz	??_main,f
   811  0255  2A54               	goto	u1397
   812  0256  2A57               	nop2
   813  0257                     l1899:
   814                           
   815                           ;main.c: 129:         valor = ADRESH;
   816  0257  1283               	bcf	3,5	;RP0=0, select bank0
   817  0258  1303               	bcf	3,6	;RP1=0, select bank0
   818  0259  081E               	movf	30,w	;volatile
   819  025A  00B9               	movwf	??_main
   820  025B  01BA               	clrf	??_main+1
   821  025C  0839               	movf	??_main,w
   822  025D  00BC               	movwf	_valor
   823  025E  083A               	movf	??_main+1,w
   824  025F  00BD               	movwf	_valor+1
   825  0260                     l1901:
   826                           
   827                           ;main.c: 131:         if(valor == 0)
   828  0260  083C               	movf	_valor,w
   829  0261  043D               	iorwf	_valor+1,w
   830  0262  1D03               	btfss	3,2
   831  0263  2A65               	goto	u1371
   832  0264  2A66               	goto	u1370
   833  0265                     u1371:
   834  0265  2A68               	goto	l127
   835  0266                     u1370:
   836  0266                     l1903:
   837                           
   838                           ;main.c: 132:             RC3 = 1;
   839  0266  1587               	bsf	7,3	;volatile
   840  0267  2A24               	goto	l124
   841  0268                     l127:	
   842                           ;main.c: 133:         else
   843                           
   844                           
   845                           ;main.c: 134:             RC3 = 0;
   846  0268  1187               	bcf	7,3	;volatile
   847  0269  2A24               	goto	l124
   848  026A  120A  118A  280C   	ljmp	start
   849  026D                     __end_of_main:
   850                           
   851                           	psect	text1
   852  0462                     __ptext1:	
   853 ;; *************** function _setCronometro *****************
   854 ;; Defined at:
   855 ;;		line 161 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0
   871 ;;      Temps:          0       1       0       0       0
   872 ;;      Totals:         0       1       0       0       0
   873 ;;Total ram usage:        1 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 5
   876 ;; This function calls:
   877 ;;		_Lcd_Set_Cursor
   878 ;;		_Lcd_Write_String
   879 ;;		_sprintf
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885  0462                     _setCronometro:	
   886                           ;psect for function _setCronometro
   887                           
   888  0462                     l1815:	
   889                           ;incstack = 0
   890                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   891                           
   892                           
   893                           ;main.c: 163:     sprintf(buffer,"1-      %02d:%02d:%02d", minutos, segundos, centesimos
      +                          );
   894  0462  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   895  0463  1283               	bcf	3,5	;RP0=0, select bank0
   896  0464  1303               	bcf	3,6	;RP1=0, select bank0
   897  0465  00B8               	movwf	??_setCronometro
   898  0466  0838               	movf	??_setCronometro,w
   899  0467  00A5               	movwf	sprintf@f
   900  0468  0845               	movf	_minutos+1,w
   901  0469  00A7               	movwf	?_sprintf+2
   902  046A  0844               	movf	_minutos,w
   903  046B  00A6               	movwf	?_sprintf+1
   904  046C  0843               	movf	_segundos+1,w
   905  046D  00A9               	movwf	?_sprintf+4
   906  046E  0842               	movf	_segundos,w
   907  046F  00A8               	movwf	?_sprintf+3
   908  0470  0841               	movf	_centesimos+1,w
   909  0471  00AB               	movwf	?_sprintf+6
   910  0472  0840               	movf	_centesimos,w
   911  0473  00AA               	movwf	?_sprintf+5
   912  0474  3046               	movlw	(low (_buffer| 0))& (0+255)
   913  0475  120A  118A  201D  120A  118A  	fcall	_sprintf
   914  047A                     l1817:
   915                           
   916                           ;main.c: 164:     Lcd_Set_Cursor(1,1);
   917  047A  01F6               	clrf	Lcd_Set_Cursor@b
   918  047B  0AF6               	incf	Lcd_Set_Cursor@b,f
   919  047C  3001               	movlw	1
   920  047D  120A  118A  22CB  120A  118A  	fcall	_Lcd_Set_Cursor
   921  0482                     l1819:
   922                           
   923                           ;main.c: 165:     Lcd_Write_String(buffer);
   924  0482  3046               	movlw	(low (_buffer| 0))& (0+255)
   925  0483  120A  118A  24D0  120A  118A  	fcall	_Lcd_Write_String
   926  0488                     l141:
   927  0488  0008               	return
   928  0489                     __end_of_setCronometro:
   929                           
   930                           	psect	text2
   931  001D                     __ptext2:	
   932 ;; *************** function _sprintf *****************
   933 ;; Defined at:
   934 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  sp              1    wreg     PTR unsigned char 
   937 ;;		 -> buffer(10), 
   938 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   939 ;;		 -> STR_1(23), 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   942 ;;		 -> buffer(10), 
   943 ;;  tmpval          4    0        struct .
   944 ;;  width           2   20[BANK0 ] int 
   945 ;;  val             2   17[BANK0 ] unsigned int 
   946 ;;  cp              2    0        PTR const unsigned char 
   947 ;;  len             2    0        unsigned int 
   948 ;;  c               1   23[BANK0 ] unsigned char 
   949 ;;  flag            1   19[BANK0 ] unsigned char 
   950 ;;  prec            1   16[BANK0 ] char 
   951 ;;  ap              1   15[BANK0 ] PTR void [1]
   952 ;;		 -> ?_sprintf(2), 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  2    5[BANK0 ] int 
   955 ;; Registers used:
   956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   962 ;;      Params:         0       7       0       0       0
   963 ;;      Locals:         0       9       0       0       0
   964 ;;      Temps:          0       3       0       0       0
   965 ;;      Totals:         0      19       0       0       0
   966 ;;Total ram usage:       19 bytes
   967 ;; Hardware stack levels used: 1
   968 ;; Hardware stack levels required when called: 3
   969 ;; This function calls:
   970 ;;		___lwdiv
   971 ;;		___lwmod
   972 ;;		___wmul
   973 ;;		_isdigit
   974 ;; This function is called by:
   975 ;;		_setCronometro
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979  001D                     _sprintf:	
   980                           ;psect for function _sprintf
   981                           
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   985                           ;sprintf@sp stored from wreg
   986  001D  1283               	bcf	3,5	;RP0=0, select bank0
   987  001E  1303               	bcf	3,6	;RP1=0, select bank0
   988  001F  00B6               	movwf	sprintf@sp
   989  0020                     l1697:
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   992  0020  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   993  0021  00AC               	movwf	??_sprintf
   994  0022  082C               	movf	??_sprintf,w
   995  0023  00AF               	movwf	sprintf@ap
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   998  0024  29DA               	goto	l1801
   999  0025                     l1699:
  1000                           
  1001                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1002  0025  3025               	movlw	37
  1003  0026  0637               	xorwf	sprintf@c,w
  1004  0027  1903               	btfsc	3,2
  1005  0028  282A               	goto	u1171
  1006  0029  282B               	goto	u1170
  1007  002A                     u1171:
  1008  002A  2837               	goto	l1705
  1009  002B                     u1170:
  1010  002B                     l1701:
  1011                           
  1012                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1013  002B  0837               	movf	sprintf@c,w
  1014  002C  00AC               	movwf	??_sprintf
  1015  002D  0836               	movf	sprintf@sp,w
  1016  002E  0084               	movwf	4
  1017  002F  082C               	movf	??_sprintf,w
  1018  0030  1383               	bcf	3,7	;select IRP bank0
  1019  0031  0080               	movwf	0
  1020  0032                     l1703:
  1021  0032  3001               	movlw	1
  1022  0033  00AC               	movwf	??_sprintf
  1023  0034  082C               	movf	??_sprintf,w
  1024  0035  07B6               	addwf	sprintf@sp,f
  1025                           
  1026                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  1027  0036  29DA               	goto	l1801
  1028  0037                     l1705:
  1029                           
  1030                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1031  0037  01B4               	clrf	sprintf@width
  1032  0038  01B5               	clrf	sprintf@width+1
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1035  0039  01B3               	clrf	sprintf@flag
  1036  003A  2840               	goto	l1711
  1037  003B                     l245:	
  1038                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1039                           
  1040                           
  1041                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1042  003B  1533               	bsf	sprintf@flag,2
  1043  003C                     l1707:
  1044                           
  1045                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  1046  003C  3001               	movlw	1
  1047  003D  00AC               	movwf	??_sprintf
  1048  003E  082C               	movf	??_sprintf,w
  1049  003F  07A5               	addwf	sprintf@f,f
  1050  0040                     l1711:	
  1051                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1052                           
  1053  0040  0825               	movf	sprintf@f,w
  1054  0041  0084               	movwf	4
  1055  0042  120A  118A  243B  120A  118A  	fcall	stringdir
  1056  0047  00AC               	movwf	??_sprintf
  1057  0048  01AD               	clrf	??_sprintf+1
  1058                           
  1059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1060                           ; Switch size 1, requested type "simple"
  1061                           ; Number of cases is 1, Range of values is 0 to 0
  1062                           ; switch strategies available:
  1063                           ; Name         Instructions Cycles
  1064                           ; simple_byte            4     3 (average)
  1065                           ; direct_byte           11     8 (fixed)
  1066                           ; jumptable            260     6 (fixed)
  1067                           ;	Chosen strategy is simple_byte
  1068  0049  082D               	movf	??_sprintf+1,w
  1069  004A  3A00               	xorlw	0	; case 0
  1070  004B  1903               	skipnz
  1071  004C  284E               	goto	l1945
  1072  004D  2853               	goto	l1713
  1073  004E                     l1945:
  1074                           
  1075                           ; Switch size 1, requested type "simple"
  1076                           ; Number of cases is 1, Range of values is 48 to 48
  1077                           ; switch strategies available:
  1078                           ; Name         Instructions Cycles
  1079                           ; simple_byte            4     3 (average)
  1080                           ; direct_byte           14    11 (fixed)
  1081                           ; jumptable            263     9 (fixed)
  1082                           ;	Chosen strategy is simple_byte
  1083  004E  082C               	movf	??_sprintf,w
  1084  004F  3A30               	xorlw	48	; case 48
  1085  0050  1903               	skipnz
  1086  0051  283B               	goto	l245
  1087  0052  2853               	goto	l1713
  1088  0053                     l1713:
  1089                           
  1090                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1091  0053  0825               	movf	sprintf@f,w
  1092  0054  0084               	movwf	4
  1093  0055  120A  118A  243B  120A  118A  	fcall	stringdir
  1094  005A  120A  118A  250B  120A  118A  	fcall	_isdigit
  1095  005F  1C03               	btfss	3,0
  1096  0060  2862               	goto	u1181
  1097  0061  2863               	goto	u1180
  1098  0062                     u1181:
  1099  0062  28A3               	goto	l1727
  1100  0063                     u1180:
  1101  0063                     l1715:
  1102                           
  1103                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1104  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0065  01B4               	clrf	sprintf@width
  1107  0066  01B5               	clrf	sprintf@width+1
  1108  0067                     l1717:
  1109                           
  1110                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1111  0067  300A               	movlw	10
  1112  0068  00F2               	movwf	___wmul@multiplier
  1113  0069  3000               	movlw	0
  1114  006A  00F3               	movwf	___wmul@multiplier+1
  1115  006B  1283               	bcf	3,5	;RP0=0, select bank0
  1116  006C  1303               	bcf	3,6	;RP1=0, select bank0
  1117  006D  0835               	movf	sprintf@width+1,w
  1118  006E  00F5               	movwf	___wmul@multiplicand+1
  1119  006F  0834               	movf	sprintf@width,w
  1120  0070  00F4               	movwf	___wmul@multiplicand
  1121  0071  120A  118A  2489  120A  118A  	fcall	___wmul
  1122  0076  0873               	movf	?___wmul+1,w
  1123  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0079  00B5               	movwf	sprintf@width+1
  1126  007A  0872               	movf	?___wmul,w
  1127  007B  00B4               	movwf	sprintf@width
  1128  007C                     l1719:
  1129                           
  1130                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1131  007C  0825               	movf	sprintf@f,w
  1132  007D  0084               	movwf	4
  1133  007E  120A  118A  243B  120A  118A  	fcall	stringdir
  1134  0083  3ED0               	addlw	208
  1135  0084  00AC               	movwf	??_sprintf
  1136  0085  30FF               	movlw	255
  1137  0086  1803               	skipnc
  1138  0087  3000               	movlw	0
  1139  0088  00AD               	movwf	??_sprintf+1
  1140  0089  082C               	movf	??_sprintf,w
  1141  008A  07B4               	addwf	sprintf@width,f
  1142  008B  1803               	skipnc
  1143  008C  0AB5               	incf	sprintf@width+1,f
  1144  008D  082D               	movf	??_sprintf+1,w
  1145  008E  07B5               	addwf	sprintf@width+1,f
  1146  008F                     l1721:
  1147  008F  3001               	movlw	1
  1148  0090  00AC               	movwf	??_sprintf
  1149  0091  082C               	movf	??_sprintf,w
  1150  0092  07A5               	addwf	sprintf@f,f
  1151  0093                     l1723:
  1152                           
  1153                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1154  0093  0825               	movf	sprintf@f,w
  1155  0094  0084               	movwf	4
  1156  0095  120A  118A  243B  120A  118A  	fcall	stringdir
  1157  009A  120A  118A  250B  120A  118A  	fcall	_isdigit
  1158  009F  1803               	btfsc	3,0
  1159  00A0  28A2               	goto	u1191
  1160  00A1  28A3               	goto	u1190
  1161  00A2                     u1191:
  1162  00A2  2867               	goto	l1717
  1163  00A3                     u1190:
  1164  00A3                     l1727:
  1165  00A3  3001               	movlw	1
  1166  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1167  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1168  00A6  07A5               	addwf	sprintf@f,f
  1169  00A7  30FF               	movlw	-1
  1170  00A8  0725               	addwf	sprintf@f,w
  1171  00A9  0084               	movwf	4
  1172  00AA  120A  118A  243B  120A  118A  	fcall	stringdir
  1173  00AF  00B7               	movwf	sprintf@c
  1174  00B0  00AC               	movwf	??_sprintf
  1175  00B1  01AD               	clrf	??_sprintf+1
  1176                           
  1177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1178                           ; Switch size 1, requested type "simple"
  1179                           ; Number of cases is 1, Range of values is 0 to 0
  1180                           ; switch strategies available:
  1181                           ; Name         Instructions Cycles
  1182                           ; simple_byte            4     3 (average)
  1183                           ; direct_byte           11     8 (fixed)
  1184                           ; jumptable            260     6 (fixed)
  1185                           ;	Chosen strategy is simple_byte
  1186  00B2  082D               	movf	??_sprintf+1,w
  1187  00B3  3A00               	xorlw	0	; case 0
  1188  00B4  1903               	skipnz
  1189  00B5  28B7               	goto	l1947
  1190  00B6  29DA               	goto	l1801
  1191  00B7                     l1947:
  1192                           
  1193                           ; Switch size 1, requested type "simple"
  1194                           ; Number of cases is 3, Range of values is 0 to 105
  1195                           ; switch strategies available:
  1196                           ; Name         Instructions Cycles
  1197                           ; simple_byte           10     6 (average)
  1198                           ; jumptable            260     6 (fixed)
  1199                           ;	Chosen strategy is simple_byte
  1200  00B7  082C               	movf	??_sprintf,w
  1201  00B8  3A00               	xorlw	0	; case 0
  1202  00B9  1903               	skipnz
  1203  00BA  29EC               	goto	l1803
  1204  00BB  3A64               	xorlw	100	; case 100
  1205  00BC  1903               	skipnz
  1206  00BD  28C2               	goto	l1729
  1207  00BE  3A0D               	xorlw	13	; case 105
  1208  00BF  1903               	skipnz
  1209  00C0  28C2               	goto	l1729
  1210  00C1  29DA               	goto	l1801
  1211  00C2                     l1729:
  1212                           
  1213                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1214  00C2  082F               	movf	sprintf@ap,w
  1215  00C3  0084               	movwf	4
  1216  00C4  1383               	bcf	3,7	;select IRP bank0
  1217  00C5  0800               	movf	0,w
  1218  00C6  00B1               	movwf	sprintf@val
  1219  00C7  0A84               	incf	4,f
  1220  00C8  0800               	movf	0,w
  1221  00C9  00B2               	movwf	sprintf@val+1
  1222  00CA                     l1731:
  1223  00CA  3002               	movlw	2
  1224  00CB  00AC               	movwf	??_sprintf
  1225  00CC  082C               	movf	??_sprintf,w
  1226  00CD  07AF               	addwf	sprintf@ap,f
  1227  00CE                     l1733:
  1228                           
  1229                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1230  00CE  1FB2               	btfss	sprintf@val+1,7
  1231  00CF  28D1               	goto	u1201
  1232  00D0  28D2               	goto	u1200
  1233  00D1                     u1201:
  1234  00D1  28DB               	goto	l1739
  1235  00D2                     u1200:
  1236  00D2                     l1735:
  1237                           
  1238                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1239  00D2  3003               	movlw	3
  1240  00D3  00AC               	movwf	??_sprintf
  1241  00D4  082C               	movf	??_sprintf,w
  1242  00D5  04B3               	iorwf	sprintf@flag,f
  1243  00D6                     l1737:
  1244                           
  1245                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1246  00D6  09B1               	comf	sprintf@val,f
  1247  00D7  09B2               	comf	sprintf@val+1,f
  1248  00D8  0AB1               	incf	sprintf@val,f
  1249  00D9  1903               	skipnz
  1250  00DA  0AB2               	incf	sprintf@val+1,f
  1251  00DB                     l1739:
  1252                           
  1253                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1254  00DB  01B7               	clrf	sprintf@c
  1255  00DC  0AB7               	incf	sprintf@c,f
  1256  00DD                     l1745:
  1257                           
  1258                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1259  00DD  0837               	movf	sprintf@c,w
  1260  00DE  00AC               	movwf	??_sprintf
  1261  00DF  072C               	addwf	??_sprintf,w
  1262  00E0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1263  00E1  0084               	movwf	4
  1264  00E2  120A  118A  243B  120A  118A  	fcall	stringdir
  1265  00E7  00AD               	movwf	??_sprintf+1
  1266  00E8  120A  118A  243B  120A  118A  	fcall	stringdir
  1267  00ED  00AE               	movwf	??_sprintf+2
  1268  00EE  082E               	movf	??_sprintf+2,w
  1269  00EF  0232               	subwf	sprintf@val+1,w
  1270  00F0  1D03               	skipz
  1271  00F1  28F4               	goto	u1215
  1272  00F2  082D               	movf	??_sprintf+1,w
  1273  00F3  0231               	subwf	sprintf@val,w
  1274  00F4                     u1215:
  1275  00F4  1803               	skipnc
  1276  00F5  28F7               	goto	u1211
  1277  00F6  28F8               	goto	u1210
  1278  00F7                     u1211:
  1279  00F7  28F9               	goto	l1749
  1280  00F8                     u1210:
  1281  00F8  2903               	goto	l1751
  1282  00F9                     l1749:
  1283  00F9  3001               	movlw	1
  1284  00FA  00AC               	movwf	??_sprintf
  1285  00FB  082C               	movf	??_sprintf,w
  1286  00FC  07B7               	addwf	sprintf@c,f
  1287  00FD  3005               	movlw	5
  1288  00FE  0637               	xorwf	sprintf@c,w
  1289  00FF  1D03               	btfss	3,2
  1290  0100  2902               	goto	u1221
  1291  0101  2903               	goto	u1220
  1292  0102                     u1221:
  1293  0102  28DD               	goto	l1745
  1294  0103                     u1220:
  1295  0103                     l1751:
  1296                           
  1297                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1298  0103  0834               	movf	sprintf@width,w
  1299  0104  0435               	iorwf	sprintf@width+1,w
  1300  0105  1903               	btfsc	3,2
  1301  0106  2908               	goto	u1231
  1302  0107  2909               	goto	u1230
  1303  0108                     u1231:
  1304  0108  2915               	goto	l263
  1305  0109                     u1230:
  1306  0109                     l1753:
  1307  0109  0833               	movf	sprintf@flag,w
  1308  010A  3903               	andlw	3
  1309  010B  1903               	btfsc	3,2
  1310  010C  290E               	goto	u1241
  1311  010D  290F               	goto	u1240
  1312  010E                     u1241:
  1313  010E  2915               	goto	l263
  1314  010F                     u1240:
  1315  010F                     l1755:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1318  010F  30FF               	movlw	255
  1319  0110  07B4               	addwf	sprintf@width,f
  1320  0111  1803               	skipnc
  1321  0112  0AB5               	incf	sprintf@width+1,f
  1322  0113  30FF               	movlw	255
  1323  0114  07B5               	addwf	sprintf@width+1,f
  1324  0115                     l263:
  1325                           
  1326                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1327  0115  0835               	movf	sprintf@width+1,w
  1328  0116  3A80               	xorlw	128
  1329  0117  3C80               	sublw	128
  1330  0118  1D03               	skipz
  1331  0119  291C               	goto	u1255
  1332  011A  0834               	movf	sprintf@width,w
  1333  011B  0237               	subwf	sprintf@c,w
  1334  011C                     u1255:
  1335  011C  1803               	skipnc
  1336  011D  291F               	goto	u1251
  1337  011E  2920               	goto	u1250
  1338  011F                     u1251:
  1339  011F  292C               	goto	l1759
  1340  0120                     u1250:
  1341  0120                     l1757:
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1344  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1345  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1346  0122  0837               	movf	sprintf@c,w
  1347  0123  00AC               	movwf	??_sprintf
  1348  0124  01AD               	clrf	??_sprintf+1
  1349  0125  082C               	movf	??_sprintf,w
  1350  0126  02B4               	subwf	sprintf@width,f
  1351  0127  082D               	movf	??_sprintf+1,w
  1352  0128  1C03               	skipc
  1353  0129  03B5               	decf	sprintf@width+1,f
  1354  012A  02B5               	subwf	sprintf@width+1,f
  1355  012B  2930               	goto	l1761
  1356  012C                     l1759:
  1357                           
  1358                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1359  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1360  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1361  012E  01B4               	clrf	sprintf@width
  1362  012F  01B5               	clrf	sprintf@width+1
  1363  0130                     l1761:
  1364                           
  1365                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1366  0130  1D33               	btfss	sprintf@flag,2
  1367  0131  2933               	goto	u1261
  1368  0132  2934               	goto	u1260
  1369  0133                     u1261:
  1370  0133  2963               	goto	l1777
  1371  0134                     u1260:
  1372  0134                     l1763:
  1373                           
  1374                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1375  0134  0833               	movf	sprintf@flag,w
  1376  0135  3903               	andlw	3
  1377  0136  1903               	btfsc	3,2
  1378  0137  2939               	goto	u1271
  1379  0138  293A               	goto	u1270
  1380  0139                     u1271:
  1381  0139  2945               	goto	l1769
  1382  013A                     u1270:
  1383  013A                     l1765:
  1384                           
  1385                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1386  013A  302D               	movlw	45
  1387  013B  00AC               	movwf	??_sprintf
  1388  013C  0836               	movf	sprintf@sp,w
  1389  013D  0084               	movwf	4
  1390  013E  082C               	movf	??_sprintf,w
  1391  013F  1383               	bcf	3,7	;select IRP bank0
  1392  0140  0080               	movwf	0
  1393  0141                     l1767:
  1394  0141  3001               	movlw	1
  1395  0142  00AC               	movwf	??_sprintf
  1396  0143  082C               	movf	??_sprintf,w
  1397  0144  07B6               	addwf	sprintf@sp,f
  1398  0145                     l1769:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1401  0145  0834               	movf	sprintf@width,w
  1402  0146  0435               	iorwf	sprintf@width+1,w
  1403  0147  1903               	btfsc	3,2
  1404  0148  294A               	goto	u1281
  1405  0149  294B               	goto	u1280
  1406  014A                     u1281:
  1407  014A  2991               	goto	l1791
  1408  014B                     u1280:
  1409  014B                     l1771:
  1410                           
  1411                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1412  014B  3030               	movlw	48
  1413  014C  00AC               	movwf	??_sprintf
  1414  014D  0836               	movf	sprintf@sp,w
  1415  014E  0084               	movwf	4
  1416  014F  082C               	movf	??_sprintf,w
  1417  0150  1383               	bcf	3,7	;select IRP bank0
  1418  0151  0080               	movwf	0
  1419  0152                     l1773:
  1420  0152  3001               	movlw	1
  1421  0153  00AC               	movwf	??_sprintf
  1422  0154  082C               	movf	??_sprintf,w
  1423  0155  07B6               	addwf	sprintf@sp,f
  1424  0156                     l1775:
  1425  0156  30FF               	movlw	255
  1426  0157  07B4               	addwf	sprintf@width,f
  1427  0158  1803               	skipnc
  1428  0159  0AB5               	incf	sprintf@width+1,f
  1429  015A  30FF               	movlw	255
  1430  015B  07B5               	addwf	sprintf@width+1,f
  1431  015C  0834               	movf	sprintf@width,w
  1432  015D  0435               	iorwf	sprintf@width+1,w
  1433  015E  1D03               	btfss	3,2
  1434  015F  2961               	goto	u1291
  1435  0160  2962               	goto	u1290
  1436  0161                     u1291:
  1437  0161  294B               	goto	l1771
  1438  0162                     u1290:
  1439  0162  2991               	goto	l1791
  1440  0163                     l1777:
  1441                           
  1442                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1443  0163  0834               	movf	sprintf@width,w
  1444  0164  0435               	iorwf	sprintf@width+1,w
  1445  0165  1903               	btfsc	3,2
  1446  0166  2968               	goto	u1301
  1447  0167  2969               	goto	u1300
  1448  0168                     u1301:
  1449  0168  2980               	goto	l1785
  1450  0169                     u1300:
  1451  0169                     l1779:
  1452                           
  1453                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1454  0169  3020               	movlw	32
  1455  016A  00AC               	movwf	??_sprintf
  1456  016B  0836               	movf	sprintf@sp,w
  1457  016C  0084               	movwf	4
  1458  016D  082C               	movf	??_sprintf,w
  1459  016E  1383               	bcf	3,7	;select IRP bank0
  1460  016F  0080               	movwf	0
  1461  0170                     l1781:
  1462  0170  3001               	movlw	1
  1463  0171  00AC               	movwf	??_sprintf
  1464  0172  082C               	movf	??_sprintf,w
  1465  0173  07B6               	addwf	sprintf@sp,f
  1466  0174                     l1783:
  1467  0174  30FF               	movlw	255
  1468  0175  07B4               	addwf	sprintf@width,f
  1469  0176  1803               	skipnc
  1470  0177  0AB5               	incf	sprintf@width+1,f
  1471  0178  30FF               	movlw	255
  1472  0179  07B5               	addwf	sprintf@width+1,f
  1473  017A  0834               	movf	sprintf@width,w
  1474  017B  0435               	iorwf	sprintf@width+1,w
  1475  017C  1D03               	btfss	3,2
  1476  017D  297F               	goto	u1311
  1477  017E  2980               	goto	u1310
  1478  017F                     u1311:
  1479  017F  2969               	goto	l1779
  1480  0180                     u1310:
  1481  0180                     l1785:
  1482                           
  1483                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1484  0180  0833               	movf	sprintf@flag,w
  1485  0181  3903               	andlw	3
  1486  0182  1903               	btfsc	3,2
  1487  0183  2985               	goto	u1321
  1488  0184  2986               	goto	u1320
  1489  0185                     u1321:
  1490  0185  2991               	goto	l1791
  1491  0186                     u1320:
  1492  0186                     l1787:
  1493                           
  1494                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1495  0186  302D               	movlw	45
  1496  0187  00AC               	movwf	??_sprintf
  1497  0188  0836               	movf	sprintf@sp,w
  1498  0189  0084               	movwf	4
  1499  018A  082C               	movf	??_sprintf,w
  1500  018B  1383               	bcf	3,7	;select IRP bank0
  1501  018C  0080               	movwf	0
  1502  018D                     l1789:
  1503  018D  3001               	movlw	1
  1504  018E  00AC               	movwf	??_sprintf
  1505  018F  082C               	movf	??_sprintf,w
  1506  0190  07B6               	addwf	sprintf@sp,f
  1507  0191                     l1791:
  1508                           
  1509                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1510  0191  0837               	movf	sprintf@c,w
  1511  0192  00AC               	movwf	??_sprintf
  1512  0193  082C               	movf	??_sprintf,w
  1513  0194  00B0               	movwf	sprintf@prec
  1514                           
  1515                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1516  0195  29D1               	goto	l1799
  1517  0196                     l1793:
  1518                           
  1519                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1520  0196  300A               	movlw	10
  1521  0197  00A0               	movwf	___lwmod@divisor
  1522  0198  3000               	movlw	0
  1523  0199  00A1               	movwf	___lwmod@divisor+1
  1524  019A  0830               	movf	sprintf@prec,w
  1525  019B  00AC               	movwf	??_sprintf
  1526  019C  072C               	addwf	??_sprintf,w
  1527  019D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1528  019E  0084               	movwf	4
  1529  019F  120A  118A  243B  120A  118A  	fcall	stringdir
  1530  01A4  00F2               	movwf	___lwdiv@divisor
  1531  01A5  120A  118A  243B  120A  118A  	fcall	stringdir
  1532  01AA  00F3               	movwf	___lwdiv@divisor+1
  1533  01AB  0832               	movf	sprintf@val+1,w
  1534  01AC  00F5               	movwf	___lwdiv@dividend+1
  1535  01AD  0831               	movf	sprintf@val,w
  1536  01AE  00F4               	movwf	___lwdiv@dividend
  1537  01AF  120A  118A  2323  120A  118A  	fcall	___lwdiv
  1538  01B4  0873               	movf	?___lwdiv+1,w
  1539  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1540  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1541  01B7  00A3               	movwf	___lwmod@dividend+1
  1542  01B8  0872               	movf	?___lwdiv,w
  1543  01B9  00A2               	movwf	___lwmod@dividend
  1544  01BA  120A  118A  2367  120A  118A  	fcall	___lwmod
  1545  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1546  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1547  01C1  0820               	movf	?___lwmod,w
  1548  01C2  3E30               	addlw	48
  1549  01C3  00AD               	movwf	??_sprintf+1
  1550  01C4  082D               	movf	??_sprintf+1,w
  1551  01C5  00B7               	movwf	sprintf@c
  1552  01C6                     l1795:
  1553                           
  1554                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1555  01C6  0837               	movf	sprintf@c,w
  1556  01C7  00AC               	movwf	??_sprintf
  1557  01C8  0836               	movf	sprintf@sp,w
  1558  01C9  0084               	movwf	4
  1559  01CA  082C               	movf	??_sprintf,w
  1560  01CB  1383               	bcf	3,7	;select IRP bank0
  1561  01CC  0080               	movwf	0
  1562  01CD                     l1797:
  1563  01CD  3001               	movlw	1
  1564  01CE  00AC               	movwf	??_sprintf
  1565  01CF  082C               	movf	??_sprintf,w
  1566  01D0  07B6               	addwf	sprintf@sp,f
  1567  01D1                     l1799:
  1568                           
  1569                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1570  01D1  30FF               	movlw	255
  1571  01D2  00AC               	movwf	??_sprintf
  1572  01D3  082C               	movf	??_sprintf,w
  1573  01D4  07B0               	addwf	sprintf@prec,f
  1574  01D5  0A30               	incf	sprintf@prec,w
  1575  01D6  1D03               	btfss	3,2
  1576  01D7  29D9               	goto	u1331
  1577  01D8  29DA               	goto	u1330
  1578  01D9                     u1331:
  1579  01D9  2996               	goto	l1793
  1580  01DA                     u1330:
  1581  01DA                     l1801:
  1582                           
  1583                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1584  01DA  3001               	movlw	1
  1585  01DB  07A5               	addwf	sprintf@f,f
  1586  01DC  30FF               	movlw	-1
  1587  01DD  0725               	addwf	sprintf@f,w
  1588  01DE  0084               	movwf	4
  1589  01DF  120A  118A  243B  120A  118A  	fcall	stringdir
  1590  01E4  00AC               	movwf	??_sprintf
  1591  01E5  082C               	movf	??_sprintf,w
  1592  01E6  00B7               	movwf	sprintf@c
  1593  01E7  0837               	movf	sprintf@c,w
  1594  01E8  1D03               	btfss	3,2
  1595  01E9  29EB               	goto	u1341
  1596  01EA  29EC               	goto	u1340
  1597  01EB                     u1341:
  1598  01EB  2825               	goto	l1699
  1599  01EC                     u1340:
  1600  01EC                     l1803:
  1601                           
  1602                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1603  01EC  0836               	movf	sprintf@sp,w
  1604  01ED  0084               	movwf	4
  1605  01EE  1383               	bcf	3,7	;select IRP bank0
  1606  01EF  0180               	clrf	0
  1607  01F0                     l280:
  1608  01F0  0008               	return
  1609  01F1                     __end_of_sprintf:
  1610                           
  1611                           	psect	text3
  1612  050B                     __ptext3:	
  1613 ;; *************** function _isdigit *****************
  1614 ;; Defined at:
  1615 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;  c               1    wreg     unsigned char 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  c               1    3[COMMON] unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;		None               void
  1622 ;; Registers used:
  1623 ;;		wreg, status,2, status,0
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1629 ;;      Params:         0       0       0       0       0
  1630 ;;      Locals:         2       0       0       0       0
  1631 ;;      Temps:          0       0       0       0       0
  1632 ;;      Totals:         2       0       0       0       0
  1633 ;;Total ram usage:        2 bytes
  1634 ;; Hardware stack levels used: 1
  1635 ;; Hardware stack levels required when called: 2
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_sprintf
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643  050B                     _isdigit:	
  1644                           ;psect for function _isdigit
  1645                           
  1646                           
  1647                           ;incstack = 0
  1648                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1649                           ;isdigit@c stored from wreg
  1650  050B  00F3               	movwf	isdigit@c
  1651  050C                     l1275:
  1652  050C  01F2               	clrf	_isdigit$829
  1653  050D                     l1277:
  1654  050D  303A               	movlw	58
  1655  050E  0273               	subwf	isdigit@c,w
  1656  050F  1803               	skipnc
  1657  0510  2D12               	goto	u611
  1658  0511  2D13               	goto	u610
  1659  0512                     u611:
  1660  0512  2D1B               	goto	l1283
  1661  0513                     u610:
  1662  0513                     l1279:
  1663  0513  3030               	movlw	48
  1664  0514  0273               	subwf	isdigit@c,w
  1665  0515  1C03               	skipc
  1666  0516  2D18               	goto	u621
  1667  0517  2D19               	goto	u620
  1668  0518                     u621:
  1669  0518  2D1B               	goto	l1283
  1670  0519                     u620:
  1671  0519                     l1281:
  1672  0519  01F2               	clrf	_isdigit$829
  1673  051A  0AF2               	incf	_isdigit$829,f
  1674  051B                     l1283:
  1675  051B  0C72               	rrf	_isdigit$829,w
  1676  051C                     l737:
  1677  051C  0008               	return
  1678  051D                     __end_of_isdigit:
  1679                           
  1680                           	psect	text4
  1681  0489                     __ptext4:	
  1682 ;; *************** function ___wmul *****************
  1683 ;; Defined at:
  1684 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  multiplier      2    2[COMMON] unsigned int 
  1687 ;;  multiplicand    2    4[COMMON] unsigned int 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;  product         2    6[COMMON] unsigned int 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  2    2[COMMON] unsigned int 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2, status,0
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1699 ;;      Params:         4       0       0       0       0
  1700 ;;      Locals:         2       0       0       0       0
  1701 ;;      Temps:          0       0       0       0       0
  1702 ;;      Totals:         6       0       0       0       0
  1703 ;;Total ram usage:        6 bytes
  1704 ;; Hardware stack levels used: 1
  1705 ;; Hardware stack levels required when called: 2
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_sprintf
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713  0489                     ___wmul:	
  1714                           ;psect for function ___wmul
  1715                           
  1716  0489                     l1287:	
  1717                           ;incstack = 0
  1718                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1719                           
  1720  0489  01F6               	clrf	___wmul@product
  1721  048A  01F7               	clrf	___wmul@product+1
  1722  048B                     l1289:
  1723  048B  1C72               	btfss	___wmul@multiplier,0
  1724  048C  2C8E               	goto	u631
  1725  048D  2C8F               	goto	u630
  1726  048E                     u631:
  1727  048E  2C95               	goto	l284
  1728  048F                     u630:
  1729  048F                     l1291:
  1730  048F  0874               	movf	___wmul@multiplicand,w
  1731  0490  07F6               	addwf	___wmul@product,f
  1732  0491  1803               	skipnc
  1733  0492  0AF7               	incf	___wmul@product+1,f
  1734  0493  0875               	movf	___wmul@multiplicand+1,w
  1735  0494  07F7               	addwf	___wmul@product+1,f
  1736  0495                     l284:
  1737  0495  3001               	movlw	1
  1738  0496                     u645:
  1739  0496  1003               	clrc
  1740  0497  0DF4               	rlf	___wmul@multiplicand,f
  1741  0498  0DF5               	rlf	___wmul@multiplicand+1,f
  1742  0499  3EFF               	addlw	-1
  1743  049A  1D03               	skipz
  1744  049B  2C96               	goto	u645
  1745  049C                     l1293:
  1746  049C  3001               	movlw	1
  1747  049D                     u655:
  1748  049D  1003               	clrc
  1749  049E  0CF3               	rrf	___wmul@multiplier+1,f
  1750  049F  0CF2               	rrf	___wmul@multiplier,f
  1751  04A0  3EFF               	addlw	-1
  1752  04A1  1D03               	skipz
  1753  04A2  2C9D               	goto	u655
  1754  04A3                     l1295:
  1755  04A3  0872               	movf	___wmul@multiplier,w
  1756  04A4  0473               	iorwf	___wmul@multiplier+1,w
  1757  04A5  1D03               	btfss	3,2
  1758  04A6  2CA8               	goto	u661
  1759  04A7  2CA9               	goto	u660
  1760  04A8                     u661:
  1761  04A8  2C8B               	goto	l1289
  1762  04A9                     u660:
  1763  04A9                     l1297:
  1764  04A9  0877               	movf	___wmul@product+1,w
  1765  04AA  00F3               	movwf	?___wmul+1
  1766  04AB  0876               	movf	___wmul@product,w
  1767  04AC  00F2               	movwf	?___wmul
  1768  04AD                     l286:
  1769  04AD  0008               	return
  1770  04AE                     __end_of___wmul:
  1771                           
  1772                           	psect	text5
  1773  0367                     __ptext5:	
  1774 ;; *************** function ___lwmod *****************
  1775 ;; Defined at:
  1776 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  divisor         2    0[BANK0 ] unsigned int 
  1779 ;;  dividend        2    2[BANK0 ] unsigned int 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  counter         1    4[BANK0 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2    0[BANK0 ] unsigned int 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         0       4       0       0       0
  1792 ;;      Locals:         0       1       0       0       0
  1793 ;;      Temps:          1       0       0       0       0
  1794 ;;      Totals:         1       5       0       0       0
  1795 ;;Total ram usage:        6 bytes
  1796 ;; Hardware stack levels used: 1
  1797 ;; Hardware stack levels required when called: 2
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_sprintf
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805  0367                     ___lwmod:	
  1806                           ;psect for function ___lwmod
  1807                           
  1808  0367                     l1675:	
  1809                           ;incstack = 0
  1810                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1811                           
  1812  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0369  0820               	movf	___lwmod@divisor,w
  1815  036A  0421               	iorwf	___lwmod@divisor+1,w
  1816  036B  1903               	btfsc	3,2
  1817  036C  2B6E               	goto	u1111
  1818  036D  2B6F               	goto	u1110
  1819  036E                     u1111:
  1820  036E  2B9E               	goto	l1693
  1821  036F                     u1110:
  1822  036F                     l1677:
  1823  036F  01A4               	clrf	___lwmod@counter
  1824  0370  0AA4               	incf	___lwmod@counter,f
  1825  0371  2B7D               	goto	l1683
  1826  0372                     l1679:
  1827  0372  3001               	movlw	1
  1828  0373                     u1125:
  1829  0373  1003               	clrc
  1830  0374  0DA0               	rlf	___lwmod@divisor,f
  1831  0375  0DA1               	rlf	___lwmod@divisor+1,f
  1832  0376  3EFF               	addlw	-1
  1833  0377  1D03               	skipz
  1834  0378  2B73               	goto	u1125
  1835  0379                     l1681:
  1836  0379  3001               	movlw	1
  1837  037A  00FA               	movwf	??___lwmod
  1838  037B  087A               	movf	??___lwmod,w
  1839  037C  07A4               	addwf	___lwmod@counter,f
  1840  037D                     l1683:
  1841  037D  1FA1               	btfss	___lwmod@divisor+1,7
  1842  037E  2B80               	goto	u1131
  1843  037F  2B81               	goto	u1130
  1844  0380                     u1131:
  1845  0380  2B72               	goto	l1679
  1846  0381                     u1130:
  1847  0381                     l1685:
  1848  0381  0821               	movf	___lwmod@divisor+1,w
  1849  0382  0223               	subwf	___lwmod@dividend+1,w
  1850  0383  1D03               	skipz
  1851  0384  2B87               	goto	u1145
  1852  0385  0820               	movf	___lwmod@divisor,w
  1853  0386  0222               	subwf	___lwmod@dividend,w
  1854  0387                     u1145:
  1855  0387  1C03               	skipc
  1856  0388  2B8A               	goto	u1141
  1857  0389  2B8B               	goto	u1140
  1858  038A                     u1141:
  1859  038A  2B91               	goto	l1689
  1860  038B                     u1140:
  1861  038B                     l1687:
  1862  038B  0820               	movf	___lwmod@divisor,w
  1863  038C  02A2               	subwf	___lwmod@dividend,f
  1864  038D  0821               	movf	___lwmod@divisor+1,w
  1865  038E  1C03               	skipc
  1866  038F  03A3               	decf	___lwmod@dividend+1,f
  1867  0390  02A3               	subwf	___lwmod@dividend+1,f
  1868  0391                     l1689:
  1869  0391  3001               	movlw	1
  1870  0392                     u1155:
  1871  0392  1003               	clrc
  1872  0393  0CA1               	rrf	___lwmod@divisor+1,f
  1873  0394  0CA0               	rrf	___lwmod@divisor,f
  1874  0395  3EFF               	addlw	-1
  1875  0396  1D03               	skipz
  1876  0397  2B92               	goto	u1155
  1877  0398                     l1691:
  1878  0398  3001               	movlw	1
  1879  0399  02A4               	subwf	___lwmod@counter,f
  1880  039A  1D03               	btfss	3,2
  1881  039B  2B9D               	goto	u1161
  1882  039C  2B9E               	goto	u1160
  1883  039D                     u1161:
  1884  039D  2B81               	goto	l1685
  1885  039E                     u1160:
  1886  039E                     l1693:
  1887  039E  0823               	movf	___lwmod@dividend+1,w
  1888  039F  00A1               	movwf	?___lwmod+1
  1889  03A0  0822               	movf	___lwmod@dividend,w
  1890  03A1  00A0               	movwf	?___lwmod
  1891  03A2                     l566:
  1892  03A2  0008               	return
  1893  03A3                     __end_of___lwmod:
  1894                           
  1895                           	psect	text6
  1896  0323                     __ptext6:	
  1897 ;; *************** function ___lwdiv *****************
  1898 ;; Defined at:
  1899 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  divisor         2    2[COMMON] unsigned int 
  1902 ;;  dividend        2    4[COMMON] unsigned int 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  quotient        2    7[COMMON] unsigned int 
  1905 ;;  counter         1    9[COMMON] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  2    2[COMMON] unsigned int 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1915 ;;      Params:         4       0       0       0       0
  1916 ;;      Locals:         3       0       0       0       0
  1917 ;;      Temps:          1       0       0       0       0
  1918 ;;      Totals:         8       0       0       0       0
  1919 ;;Total ram usage:        8 bytes
  1920 ;; Hardware stack levels used: 1
  1921 ;; Hardware stack levels required when called: 2
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_sprintf
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929  0323                     ___lwdiv:	
  1930                           ;psect for function ___lwdiv
  1931                           
  1932  0323                     l1301:	
  1933                           ;incstack = 0
  1934                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1935                           
  1936  0323  01F7               	clrf	___lwdiv@quotient
  1937  0324  01F8               	clrf	___lwdiv@quotient+1
  1938  0325                     l1303:
  1939  0325  0872               	movf	___lwdiv@divisor,w
  1940  0326  0473               	iorwf	___lwdiv@divisor+1,w
  1941  0327  1903               	btfsc	3,2
  1942  0328  2B2A               	goto	u671
  1943  0329  2B2B               	goto	u670
  1944  032A                     u671:
  1945  032A  2B62               	goto	l1323
  1946  032B                     u670:
  1947  032B                     l1305:
  1948  032B  01F9               	clrf	___lwdiv@counter
  1949  032C  0AF9               	incf	___lwdiv@counter,f
  1950  032D  2B39               	goto	l1311
  1951  032E                     l1307:
  1952  032E  3001               	movlw	1
  1953  032F                     u685:
  1954  032F  1003               	clrc
  1955  0330  0DF2               	rlf	___lwdiv@divisor,f
  1956  0331  0DF3               	rlf	___lwdiv@divisor+1,f
  1957  0332  3EFF               	addlw	-1
  1958  0333  1D03               	skipz
  1959  0334  2B2F               	goto	u685
  1960  0335                     l1309:
  1961  0335  3001               	movlw	1
  1962  0336  00F6               	movwf	??___lwdiv
  1963  0337  0876               	movf	??___lwdiv,w
  1964  0338  07F9               	addwf	___lwdiv@counter,f
  1965  0339                     l1311:
  1966  0339  1FF3               	btfss	___lwdiv@divisor+1,7
  1967  033A  2B3C               	goto	u691
  1968  033B  2B3D               	goto	u690
  1969  033C                     u691:
  1970  033C  2B2E               	goto	l1307
  1971  033D                     u690:
  1972  033D                     l1313:
  1973  033D  3001               	movlw	1
  1974  033E                     u705:
  1975  033E  1003               	clrc
  1976  033F  0DF7               	rlf	___lwdiv@quotient,f
  1977  0340  0DF8               	rlf	___lwdiv@quotient+1,f
  1978  0341  3EFF               	addlw	-1
  1979  0342  1D03               	skipz
  1980  0343  2B3E               	goto	u705
  1981  0344  0873               	movf	___lwdiv@divisor+1,w
  1982  0345  0275               	subwf	___lwdiv@dividend+1,w
  1983  0346  1D03               	skipz
  1984  0347  2B4A               	goto	u715
  1985  0348  0872               	movf	___lwdiv@divisor,w
  1986  0349  0274               	subwf	___lwdiv@dividend,w
  1987  034A                     u715:
  1988  034A  1C03               	skipc
  1989  034B  2B4D               	goto	u711
  1990  034C  2B4E               	goto	u710
  1991  034D                     u711:
  1992  034D  2B55               	goto	l1319
  1993  034E                     u710:
  1994  034E                     l1315:
  1995  034E  0872               	movf	___lwdiv@divisor,w
  1996  034F  02F4               	subwf	___lwdiv@dividend,f
  1997  0350  0873               	movf	___lwdiv@divisor+1,w
  1998  0351  1C03               	skipc
  1999  0352  03F5               	decf	___lwdiv@dividend+1,f
  2000  0353  02F5               	subwf	___lwdiv@dividend+1,f
  2001  0354                     l1317:
  2002  0354  1477               	bsf	___lwdiv@quotient,0
  2003  0355                     l1319:
  2004  0355  3001               	movlw	1
  2005  0356                     u725:
  2006  0356  1003               	clrc
  2007  0357  0CF3               	rrf	___lwdiv@divisor+1,f
  2008  0358  0CF2               	rrf	___lwdiv@divisor,f
  2009  0359  3EFF               	addlw	-1
  2010  035A  1D03               	skipz
  2011  035B  2B56               	goto	u725
  2012  035C                     l1321:
  2013  035C  3001               	movlw	1
  2014  035D  02F9               	subwf	___lwdiv@counter,f
  2015  035E  1D03               	btfss	3,2
  2016  035F  2B61               	goto	u731
  2017  0360  2B62               	goto	u730
  2018  0361                     u731:
  2019  0361  2B3D               	goto	l1313
  2020  0362                     u730:
  2021  0362                     l1323:
  2022  0362  0878               	movf	___lwdiv@quotient+1,w
  2023  0363  00F3               	movwf	?___lwdiv+1
  2024  0364  0877               	movf	___lwdiv@quotient,w
  2025  0365  00F2               	movwf	?___lwdiv
  2026  0366                     l556:
  2027  0366  0008               	return
  2028  0367                     __end_of___lwdiv:
  2029                           
  2030                           	psect	text7
  2031  04D0                     __ptext7:	
  2032 ;; *************** function _Lcd_Write_String *****************
  2033 ;; Defined at:
  2034 ;;		line 96 in file "./lcd.h"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  a               1    wreg     PTR unsigned char 
  2037 ;;		 -> buffer(10), 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  a               1   10[COMMON] PTR unsigned char 
  2040 ;;		 -> buffer(10), 
  2041 ;;  i               2    8[COMMON] int 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2051 ;;      Params:         0       0       0       0       0
  2052 ;;      Locals:         3       0       0       0       0
  2053 ;;      Temps:          1       0       0       0       0
  2054 ;;      Totals:         4       0       0       0       0
  2055 ;;Total ram usage:        4 bytes
  2056 ;; Hardware stack levels used: 1
  2057 ;; Hardware stack levels required when called: 4
  2058 ;; This function calls:
  2059 ;;		_Lcd_Write_Char
  2060 ;; This function is called by:
  2061 ;;		_setCronometro
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065  04D0                     _Lcd_Write_String:	
  2066                           ;psect for function _Lcd_Write_String
  2067                           
  2068                           
  2069                           ;incstack = 0
  2070                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2071                           ;Lcd_Write_String@a stored from wreg
  2072  04D0  00FA               	movwf	Lcd_Write_String@a
  2073  04D1                     l1369:
  2074                           
  2075                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  2076  04D1  01F8               	clrf	Lcd_Write_String@i
  2077  04D2  01F9               	clrf	Lcd_Write_String@i+1
  2078  04D3  2CE5               	goto	l1375
  2079  04D4                     l1371:
  2080                           
  2081                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  2082  04D4  0878               	movf	Lcd_Write_String@i,w
  2083  04D5  077A               	addwf	Lcd_Write_String@a,w
  2084  04D6  00F7               	movwf	??_Lcd_Write_String
  2085  04D7  0877               	movf	??_Lcd_Write_String,w
  2086  04D8  0084               	movwf	4
  2087  04D9  0800               	movf	0,w
  2088  04DA  120A  118A  23A3  120A  118A  	fcall	_Lcd_Write_Char
  2089  04DF                     l1373:
  2090  04DF  3001               	movlw	1
  2091  04E0  07F8               	addwf	Lcd_Write_String@i,f
  2092  04E1  1803               	skipnc
  2093  04E2  0AF9               	incf	Lcd_Write_String@i+1,f
  2094  04E3  3000               	movlw	0
  2095  04E4  07F9               	addwf	Lcd_Write_String@i+1,f
  2096  04E5                     l1375:
  2097  04E5  0878               	movf	Lcd_Write_String@i,w
  2098  04E6  077A               	addwf	Lcd_Write_String@a,w
  2099  04E7  00F7               	movwf	??_Lcd_Write_String
  2100  04E8  0877               	movf	??_Lcd_Write_String,w
  2101  04E9  0084               	movwf	4
  2102  04EA  1383               	bcf	3,7	;select IRP bank0
  2103  04EB  0800               	movf	0,w
  2104  04EC  1D03               	btfss	3,2
  2105  04ED  2CEF               	goto	u841
  2106  04EE  2CF0               	goto	u840
  2107  04EF                     u841:
  2108  04EF  2CD4               	goto	l1371
  2109  04F0                     u840:
  2110  04F0                     l97:
  2111  04F0  0008               	return
  2112  04F1                     __end_of_Lcd_Write_String:
  2113                           
  2114                           	psect	text8
  2115  03A3                     __ptext8:	
  2116 ;; *************** function _Lcd_Write_Char *****************
  2117 ;; Defined at:
  2118 ;;		line 80 in file "./lcd.h"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  a               1    wreg     unsigned char 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  a               1    6[COMMON] unsigned char 
  2123 ;;  y               1    5[COMMON] unsigned char 
  2124 ;;  temp            1    4[COMMON] unsigned char 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, status,0, pclath, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2134 ;;      Params:         0       0       0       0       0
  2135 ;;      Locals:         3       0       0       0       0
  2136 ;;      Temps:          1       0       0       0       0
  2137 ;;      Totals:         4       0       0       0       0
  2138 ;;Total ram usage:        4 bytes
  2139 ;; Hardware stack levels used: 1
  2140 ;; Hardware stack levels required when called: 3
  2141 ;; This function calls:
  2142 ;;		_Lcd_Port
  2143 ;; This function is called by:
  2144 ;;		_Lcd_Write_String
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148  03A3                     _Lcd_Write_Char:	
  2149                           ;psect for function _Lcd_Write_Char
  2150                           
  2151                           
  2152                           ;incstack = 0
  2153                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2154                           ;Lcd_Write_Char@a stored from wreg
  2155  03A3  00F6               	movwf	Lcd_Write_Char@a
  2156  03A4                     l1255:
  2157                           
  2158                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2159  03A4  0876               	movf	Lcd_Write_Char@a,w
  2160  03A5  390F               	andlw	15
  2161  03A6  00F3               	movwf	??_Lcd_Write_Char
  2162  03A7  0873               	movf	??_Lcd_Write_Char,w
  2163  03A8  00F4               	movwf	Lcd_Write_Char@temp
  2164                           
  2165                           ;./lcd.h: 84:    y = a&0xF0;
  2166  03A9  0876               	movf	Lcd_Write_Char@a,w
  2167  03AA  39F0               	andlw	240
  2168  03AB  00F3               	movwf	??_Lcd_Write_Char
  2169  03AC  0873               	movf	??_Lcd_Write_Char,w
  2170  03AD  00F5               	movwf	Lcd_Write_Char@y
  2171  03AE                     l1257:
  2172                           
  2173                           ;./lcd.h: 85:    RD2 = 1;
  2174  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2175  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2176  03B0  1508               	bsf	8,2	;volatile
  2177  03B1                     l1259:
  2178                           
  2179                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2180  03B1  0875               	movf	Lcd_Write_Char@y,w
  2181  03B2  00F3               	movwf	??_Lcd_Write_Char
  2182  03B3  3004               	movlw	4
  2183  03B4                     u605:
  2184  03B4  1003               	clrc
  2185  03B5  0CF3               	rrf	??_Lcd_Write_Char,f
  2186  03B6  3EFF               	addlw	-1
  2187  03B7  1D03               	skipz
  2188  03B8  2BB4               	goto	u605
  2189  03B9  0873               	movf	??_Lcd_Write_Char,w
  2190  03BA  120A  118A  24AE  120A  118A  	fcall	_Lcd_Port
  2191  03BF                     l1261:
  2192                           
  2193                           ;./lcd.h: 87:    RD3 = 1;
  2194  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2195  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2196  03C1  1588               	bsf	8,3	;volatile
  2197  03C2                     l1263:
  2198                           
  2199                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2200  03C2  3042               	movlw	66
  2201  03C3  00F3               	movwf	??_Lcd_Write_Char
  2202  03C4                     u1407:
  2203  03C4  0BF3               	decfsz	??_Lcd_Write_Char,f
  2204  03C5  2BC4               	goto	u1407
  2205  03C6  0000               	nop
  2206  03C7                     l1265:
  2207                           
  2208                           ;./lcd.h: 89:    RD3 = 0;
  2209  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2210  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2211  03C9  1188               	bcf	8,3	;volatile
  2212  03CA                     l1267:
  2213                           
  2214                           ;./lcd.h: 90:    Lcd_Port(temp);
  2215  03CA  0874               	movf	Lcd_Write_Char@temp,w
  2216  03CB  120A  118A  24AE  120A  118A  	fcall	_Lcd_Port
  2217  03D0                     l1269:
  2218                           
  2219                           ;./lcd.h: 91:    RD3 = 1;
  2220  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2221  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2222  03D2  1588               	bsf	8,3	;volatile
  2223  03D3                     l1271:
  2224                           
  2225                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2226  03D3  3042               	movlw	66
  2227  03D4  00F3               	movwf	??_Lcd_Write_Char
  2228  03D5                     u1417:
  2229  03D5  0BF3               	decfsz	??_Lcd_Write_Char,f
  2230  03D6  2BD5               	goto	u1417
  2231  03D7  0000               	nop
  2232  03D8                     l1273:
  2233                           
  2234                           ;./lcd.h: 93:    RD3 = 0;
  2235  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2236  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2237  03DA  1188               	bcf	8,3	;volatile
  2238  03DB                     l91:
  2239  03DB  0008               	return
  2240  03DC                     __end_of_Lcd_Write_Char:
  2241                           
  2242                           	psect	text9
  2243  02CB                     __ptext9:	
  2244 ;; *************** function _Lcd_Set_Cursor *****************
  2245 ;; Defined at:
  2246 ;;		line 40 in file "./lcd.h"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  a               1    wreg     unsigned char 
  2249 ;;  b               1    6[COMMON] unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  a               1    0[BANK0 ] unsigned char 
  2252 ;;  temp            1    3[BANK0 ] unsigned char 
  2253 ;;  y               1    2[BANK0 ] unsigned char 
  2254 ;;  z               1    1[BANK0 ] unsigned char 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0, pclath, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2264 ;;      Params:         1       0       0       0       0
  2265 ;;      Locals:         0       4       0       0       0
  2266 ;;      Temps:          2       0       0       0       0
  2267 ;;      Totals:         3       4       0       0       0
  2268 ;;Total ram usage:        7 bytes
  2269 ;; Hardware stack levels used: 1
  2270 ;; Hardware stack levels required when called: 4
  2271 ;; This function calls:
  2272 ;;		_Lcd_Cmd
  2273 ;; This function is called by:
  2274 ;;		_setCronometro
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278  02CB                     _Lcd_Set_Cursor:	
  2279                           ;psect for function _Lcd_Set_Cursor
  2280                           
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2284                           ;Lcd_Set_Cursor@a stored from wreg
  2285  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2286  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2287  02CD  00A0               	movwf	Lcd_Set_Cursor@a
  2288  02CE                     l1349:
  2289                           
  2290                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2291  02CE  0320               	decf	Lcd_Set_Cursor@a,w
  2292  02CF  1D03               	btfss	3,2
  2293  02D0  2AD2               	goto	u801
  2294  02D1  2AD3               	goto	u800
  2295  02D2                     u801:
  2296  02D2  2AF8               	goto	l1359
  2297  02D3                     u800:
  2298  02D3                     l1351:
  2299                           
  2300                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2301  02D3  0876               	movf	Lcd_Set_Cursor@b,w
  2302  02D4  3E7F               	addlw	127
  2303  02D5  00F7               	movwf	??_Lcd_Set_Cursor
  2304  02D6  0877               	movf	??_Lcd_Set_Cursor,w
  2305  02D7  00A3               	movwf	Lcd_Set_Cursor@temp
  2306                           
  2307                           ;./lcd.h: 46:   z = temp>>4;
  2308  02D8  0823               	movf	Lcd_Set_Cursor@temp,w
  2309  02D9  00F7               	movwf	??_Lcd_Set_Cursor
  2310  02DA  3004               	movlw	4
  2311  02DB                     u815:
  2312  02DB  1003               	clrc
  2313  02DC  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2314  02DD  3EFF               	addlw	-1
  2315  02DE  1D03               	skipz
  2316  02DF  2ADB               	goto	u815
  2317  02E0  0877               	movf	??_Lcd_Set_Cursor,w
  2318  02E1  00F8               	movwf	??_Lcd_Set_Cursor+1
  2319  02E2  0878               	movf	??_Lcd_Set_Cursor+1,w
  2320  02E3  00A1               	movwf	Lcd_Set_Cursor@z
  2321  02E4                     l1353:
  2322                           
  2323                           ;./lcd.h: 47:   y = temp & 0x0F;
  2324  02E4  0823               	movf	Lcd_Set_Cursor@temp,w
  2325  02E5  390F               	andlw	15
  2326  02E6  00F7               	movwf	??_Lcd_Set_Cursor
  2327  02E7  0877               	movf	??_Lcd_Set_Cursor,w
  2328  02E8  00A2               	movwf	Lcd_Set_Cursor@y
  2329  02E9                     l1355:
  2330                           
  2331                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2332  02E9  0821               	movf	Lcd_Set_Cursor@z,w
  2333  02EA  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2334  02EF                     l1357:
  2335                           
  2336                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2337  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2338  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2339  02F1  0822               	movf	Lcd_Set_Cursor@y,w
  2340  02F2  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2341                           
  2342                           ;./lcd.h: 50:  }
  2343  02F7  2B22               	goto	l85
  2344  02F8                     l1359:
  2345  02F8  3002               	movlw	2
  2346  02F9  0620               	xorwf	Lcd_Set_Cursor@a,w
  2347  02FA  1D03               	btfss	3,2
  2348  02FB  2AFD               	goto	u821
  2349  02FC  2AFE               	goto	u820
  2350  02FD                     u821:
  2351  02FD  2B22               	goto	l85
  2352  02FE                     u820:
  2353  02FE                     l1361:
  2354                           
  2355                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2356  02FE  0876               	movf	Lcd_Set_Cursor@b,w
  2357  02FF  3EBF               	addlw	191
  2358  0300  00F7               	movwf	??_Lcd_Set_Cursor
  2359  0301  0877               	movf	??_Lcd_Set_Cursor,w
  2360  0302  00A3               	movwf	Lcd_Set_Cursor@temp
  2361                           
  2362                           ;./lcd.h: 54:   z = temp>>4;
  2363  0303  0823               	movf	Lcd_Set_Cursor@temp,w
  2364  0304  00F7               	movwf	??_Lcd_Set_Cursor
  2365  0305  3004               	movlw	4
  2366  0306                     u835:
  2367  0306  1003               	clrc
  2368  0307  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2369  0308  3EFF               	addlw	-1
  2370  0309  1D03               	skipz
  2371  030A  2B06               	goto	u835
  2372  030B  0877               	movf	??_Lcd_Set_Cursor,w
  2373  030C  00F8               	movwf	??_Lcd_Set_Cursor+1
  2374  030D  0878               	movf	??_Lcd_Set_Cursor+1,w
  2375  030E  00A1               	movwf	Lcd_Set_Cursor@z
  2376  030F                     l1363:
  2377                           
  2378                           ;./lcd.h: 55:   y = temp & 0x0F;
  2379  030F  0823               	movf	Lcd_Set_Cursor@temp,w
  2380  0310  390F               	andlw	15
  2381  0311  00F7               	movwf	??_Lcd_Set_Cursor
  2382  0312  0877               	movf	??_Lcd_Set_Cursor,w
  2383  0313  00A2               	movwf	Lcd_Set_Cursor@y
  2384  0314                     l1365:
  2385                           
  2386                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2387  0314  0821               	movf	Lcd_Set_Cursor@z,w
  2388  0315  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2389  031A                     l1367:
  2390                           
  2391                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2392  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2393  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2394  031C  0822               	movf	Lcd_Set_Cursor@y,w
  2395  031D  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2396  0322                     l85:
  2397  0322  0008               	return
  2398  0323                     __end_of_Lcd_Set_Cursor:
  2399                           
  2400                           	psect	text10
  2401  026D                     __ptext10:	
  2402 ;; *************** function _Lcd_Init *****************
  2403 ;; Defined at:
  2404 ;;		line 61 in file "./lcd.h"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0, pclath, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2418 ;;      Params:         0       0       0       0       0
  2419 ;;      Locals:         0       0       0       0       0
  2420 ;;      Temps:          2       0       0       0       0
  2421 ;;      Totals:         2       0       0       0       0
  2422 ;;Total ram usage:        2 bytes
  2423 ;; Hardware stack levels used: 1
  2424 ;; Hardware stack levels required when called: 4
  2425 ;; This function calls:
  2426 ;;		_Lcd_Cmd
  2427 ;;		_Lcd_Port
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433  026D                     _Lcd_Init:	
  2434                           ;psect for function _Lcd_Init
  2435                           
  2436  026D                     l1497:	
  2437                           ;incstack = 0
  2438                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2439                           
  2440                           
  2441                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2442  026D  3000               	movlw	0
  2443  026E  120A  118A  24AE  120A  118A  	fcall	_Lcd_Port
  2444  0273                     l1499:
  2445                           
  2446                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2447  0273  3082               	movlw	130
  2448  0274  00F7               	movwf	??_Lcd_Init+1
  2449  0275  30DD               	movlw	221
  2450  0276  00F6               	movwf	??_Lcd_Init
  2451  0277                     u1427:
  2452  0277  0BF6               	decfsz	??_Lcd_Init,f
  2453  0278  2A77               	goto	u1427
  2454  0279  0BF7               	decfsz	??_Lcd_Init+1,f
  2455  027A  2A77               	goto	u1427
  2456  027B  2A7C               	nop2
  2457  027C                     l1501:
  2458                           
  2459                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2460  027C  3003               	movlw	3
  2461  027D  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2462                           
  2463                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2464  0282  3021               	movlw	33
  2465  0283  00F7               	movwf	??_Lcd_Init+1
  2466  0284  3076               	movlw	118
  2467  0285  00F6               	movwf	??_Lcd_Init
  2468  0286                     u1437:
  2469  0286  0BF6               	decfsz	??_Lcd_Init,f
  2470  0287  2A86               	goto	u1437
  2471  0288  0BF7               	decfsz	??_Lcd_Init+1,f
  2472  0289  2A86               	goto	u1437
  2473  028A  0000               	nop
  2474  028B                     l1503:
  2475                           
  2476                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2477  028B  3003               	movlw	3
  2478  028C  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2479  0291                     l1505:
  2480                           
  2481                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2482  0291  3048               	movlw	72
  2483  0292  00F7               	movwf	??_Lcd_Init+1
  2484  0293  306C               	movlw	108
  2485  0294  00F6               	movwf	??_Lcd_Init
  2486  0295                     u1447:
  2487  0295  0BF6               	decfsz	??_Lcd_Init,f
  2488  0296  2A95               	goto	u1447
  2489  0297  0BF7               	decfsz	??_Lcd_Init+1,f
  2490  0298  2A95               	goto	u1447
  2491  0299  0000               	nop
  2492                           
  2493                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2494  029A  3003               	movlw	3
  2495  029B  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2496                           
  2497                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2498  02A0  3002               	movlw	2
  2499  02A1  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2500                           
  2501                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2502  02A6  3002               	movlw	2
  2503  02A7  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2504                           
  2505                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2506  02AC  3008               	movlw	8
  2507  02AD  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2508                           
  2509                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2510  02B2  3000               	movlw	0
  2511  02B3  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2512                           
  2513                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2514  02B8  300C               	movlw	12
  2515  02B9  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2516                           
  2517                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2518  02BE  3000               	movlw	0
  2519  02BF  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2520                           
  2521                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2522  02C4  3006               	movlw	6
  2523  02C5  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2524  02CA                     l88:
  2525  02CA  0008               	return
  2526  02CB                     __end_of_Lcd_Init:
  2527                           
  2528                           	psect	text11
  2529  051D                     __ptext11:	
  2530 ;; *************** function _Lcd_Clear *****************
  2531 ;; Defined at:
  2532 ;;		line 34 in file "./lcd.h"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;		None
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  2   78[None  ] int 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0, pclath, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         0       0       0       0       0
  2547 ;;      Locals:         0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0
  2549 ;;      Totals:         0       0       0       0       0
  2550 ;;Total ram usage:        0 bytes
  2551 ;; Hardware stack levels used: 1
  2552 ;; Hardware stack levels required when called: 4
  2553 ;; This function calls:
  2554 ;;		_Lcd_Cmd
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560  051D                     _Lcd_Clear:	
  2561                           ;psect for function _Lcd_Clear
  2562                           
  2563  051D                     l1495:	
  2564                           ;incstack = 0
  2565                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2566                           
  2567                           
  2568                           ;./lcd.h: 36:  Lcd_Cmd(0);
  2569  051D  3000               	movlw	0
  2570  051E  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2571                           
  2572                           ;./lcd.h: 37:  Lcd_Cmd(1);
  2573  0523  3001               	movlw	1
  2574  0524  120A  118A  24F1  120A  118A  	fcall	_Lcd_Cmd
  2575  0529                     l79:
  2576  0529  0008               	return
  2577  052A                     __end_of_Lcd_Clear:
  2578                           
  2579                           	psect	text12
  2580  04F1                     __ptext12:	
  2581 ;; *************** function _Lcd_Cmd *****************
  2582 ;; Defined at:
  2583 ;;		line 25 in file "./lcd.h"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  a               1    wreg     unsigned char 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  a               1    5[COMMON] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2597 ;;      Params:         0       0       0       0       0
  2598 ;;      Locals:         1       0       0       0       0
  2599 ;;      Temps:          2       0       0       0       0
  2600 ;;      Totals:         3       0       0       0       0
  2601 ;;Total ram usage:        3 bytes
  2602 ;; Hardware stack levels used: 1
  2603 ;; Hardware stack levels required when called: 3
  2604 ;; This function calls:
  2605 ;;		_Lcd_Port
  2606 ;; This function is called by:
  2607 ;;		_Lcd_Clear
  2608 ;;		_Lcd_Set_Cursor
  2609 ;;		_Lcd_Init
  2610 ;;		_Lcd_Shift_Right
  2611 ;;		_Lcd_Shift_Left
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615  04F1                     _Lcd_Cmd:	
  2616                           ;psect for function _Lcd_Cmd
  2617                           
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2621                           ;Lcd_Cmd@a stored from wreg
  2622  04F1  00F5               	movwf	Lcd_Cmd@a
  2623  04F2                     l1245:
  2624                           
  2625                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2626  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  2627  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  2628  04F4  1108               	bcf	8,2	;volatile
  2629  04F5                     l1247:
  2630                           
  2631                           ;./lcd.h: 28:  Lcd_Port(a);
  2632  04F5  0875               	movf	Lcd_Cmd@a,w
  2633  04F6  120A  118A  24AE  120A  118A  	fcall	_Lcd_Port
  2634  04FB                     l1249:
  2635                           
  2636                           ;./lcd.h: 29:  RD3 = 1;
  2637  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2638  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2639  04FD  1588               	bsf	8,3	;volatile
  2640  04FE                     l1251:
  2641                           
  2642                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2643  04FE  301A               	movlw	26
  2644  04FF  00F4               	movwf	??_Lcd_Cmd+1
  2645  0500  30F8               	movlw	248
  2646  0501  00F3               	movwf	??_Lcd_Cmd
  2647  0502                     u1457:
  2648  0502  0BF3               	decfsz	??_Lcd_Cmd,f
  2649  0503  2D02               	goto	u1457
  2650  0504  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2651  0505  2D02               	goto	u1457
  2652  0506  0000               	nop
  2653  0507                     l1253:
  2654                           
  2655                           ;./lcd.h: 31:         RD3 = 0;
  2656  0507  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0508  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0509  1188               	bcf	8,3	;volatile
  2659  050A                     l76:
  2660  050A  0008               	return
  2661  050B                     __end_of_Lcd_Cmd:
  2662                           
  2663                           	psect	text13
  2664  04AE                     __ptext13:	
  2665 ;; *************** function _Lcd_Port *****************
  2666 ;; Defined at:
  2667 ;;		line 3 in file "./lcd.h"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  a               1    wreg     unsigned char 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  a               1    2[COMMON] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         1       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0
  2684 ;;      Totals:         1       0       0       0       0
  2685 ;;Total ram usage:        1 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 2
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_Lcd_Cmd
  2692 ;;		_Lcd_Init
  2693 ;;		_Lcd_Write_Char
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697  04AE                     _Lcd_Port:	
  2698                           ;psect for function _Lcd_Port
  2699                           
  2700                           
  2701                           ;incstack = 0
  2702                           ; Regs used in _Lcd_Port: [wreg]
  2703                           ;Lcd_Port@a stored from wreg
  2704  04AE  00F2               	movwf	Lcd_Port@a
  2705  04AF                     l1235:
  2706                           
  2707                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2708  04AF  1C72               	btfss	Lcd_Port@a,0
  2709  04B0  2CB2               	goto	u561
  2710  04B1  2CB3               	goto	u560
  2711  04B2                     u561:
  2712  04B2  2CB7               	goto	l65
  2713  04B3                     u560:
  2714  04B3                     l1237:
  2715                           
  2716                           ;./lcd.h: 6:   RD4 = 1;
  2717  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  2718  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  2719  04B5  1608               	bsf	8,4	;volatile
  2720  04B6  2CBA               	goto	l66
  2721  04B7                     l65:	
  2722                           ;./lcd.h: 7:  else
  2723                           
  2724                           
  2725                           ;./lcd.h: 8:   RD4 = 0;
  2726  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2727  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2728  04B9  1208               	bcf	8,4	;volatile
  2729  04BA                     l66:
  2730                           
  2731                           ;./lcd.h: 10:  if(a & 2)
  2732  04BA  1CF2               	btfss	Lcd_Port@a,1
  2733  04BB  2CBD               	goto	u571
  2734  04BC  2CBE               	goto	u570
  2735  04BD                     u571:
  2736  04BD  2CC0               	goto	l67
  2737  04BE                     u570:
  2738  04BE                     l1239:
  2739                           
  2740                           ;./lcd.h: 11:   RD5 = 1;
  2741  04BE  1688               	bsf	8,5	;volatile
  2742  04BF  2CC1               	goto	l68
  2743  04C0                     l67:	
  2744                           ;./lcd.h: 12:  else
  2745                           
  2746                           
  2747                           ;./lcd.h: 13:   RD5 = 0;
  2748  04C0  1288               	bcf	8,5	;volatile
  2749  04C1                     l68:
  2750                           
  2751                           ;./lcd.h: 15:  if(a & 4)
  2752  04C1  1D72               	btfss	Lcd_Port@a,2
  2753  04C2  2CC4               	goto	u581
  2754  04C3  2CC5               	goto	u580
  2755  04C4                     u581:
  2756  04C4  2CC7               	goto	l69
  2757  04C5                     u580:
  2758  04C5                     l1241:
  2759                           
  2760                           ;./lcd.h: 16:   RD6 = 1;
  2761  04C5  1708               	bsf	8,6	;volatile
  2762  04C6  2CC8               	goto	l70
  2763  04C7                     l69:	
  2764                           ;./lcd.h: 17:  else
  2765                           
  2766                           
  2767                           ;./lcd.h: 18:   RD6 = 0;
  2768  04C7  1308               	bcf	8,6	;volatile
  2769  04C8                     l70:
  2770                           
  2771                           ;./lcd.h: 20:  if(a & 8)
  2772  04C8  1DF2               	btfss	Lcd_Port@a,3
  2773  04C9  2CCB               	goto	u591
  2774  04CA  2CCC               	goto	u590
  2775  04CB                     u591:
  2776  04CB  2CCE               	goto	l71
  2777  04CC                     u590:
  2778  04CC                     l1243:
  2779                           
  2780                           ;./lcd.h: 21:   RD7 = 1;
  2781  04CC  1788               	bsf	8,7	;volatile
  2782  04CD  2CCF               	goto	l73
  2783  04CE                     l71:	
  2784                           ;./lcd.h: 22:  else
  2785                           
  2786                           
  2787                           ;./lcd.h: 23:   RD7 = 0;
  2788  04CE  1388               	bcf	8,7	;volatile
  2789  04CF                     l73:
  2790  04CF  0008               	return
  2791  04D0                     __end_of_Lcd_Port:
  2792                           
  2793                           	psect	text14
  2794  040C                     __ptext14:	
  2795 ;; *************** function _ContaSegundos *****************
  2796 ;; Defined at:
  2797 ;;		line 141 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0, pclath, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0
  2813 ;;      Temps:          2       0       0       0       0
  2814 ;;      Totals:         2       0       0       0       0
  2815 ;;Total ram usage:        2 bytes
  2816 ;; Hardware stack levels used: 1
  2817 ;; Hardware stack levels required when called: 1
  2818 ;; This function calls:
  2819 ;;		_cronometro
  2820 ;; This function is called by:
  2821 ;;		Interrupt level 1
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825  040C                     _ContaSegundos:	
  2826                           ;psect for function _ContaSegundos
  2827                           
  2828  040C                     i1l1619:
  2829                           
  2830                           ;main.c: 143:     if(TMR1IF)
  2831  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2832  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2833  040E  1C0C               	btfss	12,0	;volatile
  2834  040F  2C11               	goto	u109_21
  2835  0410  2C12               	goto	u109_20
  2836  0411                     u109_21:
  2837  0411  2C34               	goto	i1l138
  2838  0412                     u109_20:
  2839  0412                     i1l1621:
  2840                           
  2841                           ;main.c: 144:     {;main.c: 145:         PIR1bits.TMR1IF = 0;
  2842  0412  100C               	bcf	12,0	;volatile
  2843  0413                     i1l1623:
  2844                           
  2845                           ;main.c: 146:         TMR1L = 0x95;
  2846  0413  3095               	movlw	149
  2847  0414  008E               	movwf	14	;volatile
  2848                           
  2849                           ;main.c: 147:         TMR1H = 0xE7;
  2850  0415  30E7               	movlw	231
  2851  0416  008F               	movwf	15	;volatile
  2852  0417                     i1l1625:
  2853                           
  2854                           ;main.c: 150:         cronometro();
  2855  0417  120A  118A  23DC  120A  118A  	fcall	_cronometro
  2856  041C                     i1l1627:
  2857                           
  2858                           ;main.c: 152:         contador++;
  2859  041C  3001               	movlw	1
  2860  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2861  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2862  041F  07BE               	addwf	_contador,f
  2863  0420  1803               	skipnc
  2864  0421  0ABF               	incf	_contador+1,f
  2865  0422  3000               	movlw	0
  2866  0423  07BF               	addwf	_contador+1,f
  2867  0424                     i1l1629:
  2868                           
  2869                           ;main.c: 153:         if(contador == 100)
  2870  0424  3064               	movlw	100
  2871  0425  063E               	xorwf	_contador,w
  2872  0426  043F               	iorwf	_contador+1,w
  2873  0427  1D03               	btfss	3,2
  2874  0428  2C2A               	goto	u110_21
  2875  0429  2C2B               	goto	u110_20
  2876  042A                     u110_21:
  2877  042A  2C34               	goto	i1l138
  2878  042B                     u110_20:
  2879  042B                     i1l1631:
  2880                           
  2881                           ;main.c: 154:         {;main.c: 155:             cronometro();
  2882  042B  120A  118A  23DC  120A  118A  	fcall	_cronometro
  2883  0430                     i1l1633:
  2884                           
  2885                           ;main.c: 156:             contador = 0;
  2886  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0432  01BE               	clrf	_contador
  2889  0433  01BF               	clrf	_contador+1
  2890  0434                     i1l138:
  2891  0434  0871               	movf	??_ContaSegundos+1,w
  2892  0435  008A               	movwf	10
  2893  0436  0E70               	swapf	??_ContaSegundos,w
  2894  0437  0083               	movwf	3
  2895  0438  0EFE               	swapf	btemp,f
  2896  0439  0E7E               	swapf	btemp,w
  2897  043A  0009               	retfie
  2898  043B                     __end_of_ContaSegundos:
  2899                           
  2900                           	psect	intentry
  2901  0004                     __pintentry:	
  2902                           ;incstack = 0
  2903                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  2904                           
  2905  0004                     interrupt_function:
  2906  007E                     saved_w	set	btemp
  2907  0004  00FE               	movwf	btemp
  2908  0005  0E03               	swapf	3,w
  2909  0006  00F0               	movwf	??_ContaSegundos
  2910  0007  080A               	movf	10,w
  2911  0008  00F1               	movwf	??_ContaSegundos+1
  2912  0009  120A  118A  2C0C   	ljmp	_ContaSegundos
  2913                           
  2914                           	psect	text15
  2915  03DC                     __ptext15:	
  2916 ;; *************** function _cronometro *****************
  2917 ;; Defined at:
  2918 ;;		line 168 in file "main.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;		None
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, status,2, status,0
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2932 ;;      Params:         0       0       0       0       0
  2933 ;;      Locals:         0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0
  2935 ;;      Totals:         0       0       0       0       0
  2936 ;;Total ram usage:        0 bytes
  2937 ;; Hardware stack levels used: 1
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_ContaSegundos
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945  03DC                     _cronometro:	
  2946                           ;psect for function _cronometro
  2947                           
  2948  03DC                     i1l1513:	
  2949                           ;incstack = 0
  2950                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  2951                           
  2952                           
  2953                           ;main.c: 170:     centesimos++;
  2954  03DC  3001               	movlw	1
  2955  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2956  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2957  03DF  07C0               	addwf	_centesimos,f
  2958  03E0  1803               	skipnc
  2959  03E1  0AC1               	incf	_centesimos+1,f
  2960  03E2  3000               	movlw	0
  2961  03E3  07C1               	addwf	_centesimos+1,f
  2962  03E4                     i1l1515:
  2963                           
  2964                           ;main.c: 172:     if(centesimos == 100)
  2965  03E4  3064               	movlw	100
  2966  03E5  0640               	xorwf	_centesimos,w
  2967  03E6  0441               	iorwf	_centesimos+1,w
  2968  03E7  1D03               	btfss	3,2
  2969  03E8  2BEA               	goto	u103_21
  2970  03E9  2BEB               	goto	u103_20
  2971  03EA                     u103_21:
  2972  03EA  2C0B               	goto	i1l147
  2973  03EB                     u103_20:
  2974  03EB                     i1l1517:
  2975                           
  2976                           ;main.c: 173:     {;main.c: 174:         centesimos = 0;
  2977  03EB  01C0               	clrf	_centesimos
  2978  03EC  01C1               	clrf	_centesimos+1
  2979  03ED                     i1l1519:
  2980                           
  2981                           ;main.c: 175:         segundos++;
  2982  03ED  3001               	movlw	1
  2983  03EE  07C2               	addwf	_segundos,f
  2984  03EF  1803               	skipnc
  2985  03F0  0AC3               	incf	_segundos+1,f
  2986  03F1  3000               	movlw	0
  2987  03F2  07C3               	addwf	_segundos+1,f
  2988  03F3                     i1l1521:
  2989                           
  2990                           ;main.c: 177:         if(segundos == 60)
  2991  03F3  303C               	movlw	60
  2992  03F4  0642               	xorwf	_segundos,w
  2993  03F5  0443               	iorwf	_segundos+1,w
  2994  03F6  1D03               	btfss	3,2
  2995  03F7  2BF9               	goto	u104_21
  2996  03F8  2BFA               	goto	u104_20
  2997  03F9                     u104_21:
  2998  03F9  2C0B               	goto	i1l147
  2999  03FA                     u104_20:
  3000  03FA                     i1l1523:
  3001                           
  3002                           ;main.c: 178:         {;main.c: 179:            segundos = 0;
  3003  03FA  01C2               	clrf	_segundos
  3004  03FB  01C3               	clrf	_segundos+1
  3005  03FC                     i1l1525:
  3006                           
  3007                           ;main.c: 180:            minutos++;
  3008  03FC  3001               	movlw	1
  3009  03FD  07C4               	addwf	_minutos,f
  3010  03FE  1803               	skipnc
  3011  03FF  0AC5               	incf	_minutos+1,f
  3012  0400  3000               	movlw	0
  3013  0401  07C5               	addwf	_minutos+1,f
  3014  0402                     i1l1527:
  3015                           
  3016                           ;main.c: 182:            if(minutos == 60) minutos = 0;
  3017  0402  303C               	movlw	60
  3018  0403  0644               	xorwf	_minutos,w
  3019  0404  0445               	iorwf	_minutos+1,w
  3020  0405  1D03               	btfss	3,2
  3021  0406  2C08               	goto	u105_21
  3022  0407  2C09               	goto	u105_20
  3023  0408                     u105_21:
  3024  0408  2C0B               	goto	i1l147
  3025  0409                     u105_20:
  3026  0409                     i1l1529:
  3027  0409  01C4               	clrf	_minutos
  3028  040A  01C5               	clrf	_minutos+1
  3029  040B                     i1l147:
  3030  040B  0008               	return
  3031  040C                     __end_of_cronometro:
  3032  007E                     btemp	set	126	;btemp
  3033  007E                     wtemp0	set	126
  3034                           
  3035                           	psect	config
  3036                           
  3037                           ;Config register CONFIG @ 0x2007
  3038                           ;	Oscillator Selection bits
  3039                           ;	FOSC = HS, HS oscillator
  3040                           ;	Watchdog Timer Enable bit
  3041                           ;	WDTE = ON, WDT enabled
  3042                           ;	Power-up Timer Enable bit
  3043                           ;	PWRTE = ON, PWRT enabled
  3044                           ;	Brown-out Reset Enable bit
  3045                           ;	BOREN = ON, BOR enabled
  3046                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3047                           ;	LVP = 0x1, unprogrammed default
  3048                           ;	Data EEPROM Memory Code Protection bit
  3049                           ;	CPD = 0x1, unprogrammed default
  3050                           ;	Flash Program Memory Write Enable bits
  3051                           ;	WRT = 0x3, unprogrammed default
  3052                           ;	In-Circuit Debugger Mode bit
  3053                           ;	DEBUG = 0x1, unprogrammed default
  3054                           ;	Flash Program Memory Code Protection bit
  3055                           ;	CP = 0x1, unprogrammed default
  3056  2007                     	org	8199
  3057  2007  3FF6               	dw	16374

Data Sizes:
    Strings     23
    Constant    10
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     28      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _setCronometro->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3553
                                             25 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                      _setCronometro
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3245
                                             24 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2488
                                              5 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     301
                                              7 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     456
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      30       5       60.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3C      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Mar 08 01:15:25 2022

                       pc 0002                        l70 04C8                        l71 04CE  
                      l73 04CF                        l65 04B7                        l66 04BA  
                      l67 04C0                        l91 03DB                        l68 04C1  
                      l76 050A                        l69 04C7                        l85 0322  
                      l79 0529                        l88 02CA                        l97 04F0  
                      fsr 0004       ___wmul@multiplicand 0074                       l124 0224  
                     l141 0488                       l127 0268                       l245 003B  
                     l263 0115                       l280 01F0                       l284 0495  
                     l286 04AD                       l556 0366                       l566 03A2  
                     l737 051C                       _RB0 0030                       _RB1 0031  
                     _RC0 0038                       _RC2 003A                       _RC3 003B  
                     _RD2 0042                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u610 0513                       u611 0512                       u620 0519  
                     u605 03B4                       u621 0518                       u710 034E  
                     u630 048F                       u711 034D                       u631 048E  
                     u560 04B3                       u800 02D3                       u561 04B2  
                     u801 02D2                       u705 033E                       u570 04BE  
                     u730 0362                       u571 04BD                       u731 0361  
                     u715 034A                       u580 04C5                       u820 02FE  
                     u660 04A9                       u581 04C4                       u821 02FD  
                     u725 0356                       u661 04A8                       u645 0496  
                     u590 04CC                       u670 032B                       u591 04CB  
                     u815 02DB                       u671 032A                       u655 049D  
                     u840 04F0                       u841 04EF                       u690 033D  
                     u835 0306                       u691 033C                       u685 032F  
                     fsr0 0004                       indf 0000                      l1301 0323  
                    l1311 0339                      l1303 0325                      l1241 04C5  
                    l1321 035C                      l1313 033D                      l1305 032B  
                    l1243 04CC                      l1235 04AF                      l1251 04FE  
                    l1315 034E                      l1307 032E                      l1323 0362  
                    l1237 04B3                      l1253 0507                      l1245 04F2  
                    l1501 027C                      l1261 03BF                      l1317 0354  
                    l1309 0335                      l1239 04BE                      l1247 04F5  
                    l1503 028B                      l1351 02D3                      l1271 03D3  
                    l1263 03C2                      l1255 03A4                      l1319 0355  
                    l1249 04FB                      l1505 0291                      l1361 02FE  
                    l1353 02E4                      l1273 03D8                      l1265 03C7  
                    l1257 03AE                      l1281 0519                      l1363 030F  
                    l1355 02E9                      l1267 03CA                      l1259 03B1  
                    l1371 04D4                      l1291 048F                      l1283 051B  
                    l1275 050C                      l1365 0314                      l1357 02EF  
                    l1349 02CE                      l1269 03D0                      l1373 04DF  
                    l1293 049C                      l1277 050D                      l1701 002B  
                    l1367 031A                      l1359 02F8                      l1375 04E5  
                    l1295 04A3                      l1287 0489                      l1279 0513  
                    l1711 0040                      l1703 0032                      l1369 04D1  
                    l1297 04A9                      l1289 048B                      l1721 008F  
                    l1713 0053                      l1705 0037                      l1801 01DA  
                    l1731 00CA                      l1803 01EC                      l1723 0093  
                    l1715 0063                      l1707 003C                      l1733 00CE  
                    l1717 0067                      l1901 0260                      l1821 01F1  
                    l1495 051D                      l1751 0103                      l1735 00D2  
                    l1719 007C                      l1727 00A3                      l1815 0462  
                    l1903 0266                      l1831 01F9                      l1823 01F5  
                    l1497 026D                      l1681 0379                      l1761 0130  
                    l1753 0109                      l1745 00DD                      l1737 00D6  
                    l1729 00C2                      l1817 047A                      l1841 0204  
                    l1833 01FA                      l1825 01F6                      l1499 0273  
                    l1691 0398                      l1683 037D                      l1675 0367  
                    l1771 014B                      l1763 0134                      l1755 010F  
                    l1739 00DB                      l1819 0482                      l1851 020B  
                    l1843 0205                      l1835 01FB                      l1827 01F7  
                    l1685 0381                      l1677 036F                      l1693 039E  
                    l1781 0170                      l1773 0152                      l1765 013A  
                    l1757 0120                      l1749 00F9                      l1861 0216  
                    l1853 020E                      l1845 0208                      l1837 01FE  
                    l1829 01F8                      l1687 038B                      l1679 0372  
                    l1783 0174                      l1775 0156                      l1791 0191  
                    l1767 0141                      l1759 012C                      l1871 021F  
                    l1863 0217                      l1855 020F                      l1847 0209  
                    l1839 01FF                      l1689 0391                      l1793 0196  
                    l1785 0180                      l1769 0145                      l1777 0163  
                    l1945 004E                      l1697 0020                      l1881 023F  
                    l1873 0225                      l1865 0218                      l1857 0212  
                    l1849 020A                      l1795 01C6                      l1787 0186  
                    l1779 0169                      l1947 00B7                      l1699 0025  
                    l1891 024D                      l1875 022B                      l1883 0240  
                    l1867 0219                      l1859 0213                      l1797 01CD  
                    l1789 018D                      l1893 024E                      l1885 0244  
                    l1877 022E                      l1869 021A                      l1799 01D1  
                    l1895 024F                      l1887 0245                      l1879 023C  
                    l1897 0250                      l1889 024A                      l1899 0257  
                    STR_1 044B                      u1110 036F                      u1111 036E  
                    u1200 00D2                      u1201 00D1                      u1130 0381  
                    u1210 00F8                      u1131 0380                      u1211 00F7  
                    u1140 038B                      u1300 0169                      u1220 0103  
                    u1141 038A                      u1125 0373                      u1301 0168  
                    u1221 0102                      u1310 0180                      u1230 0109  
                    u1311 017F                      u1231 0108                      u1215 00F4  
                    u1160 039E                      u1320 0186                      u1240 010F  
                    u1161 039D                      u1145 0387                      u1321 0185  
                    u1241 010E                      u1330 01DA                      u1250 0120  
                    u1170 002B                      u1155 0392                      u1331 01D9  
                    u1251 011F                      u1171 002A                      u1340 01EC  
                    u1260 0134                      u1180 0063                      u1341 01EB  
                    u1261 0133                      u1181 0062                      u1270 013A  
                    u1190 00A3                      u1350 022B                      u1407 03C4  
                    u1271 0139                      u1255 011C                      u1191 00A2  
                    u1351 022A                      u1280 014B                      u1360 0244  
                    u1417 03D5                      u1281 014A                      u1361 0243  
                    u1290 0162                      u1370 0266                      u1427 0277  
                    u1291 0161                      u1371 0265                      u1437 0286  
                    u1447 0295                      u1457 0502                      u1387 0236  
                    u1397 0254         ?_Lcd_Write_String 0070                      _main 01F1  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 050B     __end_of_setCronometro 0489                     ?_main 0070  
         __end_of___lwdiv 0367                     i1l138 0434                     i1l147 040B  
         __end_of___lwmod 03A3                     _TMR1H 000F                     _TMR1L 000E  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
         __end_of_dpowers 044B           __end_of_isdigit 051D                     _valor 003C  
          __pbitbssCOMMON 03D8                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 01F1          __end_of_Lcd_Init 02CB  
        __end_of_Lcd_Port 04D0           __initialization 000F              __end_of_main 026D  
                  ??_main 0039                    _ADRESH 001E                    _ADRESL 009E  
                  u110_20 042B                    u110_21 042A                    u103_20 03EB  
                  u103_21 03EA                    u104_20 03FA                    u104_21 03F9  
                  i1l1521 03F3                    i1l1513 03DC                    i1l1523 03FA  
                  i1l1515 03E4                    i1l1525 03FC                    i1l1517 03EB  
                  i1l1621 0412                    i1l1527 0402                    i1l1519 03ED  
                  i1l1631 042B                    i1l1623 0413                    u105_20 0409  
                  i1l1529 0409                    u105_21 0408                    i1l1633 0430  
                  i1l1625 0417                    i1l1627 041C                    i1l1619 040C  
                  i1l1629 0424                    u109_20 0412                    u109_21 0411  
               ??_Lcd_Cmd 0073                    _TMR1IF 0060                    _TMR1ON 0080  
                  ___wmul 0489                 ??___lwdiv 0076                 ??___lwmod 007A  
                  _buffer 0046                 ??_isdigit 0072                    saved_w 007E  
               ??_sprintf 002C           Lcd_Set_Cursor@a 0020           Lcd_Set_Cursor@b 0076  
         Lcd_Set_Cursor@y 0022           Lcd_Set_Cursor@z 0021   __end_of__initialization 0019  
       __end_of_Lcd_Clear 052A            __pcstackCOMMON 0070            _Lcd_Set_Cursor 02CB  
          _OPTION_REGbits 0081                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
            sprintf@width 0034                __pbssBANK0 003C                __pmaintext 01F1  
   __end_of_ContaSegundos 043B                   ?___wmul 0072                _centesimos 0040  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 0323                ??_Lcd_Init 0076  
              ??_Lcd_Port 0072                __stringtab 043B            _Lcd_Write_Char 03A3  
                 _Lcd_Cmd 04F1                _cronometro 03DC                   ___lwdiv 0323  
                 ___lwmod 0367           ?_Lcd_Set_Cursor 0076                   __ptext1 0462  
                 __ptext2 001D                   __ptext3 050B                   __ptext4 0489  
                 __ptext5 0367                   __ptext6 0323                   __ptext7 04D0  
                 __ptext8 03A3                   __ptext9 02CB                 _T1CONbits 0010  
                 _dpowers 0441                   _isdigit 050B                   _inverte 03D8  
                 _minutos 0044                   _sprintf 001D                   clrloop0 052B  
  __end_of_Lcd_Write_Char 03DC      end_of_initialization 0019                 Lcd_Port@a 0072  
         ?_Lcd_Write_Char 0070                _startTimer 03D9         Lcd_Write_String@a 007A  
       Lcd_Write_String@i 0078               ?_cronometro 0070                 _Lcd_Clear 051D  
          __end_of___wmul 04AE          _Lcd_Write_String 04D0             _setCronometro 0462  
     start_initialization 000F                ?_Lcd_Clear 0070                  ??___wmul 0076  
         Lcd_Write_Char@a 0076           Lcd_Write_Char@y 0075            ?_setCronometro 0070  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0033               sprintf@prec 0030          ___lwdiv@dividend 0074  
        ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072                  ?___lwmod 0020  
               __pstrings 043B                  ?_isdigit 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0025         interrupt_function 0004            ___wmul@product 0076  
               clear_ram0 052A                  _PIE1bits 008C                  Lcd_Cmd@a 0075  
                _PIR1bits 000C               ??_Lcd_Clear 0076           ??_setCronometro 0038  
              _ADCON0bits 001F               __stringbase 0440                _ADCON1bits 009F  
       ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073                  _Lcd_Init 026D  
                _Lcd_Port 04AE  __end_of_Lcd_Write_String 04F1              ??_cronometro 0070  
           _ContaSegundos 040C        __end_of__stringtab 0441               _isdigit$829 0072  
              sprintf@val 0031           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
      __end_of_cronometro 040C                  __ptext10 026D                  __ptext11 051D  
                __ptext12 04F1                  __ptext13 04AE                  __ptext14 040C  
                __ptext15 03DC                  _contador 003E                  _segundos 0042  
          ?_ContaSegundos 0070                _INTCONbits 000B                  isdigit@c 0073  
      Lcd_Write_Char@temp 0074                  intlevel1 0000                 sprintf@ap 002F  
               sprintf@sp 0036          ___lwmod@dividend 0022                 stringcode 043B  
      Lcd_Set_Cursor@temp 0023                  sprintf@c 0037                  sprintf@f 0025  
         ___lwmod@divisor 0020           ___lwmod@counter 0024                  stringdir 043B  
                stringtab 043B           ??_ContaSegundos 0070  
