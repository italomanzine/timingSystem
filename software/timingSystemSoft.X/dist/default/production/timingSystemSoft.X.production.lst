

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 09 15:24:48 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F877A Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  010F                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186                           
   187                           	psect	strings
   188  0411                     __pstrings:
   189  0411                     stringtab:
   190  0411                     __stringtab:
   191  0411                     stringcode:	
   192                           ;	String table - string pointers are 1 byte each
   193                           
   194  0411                     stringdir:
   195  0411  3004               	movlw	high stringdir
   196  0412  008A               	movwf	10
   197  0413  0804               	movf	4,w
   198  0414  0A84               	incf	4,f
   199  0415  0782               	addwf	2,f
   200  0416                     __stringbase:
   201  0416  3400               	retlw	0
   202  0417                     __end_of__stringtab:
   203  0417                     _dpowers:
   204  0417  3401               	retlw	1
   205  0418  3400               	retlw	0
   206  0419  340A               	retlw	10
   207  041A  3400               	retlw	0
   208  041B  3464               	retlw	100
   209  041C  3400               	retlw	0
   210  041D  34E8               	retlw	232
   211  041E  3403               	retlw	3
   212  041F  3410               	retlw	16
   213  0420  3427               	retlw	39
   214  0421                     __end_of_dpowers:
   215  000C                     _PIR1bits	set	12
   216  001E                     _ADRESH	set	30
   217  001F                     _ADCON0bits	set	31
   218  000F                     _TMR1H	set	15
   219  000E                     _TMR1L	set	14
   220  0010                     _T1CONbits	set	16
   221  000B                     _INTCONbits	set	11
   222  0060                     _TMR1IF	set	96
   223  0032                     _RB2	set	50
   224  0031                     _RB1	set	49
   225  0080                     _TMR1ON	set	128
   226  0030                     _RB0	set	48
   227  003B                     _RC3	set	59
   228  003A                     _RC2	set	58
   229  0038                     _RC0	set	56
   230  0043                     _RD3	set	67
   231  0042                     _RD2	set	66
   232  0047                     _RD7	set	71
   233  0046                     _RD6	set	70
   234  0045                     _RD5	set	69
   235  0044                     _RD4	set	68
   236  009E                     _ADRESL	set	158
   237  009F                     _ADCON1bits	set	159
   238  008C                     _PIE1bits	set	140
   239  0081                     _OPTION_REGbits	set	129
   240  0088                     _TRISD	set	136
   241  0087                     _TRISC	set	135
   242  0086                     _TRISB	set	134
   243  0421                     STR_1:
   244  0421  3431               	retlw	49	;'1'
   245  0422  342D               	retlw	45	;'-'
   246  0423  3420               	retlw	32	;' '
   247  0424  3420               	retlw	32	;' '
   248  0425  3420               	retlw	32	;' '
   249  0426  3420               	retlw	32	;' '
   250  0427  3420               	retlw	32	;' '
   251  0428  3420               	retlw	32	;' '
   252  0429  3425               	retlw	37	;'%'
   253  042A  3430               	retlw	48	;'0'
   254  042B  3432               	retlw	50	;'2'
   255  042C  3464               	retlw	100	;'d'
   256  042D  343A               	retlw	58	;':'
   257  042E  3425               	retlw	37	;'%'
   258  042F  3430               	retlw	48	;'0'
   259  0430  3432               	retlw	50	;'2'
   260  0431  3464               	retlw	100	;'d'
   261  0432  343A               	retlw	58	;':'
   262  0433  3425               	retlw	37	;'%'
   263  0434  3430               	retlw	48	;'0'
   264  0435  3432               	retlw	50	;'2'
   265  0436  3464               	retlw	100	;'d'
   266  0437  3400               	retlw	0
   267  0438                     STR_2:
   268  0438  3441               	retlw	65	;'A'
   269  0439  3474               	retlw	116	;'t'
   270  043A  346C               	retlw	108	;'l'
   271  043B  3465               	retlw	101	;'e'
   272  043C  3474               	retlw	116	;'t'
   273  043D  3461               	retlw	97	;'a'
   274  043E  3420               	retlw	32	;' '
   275  043F  3444               	retlw	68	;'D'
   276  0440  3451               	retlw	81	;'Q'
   277  0441  3400               	retlw	0
   278                           
   279                           	psect	cinit
   280  000F                     start_initialization:	
   281                           ; #config settings
   282                           
   283  000F                     __initialization:
   284                           
   285                           ; Clear objects allocated to COMMON
   286  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   287  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   288                           
   289                           ; Clear objects allocated to BANK0
   290  0011  1383               	bcf	3,7	;select IRP bank0
   291  0012  303D               	movlw	low __pbssBANK0
   292  0013  0084               	movwf	4
   293  0014  304F               	movlw	low (__pbssBANK0+18)
   294  0015  120A  118A  2584  120A  118A  	fcall	clear_ram0
   295  001A                     end_of_initialization:	
   296                           ;End of C runtime variable initialization code
   297                           
   298  001A                     __end_of__initialization:
   299  001A  0183               	clrf	3
   300  001B  120A  118A  29F2   	ljmp	_main	;jump to C main() function
   301                           
   302                           	psect	bssCOMMON
   303  007A                     __pbssCOMMON:
   304  007A                     _contador:
   305  007A                     	ds	2
   306                           
   307                           	psect	bssBANK0
   308  003D                     __pbssBANK0:
   309  003D                     _valor:
   310  003D                     	ds	2
   311  003F                     _centesimos:
   312  003F                     	ds	2
   313  0041                     _segundos:
   314  0041                     	ds	2
   315  0043                     _minutos:
   316  0043                     	ds	2
   317  0045                     _buffer:
   318  0045                     	ds	10
   319                           
   320                           	psect	clrtext
   321  0584                     clear_ram0:	
   322                           ;	Called with FSR containing the base address, and
   323                           ;	W with the last address+1
   324                           
   325  0584  0064               	clrwdt	;clear the watchdog before getting into this loop
   326  0585                     clrloop0:
   327  0585  0180               	clrf	0	;clear RAM location pointed to by FSR
   328  0586  0A84               	incf	4,f	;increment pointer
   329  0587  0604               	xorwf	4,w	;XOR with final address
   330  0588  1903               	btfsc	3,2	;have we reached the end yet?
   331  0589  3400               	retlw	0	;all done for this memory range, return
   332  058A  0604               	xorwf	4,w	;XOR again to restore value
   333  058B  2D85               	goto	clrloop0	;do the next byte
   334                           
   335                           	psect	cstackCOMMON
   336  0070                     __pcstackCOMMON:
   337  0070                     ?_isdigit:
   338  0070                     ?_setCronometro:	
   339                           ; 1 bit 
   340                           
   341  0070                     ?_setDQ:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_cronometro:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ??_cronometro:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_Lcd_Port:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_Lcd_Cmd:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_Lcd_Init:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_Lcd_Write_Char:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_Lcd_Write_String:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_ContaSegundos:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ??_ContaSegundos:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Lcd_Clear:	
   375                           ; 1 bytes @ 0x0
   376                           
   377                           
   378                           ; 2 bytes @ 0x0
   379  0070                     	ds	2
   380  0072                     ??_isdigit:
   381  0072                     ??_Lcd_Port:	
   382                           ; 1 bytes @ 0x2
   383                           
   384  0072                     ?___wmul:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0072                     ?___lwdiv:	
   388                           ; 2 bytes @ 0x2
   389                           
   390  0072                     Lcd_Port@a:	
   391                           ; 2 bytes @ 0x2
   392                           
   393  0072                     _isdigit$834:	
   394                           ; 1 bytes @ 0x2
   395                           
   396  0072                     ___wmul@multiplier:	
   397                           ; 1 bytes @ 0x2
   398                           
   399  0072                     ___lwdiv@divisor:	
   400                           ; 2 bytes @ 0x2
   401                           
   402                           
   403                           ; 2 bytes @ 0x2
   404  0072                     	ds	1
   405  0073                     ??_Lcd_Cmd:
   406  0073                     ??_Lcd_Write_Char:	
   407                           ; 1 bytes @ 0x3
   408                           
   409  0073                     isdigit@c:	
   410                           ; 1 bytes @ 0x3
   411                           
   412                           
   413                           ; 1 bytes @ 0x3
   414  0073                     	ds	1
   415  0074                     Lcd_Write_Char@temp:
   416  0074                     ___wmul@multiplicand:	
   417                           ; 1 bytes @ 0x4
   418                           
   419  0074                     ___lwdiv@dividend:	
   420                           ; 2 bytes @ 0x4
   421                           
   422                           
   423                           ; 2 bytes @ 0x4
   424  0074                     	ds	1
   425  0075                     Lcd_Cmd@a:
   426  0075                     Lcd_Write_Char@y:	
   427                           ; 1 bytes @ 0x5
   428                           
   429                           
   430                           ; 1 bytes @ 0x5
   431  0075                     	ds	1
   432  0076                     ??_Lcd_Clear:
   433  0076                     ?_Lcd_Set_Cursor:	
   434                           ; 1 bytes @ 0x6
   435                           
   436  0076                     ??_Lcd_Init:	
   437                           ; 1 bytes @ 0x6
   438                           
   439  0076                     ??___wmul:	
   440                           ; 1 bytes @ 0x6
   441                           
   442  0076                     ??___lwdiv:	
   443                           ; 1 bytes @ 0x6
   444                           
   445  0076                     Lcd_Set_Cursor@b:	
   446                           ; 1 bytes @ 0x6
   447                           
   448  0076                     Lcd_Write_Char@a:	
   449                           ; 1 bytes @ 0x6
   450                           
   451  0076                     ___wmul@product:	
   452                           ; 1 bytes @ 0x6
   453                           
   454                           
   455                           ; 2 bytes @ 0x6
   456  0076                     	ds	1
   457  0077                     ??_Lcd_Set_Cursor:
   458  0077                     ??_Lcd_Write_String:	
   459                           ; 1 bytes @ 0x7
   460                           
   461  0077                     ___lwdiv@quotient:	
   462                           ; 1 bytes @ 0x7
   463                           
   464                           
   465                           ; 2 bytes @ 0x7
   466  0077                     	ds	2
   467  0079                     ___lwdiv@counter:
   468                           
   469                           ; 1 bytes @ 0x9
   470  0079                     	ds	1
   471                           
   472                           	psect	cstackBANK0
   473  0020                     __pcstackBANK0:
   474  0020                     ?___lwmod:
   475  0020                     Lcd_Set_Cursor@a:	
   476                           ; 2 bytes @ 0x0
   477                           
   478  0020                     Lcd_Write_String@i:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0020                     ___lwmod@divisor:	
   482                           ; 2 bytes @ 0x0
   483                           
   484                           
   485                           ; 2 bytes @ 0x0
   486  0020                     	ds	1
   487  0021                     Lcd_Set_Cursor@z:
   488                           
   489                           ; 1 bytes @ 0x1
   490  0021                     	ds	1
   491  0022                     Lcd_Set_Cursor@y:
   492  0022                     Lcd_Write_String@a:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0022                     ___lwmod@dividend:	
   496                           ; 1 bytes @ 0x2
   497                           
   498                           
   499                           ; 2 bytes @ 0x2
   500  0022                     	ds	1
   501  0023                     Lcd_Set_Cursor@temp:
   502                           
   503                           ; 1 bytes @ 0x3
   504  0023                     	ds	1
   505  0024                     ??___lwmod:
   506                           
   507                           ; 1 bytes @ 0x4
   508  0024                     	ds	1
   509  0025                     ___lwmod@counter:
   510                           
   511                           ; 1 bytes @ 0x5
   512  0025                     	ds	1
   513  0026                     ?_sprintf:
   514  0026                     sprintf@f:	
   515                           ; 2 bytes @ 0x6
   516                           
   517                           
   518                           ; 1 bytes @ 0x6
   519  0026                     	ds	7
   520  002D                     ??_sprintf:
   521                           
   522                           ; 1 bytes @ 0xD
   523  002D                     	ds	3
   524  0030                     sprintf@ap:
   525                           
   526                           ; 1 bytes @ 0x10
   527  0030                     	ds	1
   528  0031                     sprintf@prec:
   529                           
   530                           ; 1 bytes @ 0x11
   531  0031                     	ds	1
   532  0032                     sprintf@val:
   533                           
   534                           ; 2 bytes @ 0x12
   535  0032                     	ds	2
   536  0034                     sprintf@flag:
   537                           
   538                           ; 1 bytes @ 0x14
   539  0034                     	ds	1
   540  0035                     sprintf@width:
   541                           
   542                           ; 2 bytes @ 0x15
   543  0035                     	ds	2
   544  0037                     sprintf@sp:
   545                           
   546                           ; 1 bytes @ 0x17
   547  0037                     	ds	1
   548  0038                     sprintf@c:
   549                           
   550                           ; 1 bytes @ 0x18
   551  0038                     	ds	1
   552  0039                     ??_setCronometro:
   553  0039                     ??_setDQ:	
   554                           ; 1 bytes @ 0x19
   555                           
   556                           
   557                           ; 1 bytes @ 0x19
   558  0039                     	ds	1
   559  003A                     ??_main:
   560                           
   561                           ; 1 bytes @ 0x1A
   562  003A                     	ds	3
   563                           
   564                           	psect	maintext
   565  01F2                     __pmaintext:	
   566 ;;
   567 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   568 ;;
   569 ;; *************** function _main *****************
   570 ;; Defined at:
   571 ;;		line 51 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;		None
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : B00/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   585 ;;      Params:         0       0       0       0       0
   586 ;;      Locals:         0       0       0       0       0
   587 ;;      Temps:          0       3       0       0       0
   588 ;;      Totals:         0       3       0       0       0
   589 ;;Total ram usage:        3 bytes
   590 ;; Hardware stack levels required when called: 6
   591 ;; This function calls:
   592 ;;		_Lcd_Clear
   593 ;;		_Lcd_Init
   594 ;;		_setCronometro
   595 ;;		_setDQ
   596 ;; This function is called by:
   597 ;;		Startup code after reset
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601  01F2                     _main:	
   602                           ;psect for function _main
   603                           
   604  01F2                     l1964:	
   605                           ;incstack = 0
   606                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   607                           
   608                           
   609                           ;main.c: 54:     TRISB = 0b11111111;
   610  01F2  30FF               	movlw	255
   611  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   612  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   613  01F5  0086               	movwf	6	;volatile
   614  01F6                     l1966:
   615                           
   616                           ;main.c: 55:     TRISC = 0b00000000;
   617  01F6  0187               	clrf	7	;volatile
   618  01F7                     l1968:
   619                           
   620                           ;main.c: 56:     TRISD = 0b00000000;
   621  01F7  0188               	clrf	8	;volatile
   622  01F8                     l1970:
   623                           
   624                           ;main.c: 59:     OPTION_REGbits.nRBPU = 0;
   625  01F8  1381               	bcf	1,7	;volatile
   626  01F9                     l1972:
   627                           
   628                           ;main.c: 62:     INTCONbits.GIE = 1;
   629  01F9  178B               	bsf	11,7	;volatile
   630  01FA                     l1974:
   631                           
   632                           ;main.c: 63:     INTCONbits.PEIE = 1;
   633  01FA  170B               	bsf	11,6	;volatile
   634  01FB                     l1976:
   635                           
   636                           ;main.c: 64:     PIE1bits.TMR1IE = 1;
   637  01FB  140C               	bsf	12,0	;volatile
   638  01FC                     l1978:
   639                           
   640                           ;main.c: 67:     T1CONbits.TMR1CS = 0;
   641  01FC  1283               	bcf	3,5	;RP0=0, select bank0
   642  01FD  1303               	bcf	3,6	;RP1=0, select bank0
   643  01FE  1090               	bcf	16,1	;volatile
   644  01FF                     l1980:
   645                           
   646                           ;main.c: 68:     T1CONbits.T1CKPS0 = 1;
   647  01FF  1610               	bsf	16,4	;volatile
   648  0200                     l1982:
   649                           
   650                           ;main.c: 69:     T1CONbits.T1CKPS1 = 1;
   651  0200  1690               	bsf	16,5	;volatile
   652                           
   653                           ;main.c: 72:     TMR1L = 0x95;
   654  0201  3095               	movlw	149
   655  0202  008E               	movwf	14	;volatile
   656                           
   657                           ;main.c: 73:     TMR1H = 0xE7;
   658  0203  30E7               	movlw	231
   659  0204  008F               	movwf	15	;volatile
   660  0205                     l1984:
   661                           
   662                           ;main.c: 75:     T1CONbits.TMR1ON = 0;
   663  0205  1010               	bcf	16,0	;volatile
   664  0206                     l1986:
   665                           
   666                           ;main.c: 78:     ADCON1bits.PCFG0 = 0;
   667  0206  1683               	bsf	3,5	;RP0=1, select bank1
   668  0207  1303               	bcf	3,6	;RP1=0, select bank1
   669  0208  101F               	bcf	31,0	;volatile
   670  0209                     l1988:
   671                           
   672                           ;main.c: 79:     ADCON1bits.PCFG1 = 1;
   673  0209  149F               	bsf	31,1	;volatile
   674  020A                     l1990:
   675                           
   676                           ;main.c: 80:     ADCON1bits.PCFG2 = 1;
   677  020A  151F               	bsf	31,2	;volatile
   678  020B                     l1992:
   679                           
   680                           ;main.c: 81:     ADCON1bits.PCFG3 = 1;
   681  020B  159F               	bsf	31,3	;volatile
   682  020C                     l1994:
   683                           
   684                           ;main.c: 84:     ADCON0bits.ADCS0 = 0;
   685  020C  1283               	bcf	3,5	;RP0=0, select bank0
   686  020D  1303               	bcf	3,6	;RP1=0, select bank0
   687  020E  131F               	bcf	31,6	;volatile
   688  020F                     l1996:
   689                           
   690                           ;main.c: 85:     ADCON0bits.ADCS1 = 0;
   691  020F  139F               	bcf	31,7	;volatile
   692  0210                     l1998:
   693                           
   694                           ;main.c: 87:     ADCON1bits.ADFM = 0;
   695  0210  1683               	bsf	3,5	;RP0=1, select bank1
   696  0211  1303               	bcf	3,6	;RP1=0, select bank1
   697  0212  139F               	bcf	31,7	;volatile
   698  0213                     l2000:
   699                           
   700                           ;main.c: 89:     ADRESL = 0x00;
   701  0213  019E               	clrf	30	;volatile
   702  0214                     l2002:
   703                           
   704                           ;main.c: 90:     ADRESH = 0x00;
   705  0214  1283               	bcf	3,5	;RP0=0, select bank0
   706  0215  1303               	bcf	3,6	;RP1=0, select bank0
   707  0216  019E               	clrf	30	;volatile
   708  0217                     l2004:
   709                           
   710                           ;main.c: 92:     ADCON0bits.ADON = 1;
   711  0217  141F               	bsf	31,0	;volatile
   712  0218                     l2006:
   713                           
   714                           ;main.c: 95:     RC0 = 0;
   715  0218  1007               	bcf	7,0	;volatile
   716  0219                     l2008:
   717                           
   718                           ;main.c: 96:     RC2 = 0;
   719  0219  1107               	bcf	7,2	;volatile
   720  021A                     l2010:
   721                           
   722                           ;main.c: 97:     RC3 = 0;
   723  021A  1187               	bcf	7,3	;volatile
   724  021B                     l2012:
   725                           
   726                           ;main.c: 100:     Lcd_Init();
   727  021B  120A  118A  22A2  120A  118A  	fcall	_Lcd_Init
   728  0220                     l2014:
   729                           
   730                           ;main.c: 101:     Lcd_Clear();
   731  0220  120A  118A  2577  120A  118A  	fcall	_Lcd_Clear
   732  0225                     l124:	
   733                           ;main.c: 104:     while(1)
   734                           
   735  0225  0064               	clrwdt	;# 
   736  0226                     l2016:
   737                           
   738                           ;main.c: 109:         if(RB0 == 0)
   739  0226  1283               	bcf	3,5	;RP0=0, select bank0
   740  0227  1303               	bcf	3,6	;RP1=0, select bank0
   741  0228  1806               	btfsc	6,0	;volatile
   742  0229  2A2B               	goto	u1511
   743  022A  2A2C               	goto	u1510
   744  022B                     u1511:
   745  022B  2A41               	goto	l2026
   746  022C                     u1510:
   747  022C                     l2018:
   748                           
   749                           ;main.c: 110:         {;main.c: 111:             TMR1ON = 1;
   750  022C  1410               	bsf	16,0	;volatile
   751                           
   752                           ;main.c: 113:             RC0 = 1;
   753  022D  1407               	bsf	7,0	;volatile
   754                           
   755                           ;main.c: 114:             RC2 = 1;
   756  022E  1507               	bsf	7,2	;volatile
   757  022F                     l2020:
   758                           
   759                           ;main.c: 115:             _delay((unsigned long)((400)*(20000000/4000.0)));
   760  022F  300B               	movlw	11
   761  0230  1283               	bcf	3,5	;RP0=0, select bank0
   762  0231  1303               	bcf	3,6	;RP1=0, select bank0
   763  0232  00BC               	movwf	??_main+2
   764  0233  3026               	movlw	38
   765  0234  00BB               	movwf	??_main+1
   766  0235  305D               	movlw	93
   767  0236  00BA               	movwf	??_main
   768  0237                     u1577:
   769  0237  0BBA               	decfsz	??_main,f
   770  0238  2A37               	goto	u1577
   771  0239  0BBB               	decfsz	??_main+1,f
   772  023A  2A37               	goto	u1577
   773  023B  0BBC               	decfsz	??_main+2,f
   774  023C  2A37               	goto	u1577
   775  023D                     l2022:
   776                           
   777                           ;main.c: 116:             RC0 = 0;
   778  023D  1283               	bcf	3,5	;RP0=0, select bank0
   779  023E  1303               	bcf	3,6	;RP1=0, select bank0
   780  023F  1007               	bcf	7,0	;volatile
   781  0240                     l2024:
   782                           
   783                           ;main.c: 117:             RC2 = 0;
   784  0240  1107               	bcf	7,2	;volatile
   785  0241                     l2026:
   786                           
   787                           ;main.c: 121:         if(RB1 == 0)
   788  0241  1886               	btfsc	6,1	;volatile
   789  0242  2A44               	goto	u1521
   790  0243  2A45               	goto	u1520
   791  0244                     u1521:
   792  0244  2A46               	goto	l2030
   793  0245                     u1520:
   794  0245                     l2028:
   795                           
   796                           ;main.c: 122:         {;main.c: 123:             TMR1ON = 0;
   797  0245  1010               	bcf	16,0	;volatile
   798  0246                     l2030:
   799                           
   800                           ;main.c: 127:         setCronometro();
   801  0246  120A  118A  249D  120A  118A  	fcall	_setCronometro
   802  024B                     l2032:
   803                           
   804                           ;main.c: 129:         ADCON0bits.CHS0 = 0;
   805  024B  1283               	bcf	3,5	;RP0=0, select bank0
   806  024C  1303               	bcf	3,6	;RP1=0, select bank0
   807  024D  119F               	bcf	31,3	;volatile
   808  024E                     l2034:
   809                           
   810                           ;main.c: 130:         ADCON0bits.CHS1 = 0;
   811  024E  121F               	bcf	31,4	;volatile
   812  024F                     l2036:
   813                           
   814                           ;main.c: 131:         ADCON0bits.CHS2 = 0;
   815  024F  129F               	bcf	31,5	;volatile
   816  0250                     l2038:
   817                           
   818                           ;main.c: 133:         ADCON0bits.GO = 1;
   819  0250  151F               	bsf	31,2	;volatile
   820  0251                     l2040:
   821                           
   822                           ;main.c: 134:         _delay((unsigned long)((10)*(20000000/4000000.0)));
   823  0251  300F               	movlw	15
   824  0252  1283               	bcf	3,5	;RP0=0, select bank0
   825  0253  1303               	bcf	3,6	;RP1=0, select bank0
   826  0254  00BA               	movwf	??_main
   827  0255                     u1587:
   828  0255  0BBA               	decfsz	??_main,f
   829  0256  2A55               	goto	u1587
   830  0257  2A58               	nop2
   831  0258                     l2042:
   832                           
   833                           ;main.c: 135:         valor = ADRESH;
   834  0258  1283               	bcf	3,5	;RP0=0, select bank0
   835  0259  1303               	bcf	3,6	;RP1=0, select bank0
   836  025A  081E               	movf	30,w	;volatile
   837  025B  00BA               	movwf	??_main
   838  025C  01BB               	clrf	??_main+1
   839  025D  083A               	movf	??_main,w
   840  025E  00BD               	movwf	_valor
   841  025F  083B               	movf	??_main+1,w
   842  0260  00BE               	movwf	_valor+1
   843  0261                     l2044:
   844                           
   845                           ;main.c: 138:         if(valor != 0)
   846  0261  083D               	movf	_valor,w
   847  0262  043E               	iorwf	_valor+1,w
   848  0263  1903               	btfsc	3,2
   849  0264  2A66               	goto	u1531
   850  0265  2A67               	goto	u1530
   851  0266                     u1531:
   852  0266  2A69               	goto	l2048
   853  0267                     u1530:
   854  0267                     l2046:
   855                           
   856                           ;main.c: 139:         {;main.c: 140:             RC3 = 0;
   857  0267  1187               	bcf	7,3	;volatile
   858                           
   859                           ;main.c: 141:         }
   860  0268  2A84               	goto	l2056
   861  0269                     l2048:
   862  0269  083D               	movf	_valor,w
   863  026A  043E               	iorwf	_valor+1,w
   864  026B  1D03               	btfss	3,2
   865  026C  2A6E               	goto	u1541
   866  026D  2A6F               	goto	u1540
   867  026E                     u1541:
   868  026E  2A84               	goto	l2056
   869  026F                     u1540:
   870  026F                     l2050:
   871  026F  0842               	movf	_segundos+1,w
   872  0270  3A80               	xorlw	128
   873  0271  00FF               	movwf	btemp+1
   874  0272  3080               	movlw	128
   875  0273  027F               	subwf	btemp+1,w
   876  0274  1D03               	skipz
   877  0275  2A78               	goto	u1555
   878  0276  3003               	movlw	3
   879  0277  0241               	subwf	_segundos,w
   880  0278                     u1555:
   881  0278  1803               	skipnc
   882  0279  2A7B               	goto	u1551
   883  027A  2A7C               	goto	u1550
   884  027B                     u1551:
   885  027B  2A84               	goto	l2056
   886  027C                     u1550:
   887  027C                     l2052:
   888                           
   889                           ;main.c: 143:         {;main.c: 144:             RC3 = 1;
   890  027C  1283               	bcf	3,5	;RP0=0, select bank0
   891  027D  1303               	bcf	3,6	;RP1=0, select bank0
   892  027E  1587               	bsf	7,3	;volatile
   893  027F                     l2054:
   894                           
   895                           ;main.c: 145:             setDQ();
   896  027F  120A  118A  2530  120A  118A  	fcall	_setDQ
   897  0284                     l2056:
   898                           
   899                           ;main.c: 149:         if(RB2 == 0)
   900  0284  1283               	bcf	3,5	;RP0=0, select bank0
   901  0285  1303               	bcf	3,6	;RP1=0, select bank0
   902  0286  1906               	btfsc	6,2	;volatile
   903  0287  2A89               	goto	u1561
   904  0288  2A8A               	goto	u1560
   905  0289                     u1561:
   906  0289  2A25               	goto	l124
   907  028A                     u1560:
   908  028A                     l2058:
   909                           
   910                           ;main.c: 150:         {;main.c: 151:             TMR1ON = 0;
   911  028A  1010               	bcf	16,0	;volatile
   912                           
   913                           ;main.c: 152:             RC3 = 0;
   914  028B  1187               	bcf	7,3	;volatile
   915                           
   916                           ;main.c: 153:             RC0 = 0;
   917  028C  1007               	bcf	7,0	;volatile
   918                           
   919                           ;main.c: 154:             RC2 = 0;
   920  028D  1107               	bcf	7,2	;volatile
   921  028E                     l2060:
   922                           
   923                           ;main.c: 155:             centesimos = 0;
   924  028E  01BF               	clrf	_centesimos
   925  028F  01C0               	clrf	_centesimos+1
   926                           
   927                           ;main.c: 156:             segundos = 0;
   928  0290  01C1               	clrf	_segundos
   929  0291  01C2               	clrf	_segundos+1
   930                           
   931                           ;main.c: 157:             minutos = 0;
   932  0292  01C3               	clrf	_minutos
   933  0293  01C4               	clrf	_minutos+1
   934  0294                     l2062:
   935                           
   936                           ;main.c: 158:             Lcd_Clear();
   937  0294  120A  118A  2577  120A  118A  	fcall	_Lcd_Clear
   938  0299                     l2064:
   939                           
   940                           ;main.c: 159:             setCronometro();
   941  0299  120A  118A  249D  120A  118A  	fcall	_setCronometro
   942  029E  2A25               	goto	l124
   943  029F  120A  118A  280C   	ljmp	start
   944  02A2                     __end_of_main:
   945                           
   946                           	psect	text1
   947  0530                     __ptext1:	
   948 ;; *************** function _setDQ *****************
   949 ;; Defined at:
   950 ;;		line 195 in file "main.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   964 ;;      Params:         0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0
   966 ;;      Temps:          0       1       0       0       0
   967 ;;      Totals:         0       1       0       0       0
   968 ;;Total ram usage:        1 bytes
   969 ;; Hardware stack levels used: 1
   970 ;; Hardware stack levels required when called: 5
   971 ;; This function calls:
   972 ;;		_Lcd_Set_Cursor
   973 ;;		_Lcd_Write_String
   974 ;;		_sprintf
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980  0530                     _setDQ:	
   981                           ;psect for function _setDQ
   982                           
   983  0530                     l1954:	
   984                           ;incstack = 0
   985                           ; Regs used in _setDQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   986                           
   987                           
   988                           ;main.c: 197:     sprintf(buffer,"Atleta DQ");
   989  0530  3022               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   990  0531  1283               	bcf	3,5	;RP0=0, select bank0
   991  0532  1303               	bcf	3,6	;RP1=0, select bank0
   992  0533  00B9               	movwf	??_setDQ
   993  0534  0839               	movf	??_setDQ,w
   994  0535  00A6               	movwf	sprintf@f
   995  0536  3045               	movlw	(low (_buffer| 0))& (0+255)
   996  0537  120A  118A  201E  120A  118A  	fcall	_sprintf
   997  053C                     l1956:
   998                           
   999                           ;main.c: 198:     Lcd_Set_Cursor(2,1);
  1000  053C  01F6               	clrf	Lcd_Set_Cursor@b
  1001  053D  0AF6               	incf	Lcd_Set_Cursor@b,f
  1002  053E  3002               	movlw	2
  1003  053F  120A  118A  2300  120A  118A  	fcall	_Lcd_Set_Cursor
  1004  0544                     l1958:
  1005                           
  1006                           ;main.c: 199:     Lcd_Write_String(buffer);
  1007  0544  3045               	movlw	(low (_buffer| 0))& (0+255)
  1008  0545  120A  118A  24E9  120A  118A  	fcall	_Lcd_Write_String
  1009  054A                     l146:
  1010  054A  0008               	return
  1011  054B                     __end_of_setDQ:
  1012                           
  1013                           	psect	text2
  1014  049D                     __ptext2:	
  1015 ;; *************** function _setCronometro *****************
  1016 ;; Defined at:
  1017 ;;		line 188 in file "main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0
  1033 ;;      Temps:          0       1       0       0       0
  1034 ;;      Totals:         0       1       0       0       0
  1035 ;;Total ram usage:        1 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; Hardware stack levels required when called: 5
  1038 ;; This function calls:
  1039 ;;		_Lcd_Set_Cursor
  1040 ;;		_Lcd_Write_String
  1041 ;;		_sprintf
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047  049D                     _setCronometro:	
  1048                           ;psect for function _setCronometro
  1049                           
  1050  049D                     l1948:	
  1051                           ;incstack = 0
  1052                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1053                           
  1054                           
  1055                           ;main.c: 190:     sprintf(buffer,"1-      %02d:%02d:%02d", minutos, segundos, centesimos
      +                          );
  1056  049D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1057  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1058  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1059  04A0  00B9               	movwf	??_setCronometro
  1060  04A1  0839               	movf	??_setCronometro,w
  1061  04A2  00A6               	movwf	sprintf@f
  1062  04A3  0844               	movf	_minutos+1,w
  1063  04A4  00A8               	movwf	?_sprintf+2
  1064  04A5  0843               	movf	_minutos,w
  1065  04A6  00A7               	movwf	?_sprintf+1
  1066  04A7  0842               	movf	_segundos+1,w
  1067  04A8  00AA               	movwf	?_sprintf+4
  1068  04A9  0841               	movf	_segundos,w
  1069  04AA  00A9               	movwf	?_sprintf+3
  1070  04AB  0840               	movf	_centesimos+1,w
  1071  04AC  00AC               	movwf	?_sprintf+6
  1072  04AD  083F               	movf	_centesimos,w
  1073  04AE  00AB               	movwf	?_sprintf+5
  1074  04AF  3045               	movlw	(low (_buffer| 0))& (0+255)
  1075  04B0  120A  118A  201E  120A  118A  	fcall	_sprintf
  1076  04B5                     l1950:
  1077                           
  1078                           ;main.c: 191:     Lcd_Set_Cursor(1,1);
  1079  04B5  01F6               	clrf	Lcd_Set_Cursor@b
  1080  04B6  0AF6               	incf	Lcd_Set_Cursor@b,f
  1081  04B7  3001               	movlw	1
  1082  04B8  120A  118A  2300  120A  118A  	fcall	_Lcd_Set_Cursor
  1083  04BD                     l1952:
  1084                           
  1085                           ;main.c: 192:     Lcd_Write_String(buffer);
  1086  04BD  3045               	movlw	(low (_buffer| 0))& (0+255)
  1087  04BE  120A  118A  24E9  120A  118A  	fcall	_Lcd_Write_String
  1088  04C3                     l143:
  1089  04C3  0008               	return
  1090  04C4                     __end_of_setCronometro:
  1091                           
  1092                           	psect	text3
  1093  001E                     __ptext3:	
  1094 ;; *************** function _sprintf *****************
  1095 ;; Defined at:
  1096 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  sp              1    wreg     PTR unsigned char 
  1099 ;;		 -> buffer(10), 
  1100 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1101 ;;		 -> STR_2(10), STR_1(23), 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1104 ;;		 -> buffer(10), 
  1105 ;;  tmpval          4    0        struct .
  1106 ;;  width           2   21[BANK0 ] int 
  1107 ;;  val             2   18[BANK0 ] unsigned int 
  1108 ;;  cp              2    0        PTR const unsigned char 
  1109 ;;  len             2    0        unsigned int 
  1110 ;;  c               1   24[BANK0 ] unsigned char 
  1111 ;;  flag            1   20[BANK0 ] unsigned char 
  1112 ;;  prec            1   17[BANK0 ] char 
  1113 ;;  ap              1   16[BANK0 ] PTR void [1]
  1114 ;;		 -> ?_sprintf(2), 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  2    6[BANK0 ] int 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         0       7       0       0       0
  1125 ;;      Locals:         0       9       0       0       0
  1126 ;;      Temps:          0       3       0       0       0
  1127 ;;      Totals:         0      19       0       0       0
  1128 ;;Total ram usage:       19 bytes
  1129 ;; Hardware stack levels used: 1
  1130 ;; Hardware stack levels required when called: 3
  1131 ;; This function calls:
  1132 ;;		___lwdiv
  1133 ;;		___lwmod
  1134 ;;		___wmul
  1135 ;;		_isdigit
  1136 ;; This function is called by:
  1137 ;;		_setCronometro
  1138 ;;		_setDQ
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142  001E                     _sprintf:	
  1143                           ;psect for function _sprintf
  1144                           
  1145                           
  1146                           ;incstack = 0
  1147                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1148                           ;sprintf@sp stored from wreg
  1149  001E  1283               	bcf	3,5	;RP0=0, select bank0
  1150  001F  1303               	bcf	3,6	;RP1=0, select bank0
  1151  0020  00B7               	movwf	sprintf@sp
  1152  0021                     l1818:
  1153                           
  1154                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1155  0021  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1156  0022  00AD               	movwf	??_sprintf
  1157  0023  082D               	movf	??_sprintf,w
  1158  0024  00B0               	movwf	sprintf@ap
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1161  0025  29DB               	goto	l1922
  1162  0026                     l1820:
  1163                           
  1164                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1165  0026  3025               	movlw	37
  1166  0027  0638               	xorwf	sprintf@c,w
  1167  0028  1903               	btfsc	3,2
  1168  0029  282B               	goto	u1331
  1169  002A  282C               	goto	u1330
  1170  002B                     u1331:
  1171  002B  2838               	goto	l1826
  1172  002C                     u1330:
  1173  002C                     l1822:
  1174                           
  1175                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1176  002C  0838               	movf	sprintf@c,w
  1177  002D  00AD               	movwf	??_sprintf
  1178  002E  0837               	movf	sprintf@sp,w
  1179  002F  0084               	movwf	4
  1180  0030  082D               	movf	??_sprintf,w
  1181  0031  1383               	bcf	3,7	;select IRP bank0
  1182  0032  0080               	movwf	0
  1183  0033                     l1824:
  1184  0033  3001               	movlw	1
  1185  0034  00AD               	movwf	??_sprintf
  1186  0035  082D               	movf	??_sprintf,w
  1187  0036  07B7               	addwf	sprintf@sp,f
  1188                           
  1189                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  1190  0037  29DB               	goto	l1922
  1191  0038                     l1826:
  1192                           
  1193                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1194  0038  01B5               	clrf	sprintf@width
  1195  0039  01B6               	clrf	sprintf@width+1
  1196                           
  1197                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1198  003A  01B4               	clrf	sprintf@flag
  1199  003B  2841               	goto	l1832
  1200  003C                     l250:	
  1201                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1202                           
  1203                           
  1204                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1205  003C  1534               	bsf	sprintf@flag,2
  1206  003D                     l1828:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  1209  003D  3001               	movlw	1
  1210  003E  00AD               	movwf	??_sprintf
  1211  003F  082D               	movf	??_sprintf,w
  1212  0040  07A6               	addwf	sprintf@f,f
  1213  0041                     l1832:	
  1214                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1215                           
  1216  0041  0826               	movf	sprintf@f,w
  1217  0042  0084               	movwf	4
  1218  0043  120A  118A  2411  120A  118A  	fcall	stringdir
  1219  0048  00AD               	movwf	??_sprintf
  1220  0049  01AE               	clrf	??_sprintf+1
  1221                           
  1222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1223                           ; Switch size 1, requested type "simple"
  1224                           ; Number of cases is 1, Range of values is 0 to 0
  1225                           ; switch strategies available:
  1226                           ; Name         Instructions Cycles
  1227                           ; simple_byte            4     3 (average)
  1228                           ; direct_byte           11     8 (fixed)
  1229                           ; jumptable            260     6 (fixed)
  1230                           ;	Chosen strategy is simple_byte
  1231  004A  082E               	movf	??_sprintf+1,w
  1232  004B  3A00               	xorlw	0	; case 0
  1233  004C  1903               	skipnz
  1234  004D  284F               	goto	l2106
  1235  004E  2854               	goto	l1834
  1236  004F                     l2106:
  1237                           
  1238                           ; Switch size 1, requested type "simple"
  1239                           ; Number of cases is 1, Range of values is 48 to 48
  1240                           ; switch strategies available:
  1241                           ; Name         Instructions Cycles
  1242                           ; simple_byte            4     3 (average)
  1243                           ; direct_byte           14    11 (fixed)
  1244                           ; jumptable            263     9 (fixed)
  1245                           ;	Chosen strategy is simple_byte
  1246  004F  082D               	movf	??_sprintf,w
  1247  0050  3A30               	xorlw	48	; case 48
  1248  0051  1903               	skipnz
  1249  0052  283C               	goto	l250
  1250  0053  2854               	goto	l1834
  1251  0054                     l1834:
  1252                           
  1253                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1254  0054  0826               	movf	sprintf@f,w
  1255  0055  0084               	movwf	4
  1256  0056  120A  118A  2411  120A  118A  	fcall	stringdir
  1257  005B  120A  118A  2565  120A  118A  	fcall	_isdigit
  1258  0060  1C03               	btfss	3,0
  1259  0061  2863               	goto	u1341
  1260  0062  2864               	goto	u1340
  1261  0063                     u1341:
  1262  0063  28A4               	goto	l1848
  1263  0064                     u1340:
  1264  0064                     l1836:
  1265                           
  1266                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1267  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1268  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1269  0066  01B5               	clrf	sprintf@width
  1270  0067  01B6               	clrf	sprintf@width+1
  1271  0068                     l1838:
  1272                           
  1273                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1274  0068  300A               	movlw	10
  1275  0069  00F2               	movwf	___wmul@multiplier
  1276  006A  3000               	movlw	0
  1277  006B  00F3               	movwf	___wmul@multiplier+1
  1278  006C  1283               	bcf	3,5	;RP0=0, select bank0
  1279  006D  1303               	bcf	3,6	;RP1=0, select bank0
  1280  006E  0836               	movf	sprintf@width+1,w
  1281  006F  00F5               	movwf	___wmul@multiplicand+1
  1282  0070  0835               	movf	sprintf@width,w
  1283  0071  00F4               	movwf	___wmul@multiplicand
  1284  0072  120A  118A  24C4  120A  118A  	fcall	___wmul
  1285  0077  0873               	movf	?___wmul+1,w
  1286  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1288  007A  00B6               	movwf	sprintf@width+1
  1289  007B  0872               	movf	?___wmul,w
  1290  007C  00B5               	movwf	sprintf@width
  1291  007D                     l1840:
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1294  007D  0826               	movf	sprintf@f,w
  1295  007E  0084               	movwf	4
  1296  007F  120A  118A  2411  120A  118A  	fcall	stringdir
  1297  0084  3ED0               	addlw	208
  1298  0085  00AD               	movwf	??_sprintf
  1299  0086  30FF               	movlw	255
  1300  0087  1803               	skipnc
  1301  0088  3000               	movlw	0
  1302  0089  00AE               	movwf	??_sprintf+1
  1303  008A  082D               	movf	??_sprintf,w
  1304  008B  07B5               	addwf	sprintf@width,f
  1305  008C  1803               	skipnc
  1306  008D  0AB6               	incf	sprintf@width+1,f
  1307  008E  082E               	movf	??_sprintf+1,w
  1308  008F  07B6               	addwf	sprintf@width+1,f
  1309  0090                     l1842:
  1310  0090  3001               	movlw	1
  1311  0091  00AD               	movwf	??_sprintf
  1312  0092  082D               	movf	??_sprintf,w
  1313  0093  07A6               	addwf	sprintf@f,f
  1314  0094                     l1844:
  1315                           
  1316                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1317  0094  0826               	movf	sprintf@f,w
  1318  0095  0084               	movwf	4
  1319  0096  120A  118A  2411  120A  118A  	fcall	stringdir
  1320  009B  120A  118A  2565  120A  118A  	fcall	_isdigit
  1321  00A0  1803               	btfsc	3,0
  1322  00A1  28A3               	goto	u1351
  1323  00A2  28A4               	goto	u1350
  1324  00A3                     u1351:
  1325  00A3  2868               	goto	l1838
  1326  00A4                     u1350:
  1327  00A4                     l1848:
  1328  00A4  3001               	movlw	1
  1329  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1330  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1331  00A7  07A6               	addwf	sprintf@f,f
  1332  00A8  30FF               	movlw	-1
  1333  00A9  0726               	addwf	sprintf@f,w
  1334  00AA  0084               	movwf	4
  1335  00AB  120A  118A  2411  120A  118A  	fcall	stringdir
  1336  00B0  00B8               	movwf	sprintf@c
  1337  00B1  00AD               	movwf	??_sprintf
  1338  00B2  01AE               	clrf	??_sprintf+1
  1339                           
  1340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1341                           ; Switch size 1, requested type "simple"
  1342                           ; Number of cases is 1, Range of values is 0 to 0
  1343                           ; switch strategies available:
  1344                           ; Name         Instructions Cycles
  1345                           ; simple_byte            4     3 (average)
  1346                           ; direct_byte           11     8 (fixed)
  1347                           ; jumptable            260     6 (fixed)
  1348                           ;	Chosen strategy is simple_byte
  1349  00B3  082E               	movf	??_sprintf+1,w
  1350  00B4  3A00               	xorlw	0	; case 0
  1351  00B5  1903               	skipnz
  1352  00B6  28B8               	goto	l2108
  1353  00B7  29DB               	goto	l1922
  1354  00B8                     l2108:
  1355                           
  1356                           ; Switch size 1, requested type "simple"
  1357                           ; Number of cases is 3, Range of values is 0 to 105
  1358                           ; switch strategies available:
  1359                           ; Name         Instructions Cycles
  1360                           ; simple_byte           10     6 (average)
  1361                           ; jumptable            260     6 (fixed)
  1362                           ;	Chosen strategy is simple_byte
  1363  00B8  082D               	movf	??_sprintf,w
  1364  00B9  3A00               	xorlw	0	; case 0
  1365  00BA  1903               	skipnz
  1366  00BB  29ED               	goto	l1924
  1367  00BC  3A64               	xorlw	100	; case 100
  1368  00BD  1903               	skipnz
  1369  00BE  28C3               	goto	l1850
  1370  00BF  3A0D               	xorlw	13	; case 105
  1371  00C0  1903               	skipnz
  1372  00C1  28C3               	goto	l1850
  1373  00C2  29DB               	goto	l1922
  1374  00C3                     l1850:
  1375                           
  1376                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1377  00C3  0830               	movf	sprintf@ap,w
  1378  00C4  0084               	movwf	4
  1379  00C5  1383               	bcf	3,7	;select IRP bank0
  1380  00C6  0800               	movf	0,w
  1381  00C7  00B2               	movwf	sprintf@val
  1382  00C8  0A84               	incf	4,f
  1383  00C9  0800               	movf	0,w
  1384  00CA  00B3               	movwf	sprintf@val+1
  1385  00CB                     l1852:
  1386  00CB  3002               	movlw	2
  1387  00CC  00AD               	movwf	??_sprintf
  1388  00CD  082D               	movf	??_sprintf,w
  1389  00CE  07B0               	addwf	sprintf@ap,f
  1390  00CF                     l1854:
  1391                           
  1392                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1393  00CF  1FB3               	btfss	sprintf@val+1,7
  1394  00D0  28D2               	goto	u1361
  1395  00D1  28D3               	goto	u1360
  1396  00D2                     u1361:
  1397  00D2  28DC               	goto	l1860
  1398  00D3                     u1360:
  1399  00D3                     l1856:
  1400                           
  1401                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1402  00D3  3003               	movlw	3
  1403  00D4  00AD               	movwf	??_sprintf
  1404  00D5  082D               	movf	??_sprintf,w
  1405  00D6  04B4               	iorwf	sprintf@flag,f
  1406  00D7                     l1858:
  1407                           
  1408                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1409  00D7  09B2               	comf	sprintf@val,f
  1410  00D8  09B3               	comf	sprintf@val+1,f
  1411  00D9  0AB2               	incf	sprintf@val,f
  1412  00DA  1903               	skipnz
  1413  00DB  0AB3               	incf	sprintf@val+1,f
  1414  00DC                     l1860:
  1415                           
  1416                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1417  00DC  01B8               	clrf	sprintf@c
  1418  00DD  0AB8               	incf	sprintf@c,f
  1419  00DE                     l1866:
  1420                           
  1421                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1422  00DE  0838               	movf	sprintf@c,w
  1423  00DF  00AD               	movwf	??_sprintf
  1424  00E0  072D               	addwf	??_sprintf,w
  1425  00E1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1426  00E2  0084               	movwf	4
  1427  00E3  120A  118A  2411  120A  118A  	fcall	stringdir
  1428  00E8  00AE               	movwf	??_sprintf+1
  1429  00E9  120A  118A  2411  120A  118A  	fcall	stringdir
  1430  00EE  00AF               	movwf	??_sprintf+2
  1431  00EF  082F               	movf	??_sprintf+2,w
  1432  00F0  0233               	subwf	sprintf@val+1,w
  1433  00F1  1D03               	skipz
  1434  00F2  28F5               	goto	u1375
  1435  00F3  082E               	movf	??_sprintf+1,w
  1436  00F4  0232               	subwf	sprintf@val,w
  1437  00F5                     u1375:
  1438  00F5  1803               	skipnc
  1439  00F6  28F8               	goto	u1371
  1440  00F7  28F9               	goto	u1370
  1441  00F8                     u1371:
  1442  00F8  28FA               	goto	l1870
  1443  00F9                     u1370:
  1444  00F9  2904               	goto	l1872
  1445  00FA                     l1870:
  1446  00FA  3001               	movlw	1
  1447  00FB  00AD               	movwf	??_sprintf
  1448  00FC  082D               	movf	??_sprintf,w
  1449  00FD  07B8               	addwf	sprintf@c,f
  1450  00FE  3005               	movlw	5
  1451  00FF  0638               	xorwf	sprintf@c,w
  1452  0100  1D03               	btfss	3,2
  1453  0101  2903               	goto	u1381
  1454  0102  2904               	goto	u1380
  1455  0103                     u1381:
  1456  0103  28DE               	goto	l1866
  1457  0104                     u1380:
  1458  0104                     l1872:
  1459                           
  1460                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1461  0104  0835               	movf	sprintf@width,w
  1462  0105  0436               	iorwf	sprintf@width+1,w
  1463  0106  1903               	btfsc	3,2
  1464  0107  2909               	goto	u1391
  1465  0108  290A               	goto	u1390
  1466  0109                     u1391:
  1467  0109  2916               	goto	l268
  1468  010A                     u1390:
  1469  010A                     l1874:
  1470  010A  0834               	movf	sprintf@flag,w
  1471  010B  3903               	andlw	3
  1472  010C  1903               	btfsc	3,2
  1473  010D  290F               	goto	u1401
  1474  010E  2910               	goto	u1400
  1475  010F                     u1401:
  1476  010F  2916               	goto	l268
  1477  0110                     u1400:
  1478  0110                     l1876:
  1479                           
  1480                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1481  0110  30FF               	movlw	255
  1482  0111  07B5               	addwf	sprintf@width,f
  1483  0112  1803               	skipnc
  1484  0113  0AB6               	incf	sprintf@width+1,f
  1485  0114  30FF               	movlw	255
  1486  0115  07B6               	addwf	sprintf@width+1,f
  1487  0116                     l268:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1490  0116  0836               	movf	sprintf@width+1,w
  1491  0117  3A80               	xorlw	128
  1492  0118  3C80               	sublw	128
  1493  0119  1D03               	skipz
  1494  011A  291D               	goto	u1415
  1495  011B  0835               	movf	sprintf@width,w
  1496  011C  0238               	subwf	sprintf@c,w
  1497  011D                     u1415:
  1498  011D  1803               	skipnc
  1499  011E  2920               	goto	u1411
  1500  011F  2921               	goto	u1410
  1501  0120                     u1411:
  1502  0120  292D               	goto	l1880
  1503  0121                     u1410:
  1504  0121                     l1878:
  1505                           
  1506                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1507  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1509  0123  0838               	movf	sprintf@c,w
  1510  0124  00AD               	movwf	??_sprintf
  1511  0125  01AE               	clrf	??_sprintf+1
  1512  0126  082D               	movf	??_sprintf,w
  1513  0127  02B5               	subwf	sprintf@width,f
  1514  0128  082E               	movf	??_sprintf+1,w
  1515  0129  1C03               	skipc
  1516  012A  03B6               	decf	sprintf@width+1,f
  1517  012B  02B6               	subwf	sprintf@width+1,f
  1518  012C  2931               	goto	l1882
  1519  012D                     l1880:
  1520                           
  1521                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1522  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1523  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1524  012F  01B5               	clrf	sprintf@width
  1525  0130  01B6               	clrf	sprintf@width+1
  1526  0131                     l1882:
  1527                           
  1528                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1529  0131  1D34               	btfss	sprintf@flag,2
  1530  0132  2934               	goto	u1421
  1531  0133  2935               	goto	u1420
  1532  0134                     u1421:
  1533  0134  2964               	goto	l1898
  1534  0135                     u1420:
  1535  0135                     l1884:
  1536                           
  1537                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1538  0135  0834               	movf	sprintf@flag,w
  1539  0136  3903               	andlw	3
  1540  0137  1903               	btfsc	3,2
  1541  0138  293A               	goto	u1431
  1542  0139  293B               	goto	u1430
  1543  013A                     u1431:
  1544  013A  2946               	goto	l1890
  1545  013B                     u1430:
  1546  013B                     l1886:
  1547                           
  1548                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1549  013B  302D               	movlw	45
  1550  013C  00AD               	movwf	??_sprintf
  1551  013D  0837               	movf	sprintf@sp,w
  1552  013E  0084               	movwf	4
  1553  013F  082D               	movf	??_sprintf,w
  1554  0140  1383               	bcf	3,7	;select IRP bank0
  1555  0141  0080               	movwf	0
  1556  0142                     l1888:
  1557  0142  3001               	movlw	1
  1558  0143  00AD               	movwf	??_sprintf
  1559  0144  082D               	movf	??_sprintf,w
  1560  0145  07B7               	addwf	sprintf@sp,f
  1561  0146                     l1890:
  1562                           
  1563                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1564  0146  0835               	movf	sprintf@width,w
  1565  0147  0436               	iorwf	sprintf@width+1,w
  1566  0148  1903               	btfsc	3,2
  1567  0149  294B               	goto	u1441
  1568  014A  294C               	goto	u1440
  1569  014B                     u1441:
  1570  014B  2992               	goto	l1912
  1571  014C                     u1440:
  1572  014C                     l1892:
  1573                           
  1574                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1575  014C  3030               	movlw	48
  1576  014D  00AD               	movwf	??_sprintf
  1577  014E  0837               	movf	sprintf@sp,w
  1578  014F  0084               	movwf	4
  1579  0150  082D               	movf	??_sprintf,w
  1580  0151  1383               	bcf	3,7	;select IRP bank0
  1581  0152  0080               	movwf	0
  1582  0153                     l1894:
  1583  0153  3001               	movlw	1
  1584  0154  00AD               	movwf	??_sprintf
  1585  0155  082D               	movf	??_sprintf,w
  1586  0156  07B7               	addwf	sprintf@sp,f
  1587  0157                     l1896:
  1588  0157  30FF               	movlw	255
  1589  0158  07B5               	addwf	sprintf@width,f
  1590  0159  1803               	skipnc
  1591  015A  0AB6               	incf	sprintf@width+1,f
  1592  015B  30FF               	movlw	255
  1593  015C  07B6               	addwf	sprintf@width+1,f
  1594  015D  0835               	movf	sprintf@width,w
  1595  015E  0436               	iorwf	sprintf@width+1,w
  1596  015F  1D03               	btfss	3,2
  1597  0160  2962               	goto	u1451
  1598  0161  2963               	goto	u1450
  1599  0162                     u1451:
  1600  0162  294C               	goto	l1892
  1601  0163                     u1450:
  1602  0163  2992               	goto	l1912
  1603  0164                     l1898:
  1604                           
  1605                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1606  0164  0835               	movf	sprintf@width,w
  1607  0165  0436               	iorwf	sprintf@width+1,w
  1608  0166  1903               	btfsc	3,2
  1609  0167  2969               	goto	u1461
  1610  0168  296A               	goto	u1460
  1611  0169                     u1461:
  1612  0169  2981               	goto	l1906
  1613  016A                     u1460:
  1614  016A                     l1900:
  1615                           
  1616                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1617  016A  3020               	movlw	32
  1618  016B  00AD               	movwf	??_sprintf
  1619  016C  0837               	movf	sprintf@sp,w
  1620  016D  0084               	movwf	4
  1621  016E  082D               	movf	??_sprintf,w
  1622  016F  1383               	bcf	3,7	;select IRP bank0
  1623  0170  0080               	movwf	0
  1624  0171                     l1902:
  1625  0171  3001               	movlw	1
  1626  0172  00AD               	movwf	??_sprintf
  1627  0173  082D               	movf	??_sprintf,w
  1628  0174  07B7               	addwf	sprintf@sp,f
  1629  0175                     l1904:
  1630  0175  30FF               	movlw	255
  1631  0176  07B5               	addwf	sprintf@width,f
  1632  0177  1803               	skipnc
  1633  0178  0AB6               	incf	sprintf@width+1,f
  1634  0179  30FF               	movlw	255
  1635  017A  07B6               	addwf	sprintf@width+1,f
  1636  017B  0835               	movf	sprintf@width,w
  1637  017C  0436               	iorwf	sprintf@width+1,w
  1638  017D  1D03               	btfss	3,2
  1639  017E  2980               	goto	u1471
  1640  017F  2981               	goto	u1470
  1641  0180                     u1471:
  1642  0180  296A               	goto	l1900
  1643  0181                     u1470:
  1644  0181                     l1906:
  1645                           
  1646                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1647  0181  0834               	movf	sprintf@flag,w
  1648  0182  3903               	andlw	3
  1649  0183  1903               	btfsc	3,2
  1650  0184  2986               	goto	u1481
  1651  0185  2987               	goto	u1480
  1652  0186                     u1481:
  1653  0186  2992               	goto	l1912
  1654  0187                     u1480:
  1655  0187                     l1908:
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1658  0187  302D               	movlw	45
  1659  0188  00AD               	movwf	??_sprintf
  1660  0189  0837               	movf	sprintf@sp,w
  1661  018A  0084               	movwf	4
  1662  018B  082D               	movf	??_sprintf,w
  1663  018C  1383               	bcf	3,7	;select IRP bank0
  1664  018D  0080               	movwf	0
  1665  018E                     l1910:
  1666  018E  3001               	movlw	1
  1667  018F  00AD               	movwf	??_sprintf
  1668  0190  082D               	movf	??_sprintf,w
  1669  0191  07B7               	addwf	sprintf@sp,f
  1670  0192                     l1912:
  1671                           
  1672                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1673  0192  0838               	movf	sprintf@c,w
  1674  0193  00AD               	movwf	??_sprintf
  1675  0194  082D               	movf	??_sprintf,w
  1676  0195  00B1               	movwf	sprintf@prec
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1679  0196  29D2               	goto	l1920
  1680  0197                     l1914:
  1681                           
  1682                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1683  0197  300A               	movlw	10
  1684  0198  00A0               	movwf	___lwmod@divisor
  1685  0199  3000               	movlw	0
  1686  019A  00A1               	movwf	___lwmod@divisor+1
  1687  019B  0831               	movf	sprintf@prec,w
  1688  019C  00AD               	movwf	??_sprintf
  1689  019D  072D               	addwf	??_sprintf,w
  1690  019E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1691  019F  0084               	movwf	4
  1692  01A0  120A  118A  2411  120A  118A  	fcall	stringdir
  1693  01A5  00F2               	movwf	___lwdiv@divisor
  1694  01A6  120A  118A  2411  120A  118A  	fcall	stringdir
  1695  01AB  00F3               	movwf	___lwdiv@divisor+1
  1696  01AC  0833               	movf	sprintf@val+1,w
  1697  01AD  00F5               	movwf	___lwdiv@dividend+1
  1698  01AE  0832               	movf	sprintf@val,w
  1699  01AF  00F4               	movwf	___lwdiv@dividend
  1700  01B0  120A  118A  2358  120A  118A  	fcall	___lwdiv
  1701  01B5  0873               	movf	?___lwdiv+1,w
  1702  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1703  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1704  01B8  00A3               	movwf	___lwmod@dividend+1
  1705  01B9  0872               	movf	?___lwdiv,w
  1706  01BA  00A2               	movwf	___lwmod@dividend
  1707  01BB  120A  118A  239C  120A  118A  	fcall	___lwmod
  1708  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1709  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1710  01C2  0820               	movf	?___lwmod,w
  1711  01C3  3E30               	addlw	48
  1712  01C4  00AE               	movwf	??_sprintf+1
  1713  01C5  082E               	movf	??_sprintf+1,w
  1714  01C6  00B8               	movwf	sprintf@c
  1715  01C7                     l1916:
  1716                           
  1717                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1718  01C7  0838               	movf	sprintf@c,w
  1719  01C8  00AD               	movwf	??_sprintf
  1720  01C9  0837               	movf	sprintf@sp,w
  1721  01CA  0084               	movwf	4
  1722  01CB  082D               	movf	??_sprintf,w
  1723  01CC  1383               	bcf	3,7	;select IRP bank0
  1724  01CD  0080               	movwf	0
  1725  01CE                     l1918:
  1726  01CE  3001               	movlw	1
  1727  01CF  00AD               	movwf	??_sprintf
  1728  01D0  082D               	movf	??_sprintf,w
  1729  01D1  07B7               	addwf	sprintf@sp,f
  1730  01D2                     l1920:
  1731                           
  1732                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1733  01D2  30FF               	movlw	255
  1734  01D3  00AD               	movwf	??_sprintf
  1735  01D4  082D               	movf	??_sprintf,w
  1736  01D5  07B1               	addwf	sprintf@prec,f
  1737  01D6  0A31               	incf	sprintf@prec,w
  1738  01D7  1D03               	btfss	3,2
  1739  01D8  29DA               	goto	u1491
  1740  01D9  29DB               	goto	u1490
  1741  01DA                     u1491:
  1742  01DA  2997               	goto	l1914
  1743  01DB                     u1490:
  1744  01DB                     l1922:
  1745                           
  1746                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1747  01DB  3001               	movlw	1
  1748  01DC  07A6               	addwf	sprintf@f,f
  1749  01DD  30FF               	movlw	-1
  1750  01DE  0726               	addwf	sprintf@f,w
  1751  01DF  0084               	movwf	4
  1752  01E0  120A  118A  2411  120A  118A  	fcall	stringdir
  1753  01E5  00AD               	movwf	??_sprintf
  1754  01E6  082D               	movf	??_sprintf,w
  1755  01E7  00B8               	movwf	sprintf@c
  1756  01E8  0838               	movf	sprintf@c,w
  1757  01E9  1D03               	btfss	3,2
  1758  01EA  29EC               	goto	u1501
  1759  01EB  29ED               	goto	u1500
  1760  01EC                     u1501:
  1761  01EC  2826               	goto	l1820
  1762  01ED                     u1500:
  1763  01ED                     l1924:
  1764                           
  1765                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1766  01ED  0837               	movf	sprintf@sp,w
  1767  01EE  0084               	movwf	4
  1768  01EF  1383               	bcf	3,7	;select IRP bank0
  1769  01F0  0180               	clrf	0
  1770  01F1                     l285:
  1771  01F1  0008               	return
  1772  01F2                     __end_of_sprintf:
  1773                           
  1774                           	psect	text4
  1775  0565                     __ptext4:	
  1776 ;; *************** function _isdigit *****************
  1777 ;; Defined at:
  1778 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  c               1    wreg     unsigned char 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  c               1    3[COMMON] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1792 ;;      Params:         0       0       0       0       0
  1793 ;;      Locals:         2       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0
  1795 ;;      Totals:         2       0       0       0       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used: 1
  1798 ;; Hardware stack levels required when called: 2
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_sprintf
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806  0565                     _isdigit:	
  1807                           ;psect for function _isdigit
  1808                           
  1809                           
  1810                           ;incstack = 0
  1811                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1812                           ;isdigit@c stored from wreg
  1813  0565  00F3               	movwf	isdigit@c
  1814  0566                     l1304:
  1815  0566  01F2               	clrf	_isdigit$834
  1816  0567                     l1306:
  1817  0567  303A               	movlw	58
  1818  0568  0273               	subwf	isdigit@c,w
  1819  0569  1803               	skipnc
  1820  056A  2D6C               	goto	u641
  1821  056B  2D6D               	goto	u640
  1822  056C                     u641:
  1823  056C  2D75               	goto	l1312
  1824  056D                     u640:
  1825  056D                     l1308:
  1826  056D  3030               	movlw	48
  1827  056E  0273               	subwf	isdigit@c,w
  1828  056F  1C03               	skipc
  1829  0570  2D72               	goto	u651
  1830  0571  2D73               	goto	u650
  1831  0572                     u651:
  1832  0572  2D75               	goto	l1312
  1833  0573                     u650:
  1834  0573                     l1310:
  1835  0573  01F2               	clrf	_isdigit$834
  1836  0574  0AF2               	incf	_isdigit$834,f
  1837  0575                     l1312:
  1838  0575  0C72               	rrf	_isdigit$834,w
  1839  0576                     l742:
  1840  0576  0008               	return
  1841  0577                     __end_of_isdigit:
  1842                           
  1843                           	psect	text5
  1844  04C4                     __ptext5:	
  1845 ;; *************** function ___wmul *****************
  1846 ;; Defined at:
  1847 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  multiplier      2    2[COMMON] unsigned int 
  1850 ;;  multiplicand    2    4[COMMON] unsigned int 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  product         2    6[COMMON] unsigned int 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  2    2[COMMON] unsigned int 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1862 ;;      Params:         4       0       0       0       0
  1863 ;;      Locals:         2       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0
  1865 ;;      Totals:         6       0       0       0       0
  1866 ;;Total ram usage:        6 bytes
  1867 ;; Hardware stack levels used: 1
  1868 ;; Hardware stack levels required when called: 2
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_sprintf
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876  04C4                     ___wmul:	
  1877                           ;psect for function ___wmul
  1878                           
  1879  04C4                     l1316:	
  1880                           ;incstack = 0
  1881                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1882                           
  1883  04C4  01F6               	clrf	___wmul@product
  1884  04C5  01F7               	clrf	___wmul@product+1
  1885  04C6                     l1318:
  1886  04C6  1C72               	btfss	___wmul@multiplier,0
  1887  04C7  2CC9               	goto	u661
  1888  04C8  2CCA               	goto	u660
  1889  04C9                     u661:
  1890  04C9  2CD0               	goto	l289
  1891  04CA                     u660:
  1892  04CA                     l1320:
  1893  04CA  0874               	movf	___wmul@multiplicand,w
  1894  04CB  07F6               	addwf	___wmul@product,f
  1895  04CC  1803               	skipnc
  1896  04CD  0AF7               	incf	___wmul@product+1,f
  1897  04CE  0875               	movf	___wmul@multiplicand+1,w
  1898  04CF  07F7               	addwf	___wmul@product+1,f
  1899  04D0                     l289:
  1900  04D0  3001               	movlw	1
  1901  04D1                     u675:
  1902  04D1  1003               	clrc
  1903  04D2  0DF4               	rlf	___wmul@multiplicand,f
  1904  04D3  0DF5               	rlf	___wmul@multiplicand+1,f
  1905  04D4  3EFF               	addlw	-1
  1906  04D5  1D03               	skipz
  1907  04D6  2CD1               	goto	u675
  1908  04D7                     l1322:
  1909  04D7  3001               	movlw	1
  1910  04D8                     u685:
  1911  04D8  1003               	clrc
  1912  04D9  0CF3               	rrf	___wmul@multiplier+1,f
  1913  04DA  0CF2               	rrf	___wmul@multiplier,f
  1914  04DB  3EFF               	addlw	-1
  1915  04DC  1D03               	skipz
  1916  04DD  2CD8               	goto	u685
  1917  04DE                     l1324:
  1918  04DE  0872               	movf	___wmul@multiplier,w
  1919  04DF  0473               	iorwf	___wmul@multiplier+1,w
  1920  04E0  1D03               	btfss	3,2
  1921  04E1  2CE3               	goto	u691
  1922  04E2  2CE4               	goto	u690
  1923  04E3                     u691:
  1924  04E3  2CC6               	goto	l1318
  1925  04E4                     u690:
  1926  04E4                     l1326:
  1927  04E4  0877               	movf	___wmul@product+1,w
  1928  04E5  00F3               	movwf	?___wmul+1
  1929  04E6  0876               	movf	___wmul@product,w
  1930  04E7  00F2               	movwf	?___wmul
  1931  04E8                     l291:
  1932  04E8  0008               	return
  1933  04E9                     __end_of___wmul:
  1934                           
  1935                           	psect	text6
  1936  039C                     __ptext6:	
  1937 ;; *************** function ___lwmod *****************
  1938 ;; Defined at:
  1939 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  divisor         2    0[BANK0 ] unsigned int 
  1942 ;;  dividend        2    2[BANK0 ] unsigned int 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  counter         1    5[BANK0 ] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  2    0[BANK0 ] unsigned int 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       4       0       0       0
  1955 ;;      Locals:         0       1       0       0       0
  1956 ;;      Temps:          0       1       0       0       0
  1957 ;;      Totals:         0       6       0       0       0
  1958 ;;Total ram usage:        6 bytes
  1959 ;; Hardware stack levels used: 1
  1960 ;; Hardware stack levels required when called: 2
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_sprintf
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968  039C                     ___lwmod:	
  1969                           ;psect for function ___lwmod
  1970                           
  1971  039C                     l1768:	
  1972                           ;incstack = 0
  1973                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1974                           
  1975  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1976  039D  1303               	bcf	3,6	;RP1=0, select bank0
  1977  039E  0820               	movf	___lwmod@divisor,w
  1978  039F  0421               	iorwf	___lwmod@divisor+1,w
  1979  03A0  1903               	btfsc	3,2
  1980  03A1  2BA3               	goto	u1221
  1981  03A2  2BA4               	goto	u1220
  1982  03A3                     u1221:
  1983  03A3  2BD3               	goto	l1786
  1984  03A4                     u1220:
  1985  03A4                     l1770:
  1986  03A4  01A5               	clrf	___lwmod@counter
  1987  03A5  0AA5               	incf	___lwmod@counter,f
  1988  03A6  2BB2               	goto	l1776
  1989  03A7                     l1772:
  1990  03A7  3001               	movlw	1
  1991  03A8                     u1235:
  1992  03A8  1003               	clrc
  1993  03A9  0DA0               	rlf	___lwmod@divisor,f
  1994  03AA  0DA1               	rlf	___lwmod@divisor+1,f
  1995  03AB  3EFF               	addlw	-1
  1996  03AC  1D03               	skipz
  1997  03AD  2BA8               	goto	u1235
  1998  03AE                     l1774:
  1999  03AE  3001               	movlw	1
  2000  03AF  00A4               	movwf	??___lwmod
  2001  03B0  0824               	movf	??___lwmod,w
  2002  03B1  07A5               	addwf	___lwmod@counter,f
  2003  03B2                     l1776:
  2004  03B2  1FA1               	btfss	___lwmod@divisor+1,7
  2005  03B3  2BB5               	goto	u1241
  2006  03B4  2BB6               	goto	u1240
  2007  03B5                     u1241:
  2008  03B5  2BA7               	goto	l1772
  2009  03B6                     u1240:
  2010  03B6                     l1778:
  2011  03B6  0821               	movf	___lwmod@divisor+1,w
  2012  03B7  0223               	subwf	___lwmod@dividend+1,w
  2013  03B8  1D03               	skipz
  2014  03B9  2BBC               	goto	u1255
  2015  03BA  0820               	movf	___lwmod@divisor,w
  2016  03BB  0222               	subwf	___lwmod@dividend,w
  2017  03BC                     u1255:
  2018  03BC  1C03               	skipc
  2019  03BD  2BBF               	goto	u1251
  2020  03BE  2BC0               	goto	u1250
  2021  03BF                     u1251:
  2022  03BF  2BC6               	goto	l1782
  2023  03C0                     u1250:
  2024  03C0                     l1780:
  2025  03C0  0820               	movf	___lwmod@divisor,w
  2026  03C1  02A2               	subwf	___lwmod@dividend,f
  2027  03C2  0821               	movf	___lwmod@divisor+1,w
  2028  03C3  1C03               	skipc
  2029  03C4  03A3               	decf	___lwmod@dividend+1,f
  2030  03C5  02A3               	subwf	___lwmod@dividend+1,f
  2031  03C6                     l1782:
  2032  03C6  3001               	movlw	1
  2033  03C7                     u1265:
  2034  03C7  1003               	clrc
  2035  03C8  0CA1               	rrf	___lwmod@divisor+1,f
  2036  03C9  0CA0               	rrf	___lwmod@divisor,f
  2037  03CA  3EFF               	addlw	-1
  2038  03CB  1D03               	skipz
  2039  03CC  2BC7               	goto	u1265
  2040  03CD                     l1784:
  2041  03CD  3001               	movlw	1
  2042  03CE  02A5               	subwf	___lwmod@counter,f
  2043  03CF  1D03               	btfss	3,2
  2044  03D0  2BD2               	goto	u1271
  2045  03D1  2BD3               	goto	u1270
  2046  03D2                     u1271:
  2047  03D2  2BB6               	goto	l1778
  2048  03D3                     u1270:
  2049  03D3                     l1786:
  2050  03D3  0823               	movf	___lwmod@dividend+1,w
  2051  03D4  00A1               	movwf	?___lwmod+1
  2052  03D5  0822               	movf	___lwmod@dividend,w
  2053  03D6  00A0               	movwf	?___lwmod
  2054  03D7                     l571:
  2055  03D7  0008               	return
  2056  03D8                     __end_of___lwmod:
  2057                           
  2058                           	psect	text7
  2059  0358                     __ptext7:	
  2060 ;; *************** function ___lwdiv *****************
  2061 ;; Defined at:
  2062 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  divisor         2    2[COMMON] unsigned int 
  2065 ;;  dividend        2    4[COMMON] unsigned int 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  quotient        2    7[COMMON] unsigned int 
  2068 ;;  counter         1    9[COMMON] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  2    2[COMMON] unsigned int 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2078 ;;      Params:         4       0       0       0       0
  2079 ;;      Locals:         3       0       0       0       0
  2080 ;;      Temps:          1       0       0       0       0
  2081 ;;      Totals:         8       0       0       0       0
  2082 ;;Total ram usage:        8 bytes
  2083 ;; Hardware stack levels used: 1
  2084 ;; Hardware stack levels required when called: 2
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_sprintf
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092  0358                     ___lwdiv:	
  2093                           ;psect for function ___lwdiv
  2094                           
  2095  0358                     l1330:	
  2096                           ;incstack = 0
  2097                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2098                           
  2099  0358  01F7               	clrf	___lwdiv@quotient
  2100  0359  01F8               	clrf	___lwdiv@quotient+1
  2101  035A                     l1332:
  2102  035A  0872               	movf	___lwdiv@divisor,w
  2103  035B  0473               	iorwf	___lwdiv@divisor+1,w
  2104  035C  1903               	btfsc	3,2
  2105  035D  2B5F               	goto	u701
  2106  035E  2B60               	goto	u700
  2107  035F                     u701:
  2108  035F  2B97               	goto	l1352
  2109  0360                     u700:
  2110  0360                     l1334:
  2111  0360  01F9               	clrf	___lwdiv@counter
  2112  0361  0AF9               	incf	___lwdiv@counter,f
  2113  0362  2B6E               	goto	l1340
  2114  0363                     l1336:
  2115  0363  3001               	movlw	1
  2116  0364                     u715:
  2117  0364  1003               	clrc
  2118  0365  0DF2               	rlf	___lwdiv@divisor,f
  2119  0366  0DF3               	rlf	___lwdiv@divisor+1,f
  2120  0367  3EFF               	addlw	-1
  2121  0368  1D03               	skipz
  2122  0369  2B64               	goto	u715
  2123  036A                     l1338:
  2124  036A  3001               	movlw	1
  2125  036B  00F6               	movwf	??___lwdiv
  2126  036C  0876               	movf	??___lwdiv,w
  2127  036D  07F9               	addwf	___lwdiv@counter,f
  2128  036E                     l1340:
  2129  036E  1FF3               	btfss	___lwdiv@divisor+1,7
  2130  036F  2B71               	goto	u721
  2131  0370  2B72               	goto	u720
  2132  0371                     u721:
  2133  0371  2B63               	goto	l1336
  2134  0372                     u720:
  2135  0372                     l1342:
  2136  0372  3001               	movlw	1
  2137  0373                     u735:
  2138  0373  1003               	clrc
  2139  0374  0DF7               	rlf	___lwdiv@quotient,f
  2140  0375  0DF8               	rlf	___lwdiv@quotient+1,f
  2141  0376  3EFF               	addlw	-1
  2142  0377  1D03               	skipz
  2143  0378  2B73               	goto	u735
  2144  0379  0873               	movf	___lwdiv@divisor+1,w
  2145  037A  0275               	subwf	___lwdiv@dividend+1,w
  2146  037B  1D03               	skipz
  2147  037C  2B7F               	goto	u745
  2148  037D  0872               	movf	___lwdiv@divisor,w
  2149  037E  0274               	subwf	___lwdiv@dividend,w
  2150  037F                     u745:
  2151  037F  1C03               	skipc
  2152  0380  2B82               	goto	u741
  2153  0381  2B83               	goto	u740
  2154  0382                     u741:
  2155  0382  2B8A               	goto	l1348
  2156  0383                     u740:
  2157  0383                     l1344:
  2158  0383  0872               	movf	___lwdiv@divisor,w
  2159  0384  02F4               	subwf	___lwdiv@dividend,f
  2160  0385  0873               	movf	___lwdiv@divisor+1,w
  2161  0386  1C03               	skipc
  2162  0387  03F5               	decf	___lwdiv@dividend+1,f
  2163  0388  02F5               	subwf	___lwdiv@dividend+1,f
  2164  0389                     l1346:
  2165  0389  1477               	bsf	___lwdiv@quotient,0
  2166  038A                     l1348:
  2167  038A  3001               	movlw	1
  2168  038B                     u755:
  2169  038B  1003               	clrc
  2170  038C  0CF3               	rrf	___lwdiv@divisor+1,f
  2171  038D  0CF2               	rrf	___lwdiv@divisor,f
  2172  038E  3EFF               	addlw	-1
  2173  038F  1D03               	skipz
  2174  0390  2B8B               	goto	u755
  2175  0391                     l1350:
  2176  0391  3001               	movlw	1
  2177  0392  02F9               	subwf	___lwdiv@counter,f
  2178  0393  1D03               	btfss	3,2
  2179  0394  2B96               	goto	u761
  2180  0395  2B97               	goto	u760
  2181  0396                     u761:
  2182  0396  2B72               	goto	l1342
  2183  0397                     u760:
  2184  0397                     l1352:
  2185  0397  0878               	movf	___lwdiv@quotient+1,w
  2186  0398  00F3               	movwf	?___lwdiv+1
  2187  0399  0877               	movf	___lwdiv@quotient,w
  2188  039A  00F2               	movwf	?___lwdiv
  2189  039B                     l561:
  2190  039B  0008               	return
  2191  039C                     __end_of___lwdiv:
  2192                           
  2193                           	psect	text8
  2194  04E9                     __ptext8:	
  2195 ;; *************** function _Lcd_Write_String *****************
  2196 ;; Defined at:
  2197 ;;		line 96 in file "./lcd.h"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  a               1    wreg     PTR unsigned char 
  2200 ;;		 -> buffer(10), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  a               1    2[BANK0 ] PTR unsigned char 
  2203 ;;		 -> buffer(10), 
  2204 ;;  i               2    0[BANK0 ] int 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2214 ;;      Params:         0       0       0       0       0
  2215 ;;      Locals:         0       3       0       0       0
  2216 ;;      Temps:          1       0       0       0       0
  2217 ;;      Totals:         1       3       0       0       0
  2218 ;;Total ram usage:        4 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; Hardware stack levels required when called: 4
  2221 ;; This function calls:
  2222 ;;		_Lcd_Write_Char
  2223 ;; This function is called by:
  2224 ;;		_setCronometro
  2225 ;;		_setDQ
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229  04E9                     _Lcd_Write_String:	
  2230                           ;psect for function _Lcd_Write_String
  2231                           
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2235                           ;Lcd_Write_String@a stored from wreg
  2236  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2237  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2238  04EB  00A2               	movwf	Lcd_Write_String@a
  2239  04EC                     l1810:
  2240                           
  2241                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  2242  04EC  01A0               	clrf	Lcd_Write_String@i
  2243  04ED  01A1               	clrf	Lcd_Write_String@i+1
  2244  04EE  2D02               	goto	l1816
  2245  04EF                     l1812:
  2246                           
  2247                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  2248  04EF  0820               	movf	Lcd_Write_String@i,w
  2249  04F0  0722               	addwf	Lcd_Write_String@a,w
  2250  04F1  00F7               	movwf	??_Lcd_Write_String
  2251  04F2  0877               	movf	??_Lcd_Write_String,w
  2252  04F3  0084               	movwf	4
  2253  04F4  0800               	movf	0,w
  2254  04F5  120A  118A  23D8  120A  118A  	fcall	_Lcd_Write_Char
  2255  04FA                     l1814:
  2256  04FA  3001               	movlw	1
  2257  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2258  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2259  04FD  07A0               	addwf	Lcd_Write_String@i,f
  2260  04FE  1803               	skipnc
  2261  04FF  0AA1               	incf	Lcd_Write_String@i+1,f
  2262  0500  3000               	movlw	0
  2263  0501  07A1               	addwf	Lcd_Write_String@i+1,f
  2264  0502                     l1816:
  2265  0502  0820               	movf	Lcd_Write_String@i,w
  2266  0503  0722               	addwf	Lcd_Write_String@a,w
  2267  0504  00F7               	movwf	??_Lcd_Write_String
  2268  0505  0877               	movf	??_Lcd_Write_String,w
  2269  0506  0084               	movwf	4
  2270  0507  1383               	bcf	3,7	;select IRP bank0
  2271  0508  0800               	movf	0,w
  2272  0509  1D03               	btfss	3,2
  2273  050A  2D0C               	goto	u1321
  2274  050B  2D0D               	goto	u1320
  2275  050C                     u1321:
  2276  050C  2CEF               	goto	l1812
  2277  050D                     u1320:
  2278  050D                     l101:
  2279  050D  0008               	return
  2280  050E                     __end_of_Lcd_Write_String:
  2281                           
  2282                           	psect	text9
  2283  03D8                     __ptext9:	
  2284 ;; *************** function _Lcd_Write_Char *****************
  2285 ;; Defined at:
  2286 ;;		line 80 in file "./lcd.h"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  a               1    wreg     unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  a               1    6[COMMON] unsigned char 
  2291 ;;  y               1    5[COMMON] unsigned char 
  2292 ;;  temp            1    4[COMMON] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2302 ;;      Params:         0       0       0       0       0
  2303 ;;      Locals:         3       0       0       0       0
  2304 ;;      Temps:          1       0       0       0       0
  2305 ;;      Totals:         4       0       0       0       0
  2306 ;;Total ram usage:        4 bytes
  2307 ;; Hardware stack levels used: 1
  2308 ;; Hardware stack levels required when called: 3
  2309 ;; This function calls:
  2310 ;;		_Lcd_Port
  2311 ;; This function is called by:
  2312 ;;		_Lcd_Write_String
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316  03D8                     _Lcd_Write_Char:	
  2317                           ;psect for function _Lcd_Write_Char
  2318                           
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2322                           ;Lcd_Write_Char@a stored from wreg
  2323  03D8  00F6               	movwf	Lcd_Write_Char@a
  2324  03D9                     l1748:
  2325                           
  2326                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2327  03D9  0876               	movf	Lcd_Write_Char@a,w
  2328  03DA  390F               	andlw	15
  2329  03DB  00F3               	movwf	??_Lcd_Write_Char
  2330  03DC  0873               	movf	??_Lcd_Write_Char,w
  2331  03DD  00F4               	movwf	Lcd_Write_Char@temp
  2332                           
  2333                           ;./lcd.h: 84:    y = a&0xF0;
  2334  03DE  0876               	movf	Lcd_Write_Char@a,w
  2335  03DF  39F0               	andlw	240
  2336  03E0  00F3               	movwf	??_Lcd_Write_Char
  2337  03E1  0873               	movf	??_Lcd_Write_Char,w
  2338  03E2  00F5               	movwf	Lcd_Write_Char@y
  2339  03E3                     l1750:
  2340                           
  2341                           ;./lcd.h: 85:    RD2 = 1;
  2342  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2343  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2344  03E5  1508               	bsf	8,2	;volatile
  2345  03E6                     l1752:
  2346                           
  2347                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2348  03E6  0875               	movf	Lcd_Write_Char@y,w
  2349  03E7  00F3               	movwf	??_Lcd_Write_Char
  2350  03E8  3004               	movlw	4
  2351  03E9                     u1215:
  2352  03E9  1003               	clrc
  2353  03EA  0CF3               	rrf	??_Lcd_Write_Char,f
  2354  03EB  3EFF               	addlw	-1
  2355  03EC  1D03               	skipz
  2356  03ED  2BE9               	goto	u1215
  2357  03EE  0873               	movf	??_Lcd_Write_Char,w
  2358  03EF  120A  118A  250E  120A  118A  	fcall	_Lcd_Port
  2359  03F4                     l1754:
  2360                           
  2361                           ;./lcd.h: 87:    RD3 = 1;
  2362  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  2363  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  2364  03F6  1588               	bsf	8,3	;volatile
  2365  03F7                     l1756:
  2366                           
  2367                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2368  03F7  3042               	movlw	66
  2369  03F8  00F3               	movwf	??_Lcd_Write_Char
  2370  03F9                     u1597:
  2371  03F9  0BF3               	decfsz	??_Lcd_Write_Char,f
  2372  03FA  2BF9               	goto	u1597
  2373  03FB  0000               	nop
  2374  03FC                     l1758:
  2375                           
  2376                           ;./lcd.h: 89:    RD3 = 0;
  2377  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  2378  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  2379  03FE  1188               	bcf	8,3	;volatile
  2380  03FF                     l1760:
  2381                           
  2382                           ;./lcd.h: 90:    Lcd_Port(temp);
  2383  03FF  0874               	movf	Lcd_Write_Char@temp,w
  2384  0400  120A  118A  250E  120A  118A  	fcall	_Lcd_Port
  2385  0405                     l1762:
  2386                           
  2387                           ;./lcd.h: 91:    RD3 = 1;
  2388  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0406  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0407  1588               	bsf	8,3	;volatile
  2391  0408                     l1764:
  2392                           
  2393                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2394  0408  3042               	movlw	66
  2395  0409  00F3               	movwf	??_Lcd_Write_Char
  2396  040A                     u1607:
  2397  040A  0BF3               	decfsz	??_Lcd_Write_Char,f
  2398  040B  2C0A               	goto	u1607
  2399  040C  0000               	nop
  2400  040D                     l1766:
  2401                           
  2402                           ;./lcd.h: 93:    RD3 = 0;
  2403  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2404  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2405  040F  1188               	bcf	8,3	;volatile
  2406  0410                     l95:
  2407  0410  0008               	return
  2408  0411                     __end_of_Lcd_Write_Char:
  2409                           
  2410                           	psect	text10
  2411  0300                     __ptext10:	
  2412 ;; *************** function _Lcd_Set_Cursor *****************
  2413 ;; Defined at:
  2414 ;;		line 40 in file "./lcd.h"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  a               1    wreg     unsigned char 
  2417 ;;  b               1    6[COMMON] unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  a               1    0[BANK0 ] unsigned char 
  2420 ;;  temp            1    3[BANK0 ] unsigned char 
  2421 ;;  y               1    2[BANK0 ] unsigned char 
  2422 ;;  z               1    1[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2, status,0, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         1       0       0       0       0
  2433 ;;      Locals:         0       4       0       0       0
  2434 ;;      Temps:          2       0       0       0       0
  2435 ;;      Totals:         3       4       0       0       0
  2436 ;;Total ram usage:        7 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 4
  2439 ;; This function calls:
  2440 ;;		_Lcd_Cmd
  2441 ;; This function is called by:
  2442 ;;		_setCronometro
  2443 ;;		_setDQ
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447  0300                     _Lcd_Set_Cursor:	
  2448                           ;psect for function _Lcd_Set_Cursor
  2449                           
  2450                           
  2451                           ;incstack = 0
  2452                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2453                           ;Lcd_Set_Cursor@a stored from wreg
  2454  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0302  00A0               	movwf	Lcd_Set_Cursor@a
  2457  0303                     l1790:
  2458                           
  2459                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2460  0303  0320               	decf	Lcd_Set_Cursor@a,w
  2461  0304  1D03               	btfss	3,2
  2462  0305  2B07               	goto	u1281
  2463  0306  2B08               	goto	u1280
  2464  0307                     u1281:
  2465  0307  2B2D               	goto	l1800
  2466  0308                     u1280:
  2467  0308                     l1792:
  2468                           
  2469                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2470  0308  0876               	movf	Lcd_Set_Cursor@b,w
  2471  0309  3E7F               	addlw	127
  2472  030A  00F7               	movwf	??_Lcd_Set_Cursor
  2473  030B  0877               	movf	??_Lcd_Set_Cursor,w
  2474  030C  00A3               	movwf	Lcd_Set_Cursor@temp
  2475                           
  2476                           ;./lcd.h: 46:   z = temp>>4;
  2477  030D  0823               	movf	Lcd_Set_Cursor@temp,w
  2478  030E  00F7               	movwf	??_Lcd_Set_Cursor
  2479  030F  3004               	movlw	4
  2480  0310                     u1295:
  2481  0310  1003               	clrc
  2482  0311  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2483  0312  3EFF               	addlw	-1
  2484  0313  1D03               	skipz
  2485  0314  2B10               	goto	u1295
  2486  0315  0877               	movf	??_Lcd_Set_Cursor,w
  2487  0316  00F8               	movwf	??_Lcd_Set_Cursor+1
  2488  0317  0878               	movf	??_Lcd_Set_Cursor+1,w
  2489  0318  00A1               	movwf	Lcd_Set_Cursor@z
  2490  0319                     l1794:
  2491                           
  2492                           ;./lcd.h: 47:   y = temp & 0x0F;
  2493  0319  0823               	movf	Lcd_Set_Cursor@temp,w
  2494  031A  390F               	andlw	15
  2495  031B  00F7               	movwf	??_Lcd_Set_Cursor
  2496  031C  0877               	movf	??_Lcd_Set_Cursor,w
  2497  031D  00A2               	movwf	Lcd_Set_Cursor@y
  2498  031E                     l1796:
  2499                           
  2500                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2501  031E  0821               	movf	Lcd_Set_Cursor@z,w
  2502  031F  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2503  0324                     l1798:
  2504                           
  2505                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2506  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0326  0822               	movf	Lcd_Set_Cursor@y,w
  2509  0327  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2510                           
  2511                           ;./lcd.h: 50:  }
  2512  032C  2B57               	goto	l89
  2513  032D                     l1800:
  2514  032D  3002               	movlw	2
  2515  032E  0620               	xorwf	Lcd_Set_Cursor@a,w
  2516  032F  1D03               	btfss	3,2
  2517  0330  2B32               	goto	u1301
  2518  0331  2B33               	goto	u1300
  2519  0332                     u1301:
  2520  0332  2B57               	goto	l89
  2521  0333                     u1300:
  2522  0333                     l1802:
  2523                           
  2524                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2525  0333  0876               	movf	Lcd_Set_Cursor@b,w
  2526  0334  3EBF               	addlw	191
  2527  0335  00F7               	movwf	??_Lcd_Set_Cursor
  2528  0336  0877               	movf	??_Lcd_Set_Cursor,w
  2529  0337  00A3               	movwf	Lcd_Set_Cursor@temp
  2530                           
  2531                           ;./lcd.h: 54:   z = temp>>4;
  2532  0338  0823               	movf	Lcd_Set_Cursor@temp,w
  2533  0339  00F7               	movwf	??_Lcd_Set_Cursor
  2534  033A  3004               	movlw	4
  2535  033B                     u1315:
  2536  033B  1003               	clrc
  2537  033C  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2538  033D  3EFF               	addlw	-1
  2539  033E  1D03               	skipz
  2540  033F  2B3B               	goto	u1315
  2541  0340  0877               	movf	??_Lcd_Set_Cursor,w
  2542  0341  00F8               	movwf	??_Lcd_Set_Cursor+1
  2543  0342  0878               	movf	??_Lcd_Set_Cursor+1,w
  2544  0343  00A1               	movwf	Lcd_Set_Cursor@z
  2545  0344                     l1804:
  2546                           
  2547                           ;./lcd.h: 55:   y = temp & 0x0F;
  2548  0344  0823               	movf	Lcd_Set_Cursor@temp,w
  2549  0345  390F               	andlw	15
  2550  0346  00F7               	movwf	??_Lcd_Set_Cursor
  2551  0347  0877               	movf	??_Lcd_Set_Cursor,w
  2552  0348  00A2               	movwf	Lcd_Set_Cursor@y
  2553  0349                     l1806:
  2554                           
  2555                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2556  0349  0821               	movf	Lcd_Set_Cursor@z,w
  2557  034A  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2558  034F                     l1808:
  2559                           
  2560                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2561  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0351  0822               	movf	Lcd_Set_Cursor@y,w
  2564  0352  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2565  0357                     l89:
  2566  0357  0008               	return
  2567  0358                     __end_of_Lcd_Set_Cursor:
  2568                           
  2569                           	psect	text11
  2570  02A2                     __ptext11:	
  2571 ;; *************** function _Lcd_Init *****************
  2572 ;; Defined at:
  2573 ;;		line 61 in file "./lcd.h"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0, pclath, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2587 ;;      Params:         0       0       0       0       0
  2588 ;;      Locals:         0       0       0       0       0
  2589 ;;      Temps:          2       0       0       0       0
  2590 ;;      Totals:         2       0       0       0       0
  2591 ;;Total ram usage:        2 bytes
  2592 ;; Hardware stack levels used: 1
  2593 ;; Hardware stack levels required when called: 4
  2594 ;; This function calls:
  2595 ;;		_Lcd_Cmd
  2596 ;;		_Lcd_Port
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602  02A2                     _Lcd_Init:	
  2603                           ;psect for function _Lcd_Init
  2604                           
  2605  02A2                     l1938:	
  2606                           ;incstack = 0
  2607                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2608                           
  2609                           
  2610                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2611  02A2  3000               	movlw	0
  2612  02A3  120A  118A  250E  120A  118A  	fcall	_Lcd_Port
  2613  02A8                     l1940:
  2614                           
  2615                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2616  02A8  3082               	movlw	130
  2617  02A9  00F7               	movwf	??_Lcd_Init+1
  2618  02AA  30DD               	movlw	221
  2619  02AB  00F6               	movwf	??_Lcd_Init
  2620  02AC                     u1617:
  2621  02AC  0BF6               	decfsz	??_Lcd_Init,f
  2622  02AD  2AAC               	goto	u1617
  2623  02AE  0BF7               	decfsz	??_Lcd_Init+1,f
  2624  02AF  2AAC               	goto	u1617
  2625  02B0  2AB1               	nop2
  2626  02B1                     l1942:
  2627                           
  2628                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2629  02B1  3003               	movlw	3
  2630  02B2  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2631                           
  2632                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2633  02B7  3021               	movlw	33
  2634  02B8  00F7               	movwf	??_Lcd_Init+1
  2635  02B9  3076               	movlw	118
  2636  02BA  00F6               	movwf	??_Lcd_Init
  2637  02BB                     u1627:
  2638  02BB  0BF6               	decfsz	??_Lcd_Init,f
  2639  02BC  2ABB               	goto	u1627
  2640  02BD  0BF7               	decfsz	??_Lcd_Init+1,f
  2641  02BE  2ABB               	goto	u1627
  2642  02BF  0000               	nop
  2643  02C0                     l1944:
  2644                           
  2645                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2646  02C0  3003               	movlw	3
  2647  02C1  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2648  02C6                     l1946:
  2649                           
  2650                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2651  02C6  3048               	movlw	72
  2652  02C7  00F7               	movwf	??_Lcd_Init+1
  2653  02C8  306C               	movlw	108
  2654  02C9  00F6               	movwf	??_Lcd_Init
  2655  02CA                     u1637:
  2656  02CA  0BF6               	decfsz	??_Lcd_Init,f
  2657  02CB  2ACA               	goto	u1637
  2658  02CC  0BF7               	decfsz	??_Lcd_Init+1,f
  2659  02CD  2ACA               	goto	u1637
  2660  02CE  0000               	nop
  2661                           
  2662                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2663  02CF  3003               	movlw	3
  2664  02D0  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2665                           
  2666                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2667  02D5  3002               	movlw	2
  2668  02D6  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2669                           
  2670                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2671  02DB  3002               	movlw	2
  2672  02DC  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2673                           
  2674                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2675  02E1  3008               	movlw	8
  2676  02E2  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2677                           
  2678                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2679  02E7  3000               	movlw	0
  2680  02E8  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2681                           
  2682                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2683  02ED  300C               	movlw	12
  2684  02EE  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2685                           
  2686                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2687  02F3  3000               	movlw	0
  2688  02F4  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2689                           
  2690                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2691  02F9  3006               	movlw	6
  2692  02FA  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2693  02FF                     l92:
  2694  02FF  0008               	return
  2695  0300                     __end_of_Lcd_Init:
  2696                           
  2697                           	psect	text12
  2698  0577                     __ptext12:	
  2699 ;; *************** function _Lcd_Clear *****************
  2700 ;; Defined at:
  2701 ;;		line 34 in file "./lcd.h"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  2   82[None  ] int 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0, pclath, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2715 ;;      Params:         0       0       0       0       0
  2716 ;;      Locals:         0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0
  2718 ;;      Totals:         0       0       0       0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels used: 1
  2721 ;; Hardware stack levels required when called: 4
  2722 ;; This function calls:
  2723 ;;		_Lcd_Cmd
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729  0577                     _Lcd_Clear:	
  2730                           ;psect for function _Lcd_Clear
  2731                           
  2732  0577                     l1936:	
  2733                           ;incstack = 0
  2734                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2735                           
  2736                           
  2737                           ;./lcd.h: 36:  Lcd_Cmd(0);
  2738  0577  3000               	movlw	0
  2739  0578  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2740                           
  2741                           ;./lcd.h: 37:  Lcd_Cmd(1);
  2742  057D  3001               	movlw	1
  2743  057E  120A  118A  254B  120A  118A  	fcall	_Lcd_Cmd
  2744  0583                     l83:
  2745  0583  0008               	return
  2746  0584                     __end_of_Lcd_Clear:
  2747                           
  2748                           	psect	text13
  2749  054B                     __ptext13:	
  2750 ;; *************** function _Lcd_Cmd *****************
  2751 ;; Defined at:
  2752 ;;		line 25 in file "./lcd.h"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  a               1    wreg     unsigned char 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  a               1    5[COMMON] unsigned char 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      void 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0, pclath, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2766 ;;      Params:         0       0       0       0       0
  2767 ;;      Locals:         1       0       0       0       0
  2768 ;;      Temps:          2       0       0       0       0
  2769 ;;      Totals:         3       0       0       0       0
  2770 ;;Total ram usage:        3 bytes
  2771 ;; Hardware stack levels used: 1
  2772 ;; Hardware stack levels required when called: 3
  2773 ;; This function calls:
  2774 ;;		_Lcd_Port
  2775 ;; This function is called by:
  2776 ;;		_Lcd_Clear
  2777 ;;		_Lcd_Set_Cursor
  2778 ;;		_Lcd_Init
  2779 ;;		_Lcd_Shift_Right
  2780 ;;		_Lcd_Shift_Left
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784  054B                     _Lcd_Cmd:	
  2785                           ;psect for function _Lcd_Cmd
  2786                           
  2787                           
  2788                           ;incstack = 0
  2789                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2790                           ;Lcd_Cmd@a stored from wreg
  2791  054B  00F5               	movwf	Lcd_Cmd@a
  2792  054C                     l1738:
  2793                           
  2794                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2795  054C  1283               	bcf	3,5	;RP0=0, select bank0
  2796  054D  1303               	bcf	3,6	;RP1=0, select bank0
  2797  054E  1108               	bcf	8,2	;volatile
  2798  054F                     l1740:
  2799                           
  2800                           ;./lcd.h: 28:  Lcd_Port(a);
  2801  054F  0875               	movf	Lcd_Cmd@a,w
  2802  0550  120A  118A  250E  120A  118A  	fcall	_Lcd_Port
  2803  0555                     l1742:
  2804                           
  2805                           ;./lcd.h: 29:  RD3 = 1;
  2806  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2808  0557  1588               	bsf	8,3	;volatile
  2809  0558                     l1744:
  2810                           
  2811                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2812  0558  301A               	movlw	26
  2813  0559  00F4               	movwf	??_Lcd_Cmd+1
  2814  055A  30F8               	movlw	248
  2815  055B  00F3               	movwf	??_Lcd_Cmd
  2816  055C                     u1647:
  2817  055C  0BF3               	decfsz	??_Lcd_Cmd,f
  2818  055D  2D5C               	goto	u1647
  2819  055E  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2820  055F  2D5C               	goto	u1647
  2821  0560  0000               	nop
  2822  0561                     l1746:
  2823                           
  2824                           ;./lcd.h: 31:         RD3 = 0;
  2825  0561  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0562  1303               	bcf	3,6	;RP1=0, select bank0
  2827  0563  1188               	bcf	8,3	;volatile
  2828  0564                     l80:
  2829  0564  0008               	return
  2830  0565                     __end_of_Lcd_Cmd:
  2831                           
  2832                           	psect	text14
  2833  050E                     __ptext14:	
  2834 ;; *************** function _Lcd_Port *****************
  2835 ;; Defined at:
  2836 ;;		line 3 in file "./lcd.h"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  a               1    wreg     unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  a               1    2[COMMON] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2850 ;;      Params:         0       0       0       0       0
  2851 ;;      Locals:         1       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0
  2853 ;;      Totals:         1       0       0       0       0
  2854 ;;Total ram usage:        1 bytes
  2855 ;; Hardware stack levels used: 1
  2856 ;; Hardware stack levels required when called: 2
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_Lcd_Cmd
  2861 ;;		_Lcd_Init
  2862 ;;		_Lcd_Write_Char
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866  050E                     _Lcd_Port:	
  2867                           ;psect for function _Lcd_Port
  2868                           
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _Lcd_Port: [wreg]
  2872                           ;Lcd_Port@a stored from wreg
  2873  050E  00F2               	movwf	Lcd_Port@a
  2874  050F                     l1728:
  2875                           
  2876                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2877  050F  1C72               	btfss	Lcd_Port@a,0
  2878  0510  2D12               	goto	u1171
  2879  0511  2D13               	goto	u1170
  2880  0512                     u1171:
  2881  0512  2D17               	goto	l69
  2882  0513                     u1170:
  2883  0513                     l1730:
  2884                           
  2885                           ;./lcd.h: 6:   RD4 = 1;
  2886  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0515  1608               	bsf	8,4	;volatile
  2889  0516  2D1A               	goto	l70
  2890  0517                     l69:	
  2891                           ;./lcd.h: 7:  else
  2892                           
  2893                           
  2894                           ;./lcd.h: 8:   RD4 = 0;
  2895  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0519  1208               	bcf	8,4	;volatile
  2898  051A                     l70:
  2899                           
  2900                           ;./lcd.h: 10:  if(a & 2)
  2901  051A  1CF2               	btfss	Lcd_Port@a,1
  2902  051B  2D1D               	goto	u1181
  2903  051C  2D1E               	goto	u1180
  2904  051D                     u1181:
  2905  051D  2D20               	goto	l71
  2906  051E                     u1180:
  2907  051E                     l1732:
  2908                           
  2909                           ;./lcd.h: 11:   RD5 = 1;
  2910  051E  1688               	bsf	8,5	;volatile
  2911  051F  2D21               	goto	l72
  2912  0520                     l71:	
  2913                           ;./lcd.h: 12:  else
  2914                           
  2915                           
  2916                           ;./lcd.h: 13:   RD5 = 0;
  2917  0520  1288               	bcf	8,5	;volatile
  2918  0521                     l72:
  2919                           
  2920                           ;./lcd.h: 15:  if(a & 4)
  2921  0521  1D72               	btfss	Lcd_Port@a,2
  2922  0522  2D24               	goto	u1191
  2923  0523  2D25               	goto	u1190
  2924  0524                     u1191:
  2925  0524  2D27               	goto	l73
  2926  0525                     u1190:
  2927  0525                     l1734:
  2928                           
  2929                           ;./lcd.h: 16:   RD6 = 1;
  2930  0525  1708               	bsf	8,6	;volatile
  2931  0526  2D28               	goto	l74
  2932  0527                     l73:	
  2933                           ;./lcd.h: 17:  else
  2934                           
  2935                           
  2936                           ;./lcd.h: 18:   RD6 = 0;
  2937  0527  1308               	bcf	8,6	;volatile
  2938  0528                     l74:
  2939                           
  2940                           ;./lcd.h: 20:  if(a & 8)
  2941  0528  1DF2               	btfss	Lcd_Port@a,3
  2942  0529  2D2B               	goto	u1201
  2943  052A  2D2C               	goto	u1200
  2944  052B                     u1201:
  2945  052B  2D2E               	goto	l75
  2946  052C                     u1200:
  2947  052C                     l1736:
  2948                           
  2949                           ;./lcd.h: 21:   RD7 = 1;
  2950  052C  1788               	bsf	8,7	;volatile
  2951  052D  2D2F               	goto	l77
  2952  052E                     l75:	
  2953                           ;./lcd.h: 22:  else
  2954                           
  2955                           
  2956                           ;./lcd.h: 23:   RD7 = 0;
  2957  052E  1388               	bcf	8,7	;volatile
  2958  052F                     l77:
  2959  052F  0008               	return
  2960  0530                     __end_of_Lcd_Port:
  2961                           
  2962                           	psect	text15
  2963  0472                     __ptext15:	
  2964 ;; *************** function _ContaSegundos *****************
  2965 ;; Defined at:
  2966 ;;		line 168 in file "main.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, status,0, pclath, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2980 ;;      Params:         0       0       0       0       0
  2981 ;;      Locals:         0       0       0       0       0
  2982 ;;      Temps:          2       0       0       0       0
  2983 ;;      Totals:         2       0       0       0       0
  2984 ;;Total ram usage:        2 bytes
  2985 ;; Hardware stack levels used: 1
  2986 ;; Hardware stack levels required when called: 1
  2987 ;; This function calls:
  2988 ;;		_cronometro
  2989 ;; This function is called by:
  2990 ;;		Interrupt level 1
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994  0472                     _ContaSegundos:	
  2995                           ;psect for function _ContaSegundos
  2996                           
  2997  0472                     i1l1672:
  2998                           
  2999                           ;main.c: 170:     if(TMR1IF)
  3000  0472  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0473  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0474  1C0C               	btfss	12,0	;volatile
  3003  0475  2C77               	goto	u115_21
  3004  0476  2C78               	goto	u115_20
  3005  0477                     u115_21:
  3006  0477  2C96               	goto	i1l140
  3007  0478                     u115_20:
  3008  0478                     i1l1674:
  3009                           
  3010                           ;main.c: 171:     {;main.c: 172:         PIR1bits.TMR1IF = 0;
  3011  0478  100C               	bcf	12,0	;volatile
  3012  0479                     i1l1676:
  3013                           
  3014                           ;main.c: 173:         TMR1L = 0x95;
  3015  0479  3095               	movlw	149
  3016  047A  008E               	movwf	14	;volatile
  3017                           
  3018                           ;main.c: 174:         TMR1H = 0xE7;
  3019  047B  30E7               	movlw	231
  3020  047C  008F               	movwf	15	;volatile
  3021  047D                     i1l1678:
  3022                           
  3023                           ;main.c: 177:         cronometro();
  3024  047D  120A  118A  2442  120A  118A  	fcall	_cronometro
  3025  0482                     i1l1680:
  3026                           
  3027                           ;main.c: 179:         contador++;
  3028  0482  3001               	movlw	1
  3029  0483  07FA               	addwf	_contador,f
  3030  0484  1803               	skipnc
  3031  0485  0AFB               	incf	_contador+1,f
  3032  0486  3000               	movlw	0
  3033  0487  07FB               	addwf	_contador+1,f
  3034  0488                     i1l1682:
  3035                           
  3036                           ;main.c: 180:         if(contador == 100)
  3037  0488  3064               	movlw	100
  3038  0489  067A               	xorwf	_contador,w
  3039  048A  047B               	iorwf	_contador+1,w
  3040  048B  1D03               	btfss	3,2
  3041  048C  2C8E               	goto	u116_21
  3042  048D  2C8F               	goto	u116_20
  3043  048E                     u116_21:
  3044  048E  2C96               	goto	i1l140
  3045  048F                     u116_20:
  3046  048F                     i1l1684:
  3047                           
  3048                           ;main.c: 181:         {;main.c: 182:             cronometro();
  3049  048F  120A  118A  2442  120A  118A  	fcall	_cronometro
  3050  0494                     i1l1686:
  3051                           
  3052                           ;main.c: 183:             contador = 0;
  3053  0494  01FA               	clrf	_contador
  3054  0495  01FB               	clrf	_contador+1
  3055  0496                     i1l140:
  3056  0496  0871               	movf	??_ContaSegundos+1,w
  3057  0497  008A               	movwf	10
  3058  0498  0E70               	swapf	??_ContaSegundos,w
  3059  0499  0083               	movwf	3
  3060  049A  0EFE               	swapf	btemp,f
  3061  049B  0E7E               	swapf	btemp,w
  3062  049C  0009               	retfie
  3063  049D                     __end_of_ContaSegundos:
  3064                           
  3065                           	psect	intentry
  3066  0004                     __pintentry:	
  3067                           ;incstack = 0
  3068                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  3069                           
  3070  0004                     interrupt_function:
  3071  007E                     saved_w	set	btemp
  3072  0004  00FE               	movwf	btemp
  3073  0005  0E03               	swapf	3,w
  3074  0006  00F0               	movwf	??_ContaSegundos
  3075  0007  080A               	movf	10,w
  3076  0008  00F1               	movwf	??_ContaSegundos+1
  3077  0009  120A  118A  2C72   	ljmp	_ContaSegundos
  3078                           
  3079                           	psect	text16
  3080  0442                     __ptext16:	
  3081 ;; *************** function _cronometro *****************
  3082 ;; Defined at:
  3083 ;;		line 202 in file "main.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0       0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0
  3100 ;;      Totals:         0       0       0       0       0
  3101 ;;Total ram usage:        0 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_ContaSegundos
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110  0442                     _cronometro:	
  3111                           ;psect for function _cronometro
  3112                           
  3113  0442                     i1l1548:	
  3114                           ;incstack = 0
  3115                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  3116                           
  3117                           
  3118                           ;main.c: 204:     centesimos++;
  3119  0442  3001               	movlw	1
  3120  0443  1283               	bcf	3,5	;RP0=0, select bank0
  3121  0444  1303               	bcf	3,6	;RP1=0, select bank0
  3122  0445  07BF               	addwf	_centesimos,f
  3123  0446  1803               	skipnc
  3124  0447  0AC0               	incf	_centesimos+1,f
  3125  0448  3000               	movlw	0
  3126  0449  07C0               	addwf	_centesimos+1,f
  3127  044A                     i1l1550:
  3128                           
  3129                           ;main.c: 206:     if(centesimos == 100)
  3130  044A  3064               	movlw	100
  3131  044B  063F               	xorwf	_centesimos,w
  3132  044C  0440               	iorwf	_centesimos+1,w
  3133  044D  1D03               	btfss	3,2
  3134  044E  2C50               	goto	u106_21
  3135  044F  2C51               	goto	u106_20
  3136  0450                     u106_21:
  3137  0450  2C71               	goto	i1l152
  3138  0451                     u106_20:
  3139  0451                     i1l1552:
  3140                           
  3141                           ;main.c: 207:     {;main.c: 208:         centesimos = 0;
  3142  0451  01BF               	clrf	_centesimos
  3143  0452  01C0               	clrf	_centesimos+1
  3144  0453                     i1l1554:
  3145                           
  3146                           ;main.c: 209:         segundos++;
  3147  0453  3001               	movlw	1
  3148  0454  07C1               	addwf	_segundos,f
  3149  0455  1803               	skipnc
  3150  0456  0AC2               	incf	_segundos+1,f
  3151  0457  3000               	movlw	0
  3152  0458  07C2               	addwf	_segundos+1,f
  3153  0459                     i1l1556:
  3154                           
  3155                           ;main.c: 211:         if(segundos == 60)
  3156  0459  303C               	movlw	60
  3157  045A  0641               	xorwf	_segundos,w
  3158  045B  0442               	iorwf	_segundos+1,w
  3159  045C  1D03               	btfss	3,2
  3160  045D  2C5F               	goto	u107_21
  3161  045E  2C60               	goto	u107_20
  3162  045F                     u107_21:
  3163  045F  2C71               	goto	i1l152
  3164  0460                     u107_20:
  3165  0460                     i1l1558:
  3166                           
  3167                           ;main.c: 212:         {;main.c: 213:            segundos = 0;
  3168  0460  01C1               	clrf	_segundos
  3169  0461  01C2               	clrf	_segundos+1
  3170  0462                     i1l1560:
  3171                           
  3172                           ;main.c: 214:            minutos++;
  3173  0462  3001               	movlw	1
  3174  0463  07C3               	addwf	_minutos,f
  3175  0464  1803               	skipnc
  3176  0465  0AC4               	incf	_minutos+1,f
  3177  0466  3000               	movlw	0
  3178  0467  07C4               	addwf	_minutos+1,f
  3179  0468                     i1l1562:
  3180                           
  3181                           ;main.c: 216:            if(minutos == 60) minutos = 0;
  3182  0468  303C               	movlw	60
  3183  0469  0643               	xorwf	_minutos,w
  3184  046A  0444               	iorwf	_minutos+1,w
  3185  046B  1D03               	btfss	3,2
  3186  046C  2C6E               	goto	u108_21
  3187  046D  2C6F               	goto	u108_20
  3188  046E                     u108_21:
  3189  046E  2C71               	goto	i1l152
  3190  046F                     u108_20:
  3191  046F                     i1l1564:
  3192  046F  01C3               	clrf	_minutos
  3193  0470  01C4               	clrf	_minutos+1
  3194  0471                     i1l152:
  3195  0471  0008               	return
  3196  0472                     __end_of_cronometro:
  3197  007E                     btemp	set	126	;btemp
  3198  007E                     wtemp0	set	126
  3199                           
  3200                           	psect	config
  3201                           
  3202                           ;Config register CONFIG @ 0x2007
  3203                           ;	Oscillator Selection bits
  3204                           ;	FOSC = HS, HS oscillator
  3205                           ;	Watchdog Timer Enable bit
  3206                           ;	WDTE = ON, WDT enabled
  3207                           ;	Power-up Timer Enable bit
  3208                           ;	PWRTE = ON, PWRT enabled
  3209                           ;	Brown-out Reset Enable bit
  3210                           ;	BOREN = ON, BOR enabled
  3211                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3212                           ;	LVP = 0x1, unprogrammed default
  3213                           ;	Data EEPROM Memory Code Protection bit
  3214                           ;	CPD = 0x1, unprogrammed default
  3215                           ;	Flash Program Memory Write Enable bits
  3216                           ;	WRT = 0x3, unprogrammed default
  3217                           ;	In-Circuit Debugger Mode bit
  3218                           ;	DEBUG = 0x1, unprogrammed default
  3219                           ;	Flash Program Memory Code Protection bit
  3220                           ;	CP = 0x1, unprogrammed default
  3221  2007                     	org	8199
  3222  2007  3FF6               	dw	16374

Data Sizes:
    Strings     33
    Constant    10
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     29      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[10]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _main->_setDQ
    _setDQ->_sprintf
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8024
                                             26 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                      _setCronometro
                              _setDQ
 ---------------------------------------------------------------------------------
 (1) _setDQ                                                1     1      0    3795
                                             25 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3795
                                             25 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2614
                                              6 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     456
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     254
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     725
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     155
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setDQ
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _sprintf

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3B      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 09 15:24:48 2022

                       pc 0002                        l70 051A                        l71 0520  
                      l72 0521                        l80 0564                        l73 0527  
                      l74 0528                        l75 052E                        l83 0583  
                      l92 02FF                        l77 052F                        l69 0517  
                      l95 0410                        l89 0357                        fsr 0004  
     ___wmul@multiplicand 0074                       l101 050D                       l124 0225  
                     l143 04C3                       l250 003C                       l146 054A  
                     l291 04E8                       l268 0116                       l285 01F1  
                     l561 039B                       l289 04D0                       l571 03D7  
                     l742 0576                       _RB0 0030                       _RB1 0031  
                     _RC0 0038                       _RB2 0032                       _RC2 003A  
                     _RC3 003B                       _RD2 0042                       _RD3 0043  
                     _RD4 0044                       _RD5 0045                       _RD6 0046  
                     _RD7 0047                       u700 0360                       u701 035F  
                     u720 0372                       u640 056D                       u721 0371  
                     u641 056C                       u650 0573                       u715 0364  
                     u651 0572                       u740 0383                       u660 04CA  
                     u741 0382                       u661 04C9                       u735 0373  
                     u760 0397                       u761 0396                       u745 037F  
                     u690 04E4                       u755 038B                       u691 04E3  
                     u675 04D1                       u685 04D8                       fsr0 0004  
                     indf 0000                      l2000 0213                      l2010 021A  
                    l2002 0214                      l2020 022F                      l2012 021B  
                    l2004 0217                      l1310 0573                      l2030 0246  
                    l2022 023D                      l2014 0220                      l2006 0218  
                    l1320 04CA                      l1312 0575                      l1304 0566  
                    l2040 0251                      l2032 024B                      l2024 0240  
                    l2016 0226                      l2008 0219                      l1330 0358  
                    l1322 04D7                      l1306 0567                      l2106 004F  
                    l2050 026F                      l2042 0258                      l2034 024E  
                    l2018 022C                      l2026 0241                      l1340 036E  
                    l1332 035A                      l1324 04DE                      l1316 04C4  
                    l1308 056D                      l2108 00B8                      l2060 028E  
                    l2052 027C                      l2044 0261                      l2036 024F  
                    l2028 0245                      l1350 0391                      l1342 0372  
                    l1334 0360                      l1326 04E4                      l1318 04C6  
                    l2062 0294                      l2054 027F                      l2046 0267  
                    l2038 0250                      l1344 0383                      l1336 0363  
                    l1352 0397                      l2064 0299                      l2056 0284  
                    l2048 0269                      l1346 0389                      l1338 036A  
                    l2058 028A                      l1348 038A                      l1800 032D  
                    l1730 0513                      l1802 0333                      l1810 04EC  
                    l1732 051E                      l1740 054F                      l1804 0344  
                    l1812 04EF                      l1900 016A                      l1820 0026  
                    l1734 0525                      l1742 0555                      l1806 0349  
                    l1750 03E3                      l1814 04FA                      l1910 018E  
                    l1902 0171                      l1822 002C                      l1736 052C  
                    l1728 050F                      l1744 0558                      l1808 034F  
                    l1760 03FF                      l1752 03E6                      l1816 0502  
                    l1920 01D2                      l1904 0175                      l1912 0192  
                    l1840 007D                      l1832 0041                      l1824 0033  
                    l1746 0561                      l1738 054C                      l1762 0405  
                    l1754 03F4                      l1770 03A4                      l1914 0197  
                    l1906 0181                      l1850 00C3                      l1842 0090  
                    l1834 0054                      l1826 0038                      l1922 01DB  
                    l1818 0021                      l1940 02A8                      l1764 0408  
                    l1756 03F7                      l1748 03D9                      l1780 03C0  
                    l1772 03A7                      l1916 01C7                      l1908 0187  
                    l1860 00DC                      l1852 00CB                      l1924 01ED  
                    l1844 0094                      l1836 0064                      l1828 003D  
                    l1942 02B1                      l1790 0303                      l1766 040D  
                    l1758 03FC                      l1782 03C6                      l1774 03AE  
                    l1918 01CE                      l1870 00FA                      l1854 00CF  
                    l1838 0068                      l1950 04B5                      l1936 0577  
                    l1944 02C0                      l1792 0308                      l1784 03CD  
                    l1776 03B2                      l1768 039C                      l1880 012D  
                    l1872 0104                      l1856 00D3                      l1848 00A4  
                    l1952 04BD                      l1946 02C6                      l1938 02A2  
                    l1794 0319                      l1778 03B6                      l1786 03D3  
                    l1890 0146                      l1882 0131                      l1874 010A  
                    l1866 00DE                      l1858 00D7                      l1954 0530  
                    l1970 01F8                      l1796 031E                      l1892 014C  
                    l1884 0135                      l1876 0110                      l1948 049D  
                    l1956 053C                      l1980 01FF                      l1972 01F9  
                    l1964 01F2                      l1798 0324                      l1894 0153  
                    l1886 013B                      l1878 0121                      l1958 0544  
                    l1990 020A                      l1982 0200                      l1974 01FA  
                    l1966 01F6                      l1896 0157                      l1888 0142  
                    l1992 020B                      l1984 0205                      l1976 01FB  
                    l1968 01F7                      l1898 0164                      l1994 020C  
                    l1986 0206                      l1978 01FC                      l1996 020F  
                    l1988 0209                      l1998 0210                      STR_1 0421  
                    STR_2 0438                      u1200 052C                      u1201 052B  
                    u1300 0333                      u1220 03A4                      u1301 0332  
                    u1221 03A3                      u1215 03E9                      u1320 050D  
                    u1240 03B6                      u1400 0110                      u1321 050C  
                    u1241 03B5                      u1401 010F                      u1170 0513  
                    u1250 03C0                      u1410 0121                      u1330 002C  
                    u1171 0512                      u1315 033B                      u1251 03BF  
                    u1235 03A8                      u1411 0120                      u1331 002B  
                    u1180 051E                      u1500 01ED                      u1420 0135  
                    u1340 0064                      u1181 051D                      u1501 01EC  
                    u1421 0134                      u1341 0063                      u1190 0525  
                    u1270 03D3                      u1430 013B                      u1350 00A4  
                    u1510 022C                      u1191 0524                      u1271 03D2  
                    u1255 03BC                      u1431 013A                      u1415 011D  
                    u1351 00A3                      u1511 022B                      u1280 0308  
                    u1440 014C                      u1360 00D3                      u1520 0245  
                    u1281 0307                      u1265 03C7                      u1441 014B  
                    u1361 00D2                      u1521 0244                      u1450 0163  
                    u1370 00F9                      u1530 0267                      u1451 0162  
                    u1371 00F8                      u1531 0266                      u1460 016A  
                    u1380 0104                      u1540 026F                      u1461 0169  
                    u1381 0103                      u1541 026E                      u1470 0181  
                    u1390 010A                      u1550 027C                      u1295 0310  
                    u1607 040A                      u1471 0180                      u1391 0109  
                    u1375 00F5                      u1551 027B                      u1480 0187  
                    u1560 028A                      u1617 02AC                      u1481 0186  
                    u1561 0289                      u1490 01DB                      u1627 02BB  
                    u1491 01DA                      u1555 0278                      u1637 02CA  
                    u1647 055C                      u1577 0237                      u1587 0255  
                    u1597 03F9         ?_Lcd_Write_String 0070                      _main 01F2  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 0565     __end_of_setCronometro 04C4                     ?_main 0070  
         __end_of___lwdiv 039C                     i1l140 0496                     i1l152 0471  
         __end_of___lwmod 03D8                     _TMR1H 000F                     _TMR1L 000E  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
         __end_of_dpowers 0421                     _setDQ 0530           __end_of_isdigit 0577  
                   _valor 003D                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 01F2          __end_of_Lcd_Init 0300  
        __end_of_Lcd_Port 0530           __initialization 000F              __end_of_main 02A2  
                  ??_main 003A                    ?_setDQ 0070                    _ADRESH 001E  
                  _ADRESL 009E                    i1l1550 044A                    i1l1560 0462  
                  i1l1552 0451                    i1l1562 0468                    i1l1554 0453  
                  i1l1564 046F                    i1l1556 0459                    i1l1548 0442  
                  i1l1558 0460                    u106_20 0451                    i1l1680 0482  
                  i1l1672 0472                    u106_21 0450                    i1l1682 0488  
                  i1l1674 0478                    i1l1684 048F                    i1l1676 0479  
                  i1l1686 0494                    i1l1678 047D                    u107_20 0460  
                  u115_20 0478                    u107_21 045F                    u115_21 0477  
                  u108_20 046F                    u116_20 048F                    u108_21 046E  
                  u116_21 048E                 ??_Lcd_Cmd 0073                    _TMR1IF 0060  
                  _TMR1ON 0080                    ___wmul 04C4                 ??___lwdiv 0076  
               ??___lwmod 0024                    _buffer 0045                 ??_isdigit 0072  
                  saved_w 007E                 ??_sprintf 002D           Lcd_Set_Cursor@a 0020  
         Lcd_Set_Cursor@b 0076           Lcd_Set_Cursor@y 0022           Lcd_Set_Cursor@z 0021  
 __end_of__initialization 001A         __end_of_Lcd_Clear 0584            __pcstackCOMMON 0070  
           __end_of_setDQ 054B            _Lcd_Set_Cursor 0300            _OPTION_REGbits 0081  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070                   ??_setDQ 0039  
            sprintf@width 0035                __pbssBANK0 003D                __pmaintext 01F2  
   __end_of_ContaSegundos 049D                   ?___wmul 0072                _centesimos 003F  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 0358                ??_Lcd_Init 0076  
              ??_Lcd_Port 0072                __stringtab 0411            _Lcd_Write_Char 03D8  
                 _Lcd_Cmd 054B                _cronometro 0442                   ___lwdiv 0358  
                 ___lwmod 039C           ?_Lcd_Set_Cursor 0076                   __ptext1 0530  
                 __ptext2 049D                   __ptext3 001E                   __ptext4 0565  
                 __ptext5 04C4                   __ptext6 039C                   __ptext7 0358  
                 __ptext8 04E9                   __ptext9 03D8                 _T1CONbits 0010  
                 _dpowers 0417                   _isdigit 0565                   _minutos 0043  
                 _sprintf 001E                   clrloop0 0585    __end_of_Lcd_Write_Char 0411  
    end_of_initialization 001A                 Lcd_Port@a 0072           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0022         Lcd_Write_String@i 0020               ?_cronometro 0070  
               _Lcd_Clear 0577            __end_of___wmul 04E9          _Lcd_Write_String 04E9  
           _setCronometro 049D       start_initialization 000F                ?_Lcd_Clear 0070  
                ??___wmul 0076           Lcd_Write_Char@a 0076           Lcd_Write_Char@y 0075  
          ?_setCronometro 0070               __pbssCOMMON 007A                 ___latbits 0002  
           __pcstackBANK0 0020                  ?_Lcd_Cmd 0070               sprintf@flag 0034  
             sprintf@prec 0031          ___lwdiv@dividend 0074          ??_Lcd_Set_Cursor 0077  
                ?___lwdiv 0072                  ?___lwmod 0020                 __pstrings 0411  
                ?_isdigit 0070          ___lwdiv@quotient 0077                  ?_sprintf 0026  
       interrupt_function 0004            ___wmul@product 0076                 clear_ram0 0584  
                _PIE1bits 008C                  Lcd_Cmd@a 0075                  _PIR1bits 000C  
             ??_Lcd_Clear 0076           ??_setCronometro 0039                _ADCON0bits 001F  
             __stringbase 0416                _ADCON1bits 009F         ___wmul@multiplier 0072  
        ??_Lcd_Write_Char 0073                  _Lcd_Init 02A2                  _Lcd_Port 050E  
__end_of_Lcd_Write_String 050E              ??_cronometro 0070             _ContaSegundos 0472  
      __end_of__stringtab 0417               _isdigit$834 0072                sprintf@val 0032  
         ___lwdiv@divisor 0072           ___lwdiv@counter 0079        __end_of_cronometro 0472  
                __ptext10 0300                  __ptext11 02A2                  __ptext12 0577  
                __ptext13 054B                  __ptext14 050E                  __ptext15 0472  
                __ptext16 0442                  _contador 007A                  _segundos 0041  
          ?_ContaSegundos 0070                _INTCONbits 000B                  isdigit@c 0073  
      Lcd_Write_Char@temp 0074                  intlevel1 0000                 sprintf@ap 0030  
               sprintf@sp 0037          ___lwmod@dividend 0022                 stringcode 0411  
      Lcd_Set_Cursor@temp 0023                  sprintf@c 0038                  sprintf@f 0026  
         ___lwmod@divisor 0020           ___lwmod@counter 0025                  stringdir 0411  
                stringtab 0411           ??_ContaSegundos 0070  
