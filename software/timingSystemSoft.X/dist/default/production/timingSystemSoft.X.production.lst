

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sun Mar 06 23:19:33 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	strings
   186  04AA                     __pstrings:
   187  04AA                     stringtab:
   188  04AA                     __stringtab:
   189  04AA                     stringcode:	
   190                           ;	String table - string pointers are 1 byte each
   191                           
   192  04AA                     stringdir:
   193  04AA  3004               	movlw	high stringdir
   194  04AB  008A               	movwf	10
   195  04AC  0804               	movf	4,w
   196  04AD  0A84               	incf	4,f
   197  04AE  0782               	addwf	2,f
   198  04AF                     __stringbase:
   199  04AF  3400               	retlw	0
   200  04B0                     __end_of__stringtab:
   201  04B0                     _dpowers:
   202  04B0  3401               	retlw	1
   203  04B1  3400               	retlw	0
   204  04B2  340A               	retlw	10
   205  04B3  3400               	retlw	0
   206  04B4  3464               	retlw	100
   207  04B5  3400               	retlw	0
   208  04B6  34E8               	retlw	232
   209  04B7  3403               	retlw	3
   210  04B8  3410               	retlw	16
   211  04B9  3427               	retlw	39
   212  04BA                     __end_of_dpowers:
   213  000C                     _PIR1bits	set	12
   214  000F                     _TMR1H	set	15
   215  000E                     _TMR1L	set	14
   216  0010                     _T1CONbits	set	16
   217  000B                     _INTCONbits	set	11
   218  0060                     _TMR1IF	set	96
   219  0030                     _RB0	set	48
   220  003B                     _RC3	set	59
   221  003A                     _RC2	set	58
   222  0038                     _RC0	set	56
   223  0043                     _RD3	set	67
   224  0042                     _RD2	set	66
   225  0047                     _RD7	set	71
   226  0046                     _RD6	set	70
   227  0045                     _RD5	set	69
   228  0044                     _RD4	set	68
   229  008C                     _PIE1bits	set	140
   230  0081                     _OPTION_REGbits	set	129
   231  0088                     _TRISD	set	136
   232  0087                     _TRISC	set	135
   233  0086                     _TRISB	set	134
   234  04BA                     STR_1:
   235  04BA  3425               	retlw	37	;'%'
   236  04BB  3430               	retlw	48	;'0'
   237  04BC  3432               	retlw	50	;'2'
   238  04BD  3464               	retlw	100	;'d'
   239  04BE  343A               	retlw	58	;':'
   240  04BF  3425               	retlw	37	;'%'
   241  04C0  3430               	retlw	48	;'0'
   242  04C1  3432               	retlw	50	;'2'
   243  04C2  3464               	retlw	100	;'d'
   244  04C3  343A               	retlw	58	;':'
   245  04C4  3425               	retlw	37	;'%'
   246  04C5  3430               	retlw	48	;'0'
   247  04C6  3432               	retlw	50	;'2'
   248  04C7  3464               	retlw	100	;'d'
   249  04C8  3400               	retlw	0
   250                           
   251                           	psect	cinit
   252  000F                     start_initialization:	
   253                           ; #config settings
   254                           
   255  000F                     __initialization:
   256                           
   257                           ; Clear objects allocated to BITCOMMON
   258  000F  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   259                           
   260                           ; Clear objects allocated to BANK0
   261  0010  1383               	bcf	3,7	;select IRP bank0
   262  0011  303C               	movlw	low __pbssBANK0
   263  0012  0084               	movwf	4
   264  0013  304E               	movlw	low (__pbssBANK0+18)
   265  0014  120A  118A  24F5  120A  118A  	fcall	clear_ram0
   266  0019                     end_of_initialization:	
   267                           ;End of C runtime variable initialization code
   268                           
   269  0019                     __end_of__initialization:
   270  0019  0183               	clrf	3
   271  001A  120A  118A  2AA7   	ljmp	_main	;jump to C main() function
   272                           
   273                           	psect	bitbssCOMMON
   274  03D8                     __pbitbssCOMMON:
   275  03D8                     _inverte:
   276  03D8                     	ds	1
   277                           
   278                           	psect	bssBANK0
   279  003C                     __pbssBANK0:
   280  003C                     _contador:
   281  003C                     	ds	2
   282  003E                     _centesimos:
   283  003E                     	ds	2
   284  0040                     _segundos:
   285  0040                     	ds	2
   286  0042                     _minutos:
   287  0042                     	ds	2
   288  0044                     _buffer:
   289  0044                     	ds	10
   290                           
   291                           	psect	clrtext
   292  04F5                     clear_ram0:	
   293                           ;	Called with FSR containing the base address, and
   294                           ;	W with the last address+1
   295                           
   296  04F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   297  04F6                     clrloop0:
   298  04F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   299  04F7  0A84               	incf	4,f	;increment pointer
   300  04F8  0604               	xorwf	4,w	;XOR with final address
   301  04F9  1903               	btfsc	3,2	;have we reached the end yet?
   302  04FA  3400               	retlw	0	;all done for this memory range, return
   303  04FB  0604               	xorwf	4,w	;XOR again to restore value
   304  04FC  2CF6               	goto	clrloop0	;do the next byte
   305                           
   306                           	psect	cstackCOMMON
   307  0070                     __pcstackCOMMON:
   308  0070                     ?_isdigit:
   309  0070                     ?_setCronometro:	
   310                           ; 1 bit 
   311                           
   312  0070                     ?_cronometro:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ??_cronometro:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_Lcd_Port:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_Lcd_Cmd:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_Lcd_Init:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_Lcd_Write_Char:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Lcd_Write_String:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_main:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_ContaSegundos:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ??_ContaSegundos:	
   340                           ; 1 bytes @ 0x0
   341                           
   342                           
   343                           ; 1 bytes @ 0x0
   344  0070                     	ds	2
   345  0072                     ??_isdigit:
   346  0072                     ??_Lcd_Port:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ?___wmul:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ?___lwdiv:	
   353                           ; 2 bytes @ 0x2
   354                           
   355  0072                     Lcd_Port@a:	
   356                           ; 2 bytes @ 0x2
   357                           
   358  0072                     _isdigit$732:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ___wmul@multiplier:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ___lwdiv@divisor:	
   365                           ; 2 bytes @ 0x2
   366                           
   367                           
   368                           ; 2 bytes @ 0x2
   369  0072                     	ds	1
   370  0073                     ??_Lcd_Cmd:
   371  0073                     ??_Lcd_Write_Char:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     isdigit@c:	
   375                           ; 1 bytes @ 0x3
   376                           
   377                           
   378                           ; 1 bytes @ 0x3
   379  0073                     	ds	1
   380  0074                     Lcd_Write_Char@temp:
   381  0074                     ___wmul@multiplicand:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ___lwdiv@dividend:	
   385                           ; 2 bytes @ 0x4
   386                           
   387                           
   388                           ; 2 bytes @ 0x4
   389  0074                     	ds	1
   390  0075                     Lcd_Cmd@a:
   391  0075                     Lcd_Write_Char@y:	
   392                           ; 1 bytes @ 0x5
   393                           
   394                           
   395                           ; 1 bytes @ 0x5
   396  0075                     	ds	1
   397  0076                     ?_Lcd_Set_Cursor:
   398  0076                     ??_Lcd_Init:	
   399                           ; 1 bytes @ 0x6
   400                           
   401  0076                     ??___wmul:	
   402                           ; 1 bytes @ 0x6
   403                           
   404  0076                     ??___lwdiv:	
   405                           ; 1 bytes @ 0x6
   406                           
   407  0076                     Lcd_Set_Cursor@b:	
   408                           ; 1 bytes @ 0x6
   409                           
   410  0076                     Lcd_Write_Char@a:	
   411                           ; 1 bytes @ 0x6
   412                           
   413  0076                     ___wmul@product:	
   414                           ; 1 bytes @ 0x6
   415                           
   416                           
   417                           ; 2 bytes @ 0x6
   418  0076                     	ds	1
   419  0077                     ??_Lcd_Set_Cursor:
   420  0077                     ??_Lcd_Write_String:	
   421                           ; 1 bytes @ 0x7
   422                           
   423  0077                     ___lwdiv@quotient:	
   424                           ; 1 bytes @ 0x7
   425                           
   426                           
   427                           ; 2 bytes @ 0x7
   428  0077                     	ds	1
   429  0078                     Lcd_Write_String@i:
   430                           
   431                           ; 2 bytes @ 0x8
   432  0078                     	ds	1
   433  0079                     ___lwdiv@counter:
   434                           
   435                           ; 1 bytes @ 0x9
   436  0079                     	ds	1
   437  007A                     ??___lwmod:
   438  007A                     Lcd_Write_String@a:	
   439                           ; 1 bytes @ 0xA
   440                           
   441                           
   442                           ; 1 bytes @ 0xA
   443  007A                     	ds	1
   444                           
   445                           	psect	cstackBANK0
   446  0020                     __pcstackBANK0:
   447  0020                     ?___lwmod:
   448  0020                     Lcd_Set_Cursor@a:	
   449                           ; 2 bytes @ 0x0
   450                           
   451  0020                     ___lwmod@divisor:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 2 bytes @ 0x0
   456  0020                     	ds	1
   457  0021                     Lcd_Set_Cursor@z:
   458                           
   459                           ; 1 bytes @ 0x1
   460  0021                     	ds	1
   461  0022                     Lcd_Set_Cursor@y:
   462  0022                     ___lwmod@dividend:	
   463                           ; 1 bytes @ 0x2
   464                           
   465                           
   466                           ; 2 bytes @ 0x2
   467  0022                     	ds	1
   468  0023                     Lcd_Set_Cursor@temp:
   469                           
   470                           ; 1 bytes @ 0x3
   471  0023                     	ds	1
   472  0024                     ___lwmod@counter:
   473                           
   474                           ; 1 bytes @ 0x4
   475  0024                     	ds	1
   476  0025                     ?_sprintf:
   477  0025                     sprintf@f:	
   478                           ; 2 bytes @ 0x5
   479                           
   480                           
   481                           ; 1 bytes @ 0x5
   482  0025                     	ds	7
   483  002C                     ??_sprintf:
   484                           
   485                           ; 1 bytes @ 0xC
   486  002C                     	ds	3
   487  002F                     sprintf@ap:
   488                           
   489                           ; 1 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     sprintf@prec:
   492                           
   493                           ; 1 bytes @ 0x10
   494  0030                     	ds	1
   495  0031                     sprintf@val:
   496                           
   497                           ; 2 bytes @ 0x11
   498  0031                     	ds	2
   499  0033                     sprintf@flag:
   500                           
   501                           ; 1 bytes @ 0x13
   502  0033                     	ds	1
   503  0034                     sprintf@width:
   504                           
   505                           ; 2 bytes @ 0x14
   506  0034                     	ds	2
   507  0036                     sprintf@sp:
   508                           
   509                           ; 1 bytes @ 0x16
   510  0036                     	ds	1
   511  0037                     sprintf@c:
   512                           
   513                           ; 1 bytes @ 0x17
   514  0037                     	ds	1
   515  0038                     ??_setCronometro:
   516                           
   517                           ; 1 bytes @ 0x18
   518  0038                     	ds	1
   519  0039                     ??_main:
   520                           
   521                           ; 1 bytes @ 0x19
   522  0039                     	ds	3
   523                           
   524                           	psect	maintext
   525  02A7                     __pmaintext:	
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 46 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : B00/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   545 ;;      Params:         0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0
   547 ;;      Temps:          0       3       0       0       0
   548 ;;      Totals:         0       3       0       0       0
   549 ;;Total ram usage:        3 bytes
   550 ;; Hardware stack levels required when called: 6
   551 ;; This function calls:
   552 ;;		_Lcd_Init
   553 ;;		_setCronometro
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559  02A7                     _main:	
   560                           ;psect for function _main
   561                           
   562  02A7                     l1726:	
   563                           ;incstack = 0
   564                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   565                           
   566                           
   567                           ;main.c: 49:     TRISB = 0b11111111;
   568  02A7  30FF               	movlw	255
   569  02A8  1683               	bsf	3,5	;RP0=1, select bank1
   570  02A9  1303               	bcf	3,6	;RP1=0, select bank1
   571  02AA  0086               	movwf	6	;volatile
   572  02AB                     l1728:
   573                           
   574                           ;main.c: 50:     TRISC = 0b00000000;
   575  02AB  0187               	clrf	7	;volatile
   576  02AC                     l1730:
   577                           
   578                           ;main.c: 51:     TRISD = 0b00000000;
   579  02AC  0188               	clrf	8	;volatile
   580  02AD                     l1732:
   581                           
   582                           ;main.c: 54:     OPTION_REGbits.nRBPU = 0;
   583  02AD  1381               	bcf	1,7	;volatile
   584  02AE                     l1734:
   585                           
   586                           ;main.c: 58:     INTCONbits.GIE = 1;
   587  02AE  178B               	bsf	11,7	;volatile
   588  02AF                     l1736:
   589                           
   590                           ;main.c: 59:     INTCONbits.PEIE = 1;
   591  02AF  170B               	bsf	11,6	;volatile
   592  02B0                     l1738:
   593                           
   594                           ;main.c: 60:     PIE1bits.TMR1IE = 1;
   595  02B0  140C               	bsf	12,0	;volatile
   596  02B1                     l1740:
   597                           
   598                           ;main.c: 63:     T1CONbits.TMR1CS = 0;
   599  02B1  1283               	bcf	3,5	;RP0=0, select bank0
   600  02B2  1303               	bcf	3,6	;RP1=0, select bank0
   601  02B3  1090               	bcf	16,1	;volatile
   602  02B4                     l1742:
   603                           
   604                           ;main.c: 64:     T1CONbits.T1CKPS0 = 1;
   605  02B4  1610               	bsf	16,4	;volatile
   606  02B5                     l1744:
   607                           
   608                           ;main.c: 65:     T1CONbits.T1CKPS1 = 1;
   609  02B5  1690               	bsf	16,5	;volatile
   610                           
   611                           ;main.c: 68:     TMR1L = 0x2C;
   612  02B6  302C               	movlw	44
   613  02B7  008E               	movwf	14	;volatile
   614                           
   615                           ;main.c: 69:     TMR1H = 0xCF;
   616  02B8  30CF               	movlw	207
   617  02B9  008F               	movwf	15	;volatile
   618  02BA                     l1746:
   619                           
   620                           ;main.c: 71:     T1CONbits.TMR1ON = 1;
   621  02BA  1410               	bsf	16,0	;volatile
   622  02BB                     l1748:
   623                           
   624                           ;main.c: 74:     RC0 = 0;
   625  02BB  1007               	bcf	7,0	;volatile
   626  02BC                     l1750:
   627                           
   628                           ;main.c: 75:     RC2 = 0;
   629  02BC  1107               	bcf	7,2	;volatile
   630  02BD                     l1752:
   631                           
   632                           ;main.c: 76:     RC3 = 0;
   633  02BD  1187               	bcf	7,3	;volatile
   634  02BE                     l1754:
   635                           
   636                           ;main.c: 78:     Lcd_Init();
   637  02BE  120A  118A  21F1  120A  118A  	fcall	_Lcd_Init
   638  02C3                     l1756:
   639                           
   640                           ;main.c: 82:     {;main.c: 83:         if (RB0 == 0)
   641  02C3  1283               	bcf	3,5	;RP0=0, select bank0
   642  02C4  1303               	bcf	3,6	;RP1=0, select bank0
   643  02C5  1806               	btfsc	6,0	;volatile
   644  02C6  2AC8               	goto	u1351
   645  02C7  2AC9               	goto	u1350
   646  02C8                     u1351:
   647  02C8  2AEC               	goto	l1766
   648  02C9                     u1350:
   649  02C9                     l1758:
   650                           
   651                           ;main.c: 84:         {;main.c: 85:             RC0 = 1;
   652  02C9  1407               	bsf	7,0	;volatile
   653                           
   654                           ;main.c: 86:             RC2 = 1;
   655  02CA  1507               	bsf	7,2	;volatile
   656  02CB                     l1760:
   657                           
   658                           ;main.c: 88:             _delay((unsigned long)((150)*(20000000/4000.0)));
   659  02CB  3004               	movlw	4
   660  02CC  1283               	bcf	3,5	;RP0=0, select bank0
   661  02CD  1303               	bcf	3,6	;RP1=0, select bank0
   662  02CE  00BB               	movwf	??_main+2
   663  02CF  30CF               	movlw	207
   664  02D0  00BA               	movwf	??_main+1
   665  02D1  3001               	movlw	1
   666  02D2  00B9               	movwf	??_main
   667  02D3                     u1367:
   668  02D3  0BB9               	decfsz	??_main,f
   669  02D4  2AD3               	goto	u1367
   670  02D5  0BBA               	decfsz	??_main+1,f
   671  02D6  2AD3               	goto	u1367
   672  02D7  0BBB               	decfsz	??_main+2,f
   673  02D8  2AD3               	goto	u1367
   674  02D9                     l1762:
   675                           
   676                           ;main.c: 89:             RC0 = 0;
   677  02D9  1283               	bcf	3,5	;RP0=0, select bank0
   678  02DA  1303               	bcf	3,6	;RP1=0, select bank0
   679  02DB  1007               	bcf	7,0	;volatile
   680  02DC                     l1764:
   681                           
   682                           ;main.c: 90:             RC2 = 0;
   683  02DC  1107               	bcf	7,2	;volatile
   684                           
   685                           ;main.c: 91:             _delay((unsigned long)((1000)*(20000000/4000.0)));
   686  02DD  301A               	movlw	26
   687  02DE  1283               	bcf	3,5	;RP0=0, select bank0
   688  02DF  1303               	bcf	3,6	;RP1=0, select bank0
   689  02E0  00BB               	movwf	??_main+2
   690  02E1  305E               	movlw	94
   691  02E2  00BA               	movwf	??_main+1
   692  02E3  306D               	movlw	109
   693  02E4  00B9               	movwf	??_main
   694  02E5                     u1377:
   695  02E5  0BB9               	decfsz	??_main,f
   696  02E6  2AE5               	goto	u1377
   697  02E7  0BBA               	decfsz	??_main+1,f
   698  02E8  2AE5               	goto	u1377
   699  02E9  0BBB               	decfsz	??_main+2,f
   700  02EA  2AE5               	goto	u1377
   701  02EB  2AEC               	nop2
   702  02EC                     l1766:
   703                           
   704                           ;main.c: 94:         setCronometro();
   705  02EC  120A  118A  2417  120A  118A  	fcall	_setCronometro
   706  02F1  2AC3               	goto	l1756
   707  02F2  120A  118A  280C   	ljmp	start
   708  02F5                     __end_of_main:
   709                           
   710                           	psect	text1
   711  0417                     __ptext1:	
   712 ;; *************** function _setCronometro *****************
   713 ;; Defined at:
   714 ;;		line 123 in file "main.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;		None
   719 ;; Return value:  Size  Location     Type
   720 ;;                  1    wreg      void 
   721 ;; Registers used:
   722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   728 ;;      Params:         0       0       0       0       0
   729 ;;      Locals:         0       0       0       0       0
   730 ;;      Temps:          0       1       0       0       0
   731 ;;      Totals:         0       1       0       0       0
   732 ;;Total ram usage:        1 bytes
   733 ;; Hardware stack levels used: 1
   734 ;; Hardware stack levels required when called: 5
   735 ;; This function calls:
   736 ;;		_Lcd_Set_Cursor
   737 ;;		_Lcd_Write_String
   738 ;;		_sprintf
   739 ;; This function is called by:
   740 ;;		_main
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744  0417                     _setCronometro:	
   745                           ;psect for function _setCronometro
   746                           
   747  0417                     l1720:	
   748                           ;incstack = 0
   749                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   750                           
   751                           
   752                           ;main.c: 125:     sprintf(buffer,"%02d:%02d:%02d", minutos, segundos, centesimos);
   753  0417  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   754  0418  1283               	bcf	3,5	;RP0=0, select bank0
   755  0419  1303               	bcf	3,6	;RP1=0, select bank0
   756  041A  00B8               	movwf	??_setCronometro
   757  041B  0838               	movf	??_setCronometro,w
   758  041C  00A5               	movwf	sprintf@f
   759  041D  0843               	movf	_minutos+1,w
   760  041E  00A7               	movwf	?_sprintf+2
   761  041F  0842               	movf	_minutos,w
   762  0420  00A6               	movwf	?_sprintf+1
   763  0421  0841               	movf	_segundos+1,w
   764  0422  00A9               	movwf	?_sprintf+4
   765  0423  0840               	movf	_segundos,w
   766  0424  00A8               	movwf	?_sprintf+3
   767  0425  083F               	movf	_centesimos+1,w
   768  0426  00AB               	movwf	?_sprintf+6
   769  0427  083E               	movf	_centesimos,w
   770  0428  00AA               	movwf	?_sprintf+5
   771  0429  3044               	movlw	(low (_buffer| 0))& (0+255)
   772  042A  120A  118A  201D  120A  118A  	fcall	_sprintf
   773  042F                     l1722:
   774                           
   775                           ;main.c: 126:     Lcd_Set_Cursor(1,5);
   776  042F  3005               	movlw	5
   777  0430  1283               	bcf	3,5	;RP0=0, select bank0
   778  0431  1303               	bcf	3,6	;RP1=0, select bank0
   779  0432  00B8               	movwf	??_setCronometro
   780  0433  0838               	movf	??_setCronometro,w
   781  0434  00F6               	movwf	Lcd_Set_Cursor@b
   782  0435  3001               	movlw	1
   783  0436  120A  118A  224F  120A  118A  	fcall	_Lcd_Set_Cursor
   784  043B                     l1724:
   785                           
   786                           ;main.c: 127:     Lcd_Write_String(buffer);
   787  043B  3044               	movlw	(low (_buffer| 0))& (0+255)
   788  043C  120A  118A  2489  120A  118A  	fcall	_Lcd_Write_String
   789  0441                     l122:
   790  0441  0008               	return
   791  0442                     __end_of_setCronometro:
   792                           
   793                           	psect	text2
   794  001D                     __ptext2:	
   795 ;; *************** function _sprintf *****************
   796 ;; Defined at:
   797 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  sp              1    wreg     PTR unsigned char 
   800 ;;		 -> buffer(10), 
   801 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   802 ;;		 -> STR_1(15), 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   805 ;;		 -> buffer(10), 
   806 ;;  tmpval          4    0        struct .
   807 ;;  width           2   20[BANK0 ] int 
   808 ;;  val             2   17[BANK0 ] unsigned int 
   809 ;;  cp              2    0        PTR const unsigned char 
   810 ;;  len             2    0        unsigned int 
   811 ;;  c               1   23[BANK0 ] unsigned char 
   812 ;;  flag            1   19[BANK0 ] unsigned char 
   813 ;;  prec            1   16[BANK0 ] char 
   814 ;;  ap              1   15[BANK0 ] PTR void [1]
   815 ;;		 -> ?_sprintf(2), 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  2    5[BANK0 ] int 
   818 ;; Registers used:
   819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         0       7       0       0       0
   826 ;;      Locals:         0       9       0       0       0
   827 ;;      Temps:          0       3       0       0       0
   828 ;;      Totals:         0      19       0       0       0
   829 ;;Total ram usage:       19 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 3
   832 ;; This function calls:
   833 ;;		___lwdiv
   834 ;;		___lwmod
   835 ;;		___wmul
   836 ;;		_isdigit
   837 ;; This function is called by:
   838 ;;		_setCronometro
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842  001D                     _sprintf:	
   843                           ;psect for function _sprintf
   844                           
   845                           
   846                           ;incstack = 0
   847                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   848                           ;sprintf@sp stored from wreg
   849  001D  1283               	bcf	3,5	;RP0=0, select bank0
   850  001E  1303               	bcf	3,6	;RP1=0, select bank0
   851  001F  00B6               	movwf	sprintf@sp
   852  0020                     l1602:
   853                           
   854                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   855  0020  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   856  0021  00AC               	movwf	??_sprintf
   857  0022  082C               	movf	??_sprintf,w
   858  0023  00AF               	movwf	sprintf@ap
   859                           
   860                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   861  0024  29DA               	goto	l1706
   862  0025                     l1604:
   863                           
   864                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   865  0025  3025               	movlw	37
   866  0026  0637               	xorwf	sprintf@c,w
   867  0027  1903               	btfsc	3,2
   868  0028  282A               	goto	u1171
   869  0029  282B               	goto	u1170
   870  002A                     u1171:
   871  002A  2837               	goto	l1610
   872  002B                     u1170:
   873  002B                     l1606:
   874                           
   875                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   876  002B  0837               	movf	sprintf@c,w
   877  002C  00AC               	movwf	??_sprintf
   878  002D  0836               	movf	sprintf@sp,w
   879  002E  0084               	movwf	4
   880  002F  082C               	movf	??_sprintf,w
   881  0030  1383               	bcf	3,7	;select IRP bank0
   882  0031  0080               	movwf	0
   883  0032                     l1608:
   884  0032  3001               	movlw	1
   885  0033  00AC               	movwf	??_sprintf
   886  0034  082C               	movf	??_sprintf,w
   887  0035  07B6               	addwf	sprintf@sp,f
   888                           
   889                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
   890  0036  29DA               	goto	l1706
   891  0037                     l1610:
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   894  0037  01B4               	clrf	sprintf@width
   895  0038  01B5               	clrf	sprintf@width+1
   896                           
   897                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   898  0039  01B3               	clrf	sprintf@flag
   899  003A  2840               	goto	l1616
   900  003B                     l226:	
   901                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
   902                           
   903                           
   904                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
   905  003B  1533               	bsf	sprintf@flag,2
   906  003C                     l1612:
   907                           
   908                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
   909  003C  3001               	movlw	1
   910  003D  00AC               	movwf	??_sprintf
   911  003E  082C               	movf	??_sprintf,w
   912  003F  07A5               	addwf	sprintf@f,f
   913  0040                     l1616:	
   914                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
   915                           
   916  0040  0825               	movf	sprintf@f,w
   917  0041  0084               	movwf	4
   918  0042  120A  118A  24AA  120A  118A  	fcall	stringdir
   919  0047  00AC               	movwf	??_sprintf
   920  0048  01AD               	clrf	??_sprintf+1
   921                           
   922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   923                           ; Switch size 1, requested type "simple"
   924                           ; Number of cases is 1, Range of values is 0 to 0
   925                           ; switch strategies available:
   926                           ; Name         Instructions Cycles
   927                           ; simple_byte            4     3 (average)
   928                           ; direct_byte           11     8 (fixed)
   929                           ; jumptable            260     6 (fixed)
   930                           ;	Chosen strategy is simple_byte
   931  0049  082D               	movf	??_sprintf+1,w
   932  004A  3A00               	xorlw	0	; case 0
   933  004B  1903               	skipnz
   934  004C  284E               	goto	l1808
   935  004D  2853               	goto	l1618
   936  004E                     l1808:
   937                           
   938                           ; Switch size 1, requested type "simple"
   939                           ; Number of cases is 1, Range of values is 48 to 48
   940                           ; switch strategies available:
   941                           ; Name         Instructions Cycles
   942                           ; simple_byte            4     3 (average)
   943                           ; direct_byte           14    11 (fixed)
   944                           ; jumptable            263     9 (fixed)
   945                           ;	Chosen strategy is simple_byte
   946  004E  082C               	movf	??_sprintf,w
   947  004F  3A30               	xorlw	48	; case 48
   948  0050  1903               	skipnz
   949  0051  283B               	goto	l226
   950  0052  2853               	goto	l1618
   951  0053                     l1618:
   952                           
   953                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
   954  0053  0825               	movf	sprintf@f,w
   955  0054  0084               	movwf	4
   956  0055  120A  118A  24AA  120A  118A  	fcall	stringdir
   957  005A  120A  118A  24E3  120A  118A  	fcall	_isdigit
   958  005F  1C03               	btfss	3,0
   959  0060  2862               	goto	u1181
   960  0061  2863               	goto	u1180
   961  0062                     u1181:
   962  0062  28A3               	goto	l1632
   963  0063                     u1180:
   964  0063                     l1620:
   965                           
   966                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
   967  0063  1283               	bcf	3,5	;RP0=0, select bank0
   968  0064  1303               	bcf	3,6	;RP1=0, select bank0
   969  0065  01B4               	clrf	sprintf@width
   970  0066  01B5               	clrf	sprintf@width+1
   971  0067                     l1622:
   972                           
   973                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
   974  0067  300A               	movlw	10
   975  0068  00F2               	movwf	___wmul@multiplier
   976  0069  3000               	movlw	0
   977  006A  00F3               	movwf	___wmul@multiplier+1
   978  006B  1283               	bcf	3,5	;RP0=0, select bank0
   979  006C  1303               	bcf	3,6	;RP1=0, select bank0
   980  006D  0835               	movf	sprintf@width+1,w
   981  006E  00F5               	movwf	___wmul@multiplicand+1
   982  006F  0834               	movf	sprintf@width,w
   983  0070  00F4               	movwf	___wmul@multiplicand
   984  0071  120A  118A  2442  120A  118A  	fcall	___wmul
   985  0076  0873               	movf	?___wmul+1,w
   986  0077  1283               	bcf	3,5	;RP0=0, select bank0
   987  0078  1303               	bcf	3,6	;RP1=0, select bank0
   988  0079  00B5               	movwf	sprintf@width+1
   989  007A  0872               	movf	?___wmul,w
   990  007B  00B4               	movwf	sprintf@width
   991  007C                     l1624:
   992                           
   993                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
   994  007C  0825               	movf	sprintf@f,w
   995  007D  0084               	movwf	4
   996  007E  120A  118A  24AA  120A  118A  	fcall	stringdir
   997  0083  3ED0               	addlw	208
   998  0084  00AC               	movwf	??_sprintf
   999  0085  30FF               	movlw	255
  1000  0086  1803               	skipnc
  1001  0087  3000               	movlw	0
  1002  0088  00AD               	movwf	??_sprintf+1
  1003  0089  082C               	movf	??_sprintf,w
  1004  008A  07B4               	addwf	sprintf@width,f
  1005  008B  1803               	skipnc
  1006  008C  0AB5               	incf	sprintf@width+1,f
  1007  008D  082D               	movf	??_sprintf+1,w
  1008  008E  07B5               	addwf	sprintf@width+1,f
  1009  008F                     l1626:
  1010  008F  3001               	movlw	1
  1011  0090  00AC               	movwf	??_sprintf
  1012  0091  082C               	movf	??_sprintf,w
  1013  0092  07A5               	addwf	sprintf@f,f
  1014  0093                     l1628:
  1015                           
  1016                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1017  0093  0825               	movf	sprintf@f,w
  1018  0094  0084               	movwf	4
  1019  0095  120A  118A  24AA  120A  118A  	fcall	stringdir
  1020  009A  120A  118A  24E3  120A  118A  	fcall	_isdigit
  1021  009F  1803               	btfsc	3,0
  1022  00A0  28A2               	goto	u1191
  1023  00A1  28A3               	goto	u1190
  1024  00A2                     u1191:
  1025  00A2  2867               	goto	l1622
  1026  00A3                     u1190:
  1027  00A3                     l1632:
  1028  00A3  3001               	movlw	1
  1029  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1030  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1031  00A6  07A5               	addwf	sprintf@f,f
  1032  00A7  30FF               	movlw	-1
  1033  00A8  0725               	addwf	sprintf@f,w
  1034  00A9  0084               	movwf	4
  1035  00AA  120A  118A  24AA  120A  118A  	fcall	stringdir
  1036  00AF  00B7               	movwf	sprintf@c
  1037  00B0  00AC               	movwf	??_sprintf
  1038  00B1  01AD               	clrf	??_sprintf+1
  1039                           
  1040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1041                           ; Switch size 1, requested type "simple"
  1042                           ; Number of cases is 1, Range of values is 0 to 0
  1043                           ; switch strategies available:
  1044                           ; Name         Instructions Cycles
  1045                           ; simple_byte            4     3 (average)
  1046                           ; direct_byte           11     8 (fixed)
  1047                           ; jumptable            260     6 (fixed)
  1048                           ;	Chosen strategy is simple_byte
  1049  00B2  082D               	movf	??_sprintf+1,w
  1050  00B3  3A00               	xorlw	0	; case 0
  1051  00B4  1903               	skipnz
  1052  00B5  28B7               	goto	l1810
  1053  00B6  29DA               	goto	l1706
  1054  00B7                     l1810:
  1055                           
  1056                           ; Switch size 1, requested type "simple"
  1057                           ; Number of cases is 3, Range of values is 0 to 105
  1058                           ; switch strategies available:
  1059                           ; Name         Instructions Cycles
  1060                           ; simple_byte           10     6 (average)
  1061                           ; jumptable            260     6 (fixed)
  1062                           ;	Chosen strategy is simple_byte
  1063  00B7  082C               	movf	??_sprintf,w
  1064  00B8  3A00               	xorlw	0	; case 0
  1065  00B9  1903               	skipnz
  1066  00BA  29EC               	goto	l1708
  1067  00BB  3A64               	xorlw	100	; case 100
  1068  00BC  1903               	skipnz
  1069  00BD  28C2               	goto	l1634
  1070  00BE  3A0D               	xorlw	13	; case 105
  1071  00BF  1903               	skipnz
  1072  00C0  28C2               	goto	l1634
  1073  00C1  29DA               	goto	l1706
  1074  00C2                     l1634:
  1075                           
  1076                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1077  00C2  082F               	movf	sprintf@ap,w
  1078  00C3  0084               	movwf	4
  1079  00C4  1383               	bcf	3,7	;select IRP bank0
  1080  00C5  0800               	movf	0,w
  1081  00C6  00B1               	movwf	sprintf@val
  1082  00C7  0A84               	incf	4,f
  1083  00C8  0800               	movf	0,w
  1084  00C9  00B2               	movwf	sprintf@val+1
  1085  00CA                     l1636:
  1086  00CA  3002               	movlw	2
  1087  00CB  00AC               	movwf	??_sprintf
  1088  00CC  082C               	movf	??_sprintf,w
  1089  00CD  07AF               	addwf	sprintf@ap,f
  1090  00CE                     l1638:
  1091                           
  1092                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1093  00CE  1FB2               	btfss	sprintf@val+1,7
  1094  00CF  28D1               	goto	u1201
  1095  00D0  28D2               	goto	u1200
  1096  00D1                     u1201:
  1097  00D1  28DB               	goto	l1644
  1098  00D2                     u1200:
  1099  00D2                     l1640:
  1100                           
  1101                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1102  00D2  3003               	movlw	3
  1103  00D3  00AC               	movwf	??_sprintf
  1104  00D4  082C               	movf	??_sprintf,w
  1105  00D5  04B3               	iorwf	sprintf@flag,f
  1106  00D6                     l1642:
  1107                           
  1108                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1109  00D6  09B1               	comf	sprintf@val,f
  1110  00D7  09B2               	comf	sprintf@val+1,f
  1111  00D8  0AB1               	incf	sprintf@val,f
  1112  00D9  1903               	skipnz
  1113  00DA  0AB2               	incf	sprintf@val+1,f
  1114  00DB                     l1644:
  1115                           
  1116                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1117  00DB  01B7               	clrf	sprintf@c
  1118  00DC  0AB7               	incf	sprintf@c,f
  1119  00DD                     l1650:
  1120                           
  1121                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1122  00DD  0837               	movf	sprintf@c,w
  1123  00DE  00AC               	movwf	??_sprintf
  1124  00DF  072C               	addwf	??_sprintf,w
  1125  00E0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1126  00E1  0084               	movwf	4
  1127  00E2  120A  118A  24AA  120A  118A  	fcall	stringdir
  1128  00E7  00AD               	movwf	??_sprintf+1
  1129  00E8  120A  118A  24AA  120A  118A  	fcall	stringdir
  1130  00ED  00AE               	movwf	??_sprintf+2
  1131  00EE  082E               	movf	??_sprintf+2,w
  1132  00EF  0232               	subwf	sprintf@val+1,w
  1133  00F0  1D03               	skipz
  1134  00F1  28F4               	goto	u1215
  1135  00F2  082D               	movf	??_sprintf+1,w
  1136  00F3  0231               	subwf	sprintf@val,w
  1137  00F4                     u1215:
  1138  00F4  1803               	skipnc
  1139  00F5  28F7               	goto	u1211
  1140  00F6  28F8               	goto	u1210
  1141  00F7                     u1211:
  1142  00F7  28F9               	goto	l1654
  1143  00F8                     u1210:
  1144  00F8  2903               	goto	l1656
  1145  00F9                     l1654:
  1146  00F9  3001               	movlw	1
  1147  00FA  00AC               	movwf	??_sprintf
  1148  00FB  082C               	movf	??_sprintf,w
  1149  00FC  07B7               	addwf	sprintf@c,f
  1150  00FD  3005               	movlw	5
  1151  00FE  0637               	xorwf	sprintf@c,w
  1152  00FF  1D03               	btfss	3,2
  1153  0100  2902               	goto	u1221
  1154  0101  2903               	goto	u1220
  1155  0102                     u1221:
  1156  0102  28DD               	goto	l1650
  1157  0103                     u1220:
  1158  0103                     l1656:
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1161  0103  0834               	movf	sprintf@width,w
  1162  0104  0435               	iorwf	sprintf@width+1,w
  1163  0105  1903               	btfsc	3,2
  1164  0106  2908               	goto	u1231
  1165  0107  2909               	goto	u1230
  1166  0108                     u1231:
  1167  0108  2915               	goto	l244
  1168  0109                     u1230:
  1169  0109                     l1658:
  1170  0109  0833               	movf	sprintf@flag,w
  1171  010A  3903               	andlw	3
  1172  010B  1903               	btfsc	3,2
  1173  010C  290E               	goto	u1241
  1174  010D  290F               	goto	u1240
  1175  010E                     u1241:
  1176  010E  2915               	goto	l244
  1177  010F                     u1240:
  1178  010F                     l1660:
  1179                           
  1180                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1181  010F  30FF               	movlw	255
  1182  0110  07B4               	addwf	sprintf@width,f
  1183  0111  1803               	skipnc
  1184  0112  0AB5               	incf	sprintf@width+1,f
  1185  0113  30FF               	movlw	255
  1186  0114  07B5               	addwf	sprintf@width+1,f
  1187  0115                     l244:
  1188                           
  1189                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1190  0115  0835               	movf	sprintf@width+1,w
  1191  0116  3A80               	xorlw	128
  1192  0117  3C80               	sublw	128
  1193  0118  1D03               	skipz
  1194  0119  291C               	goto	u1255
  1195  011A  0834               	movf	sprintf@width,w
  1196  011B  0237               	subwf	sprintf@c,w
  1197  011C                     u1255:
  1198  011C  1803               	skipnc
  1199  011D  291F               	goto	u1251
  1200  011E  2920               	goto	u1250
  1201  011F                     u1251:
  1202  011F  292C               	goto	l1664
  1203  0120                     u1250:
  1204  0120                     l1662:
  1205                           
  1206                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1207  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0122  0837               	movf	sprintf@c,w
  1210  0123  00AC               	movwf	??_sprintf
  1211  0124  01AD               	clrf	??_sprintf+1
  1212  0125  082C               	movf	??_sprintf,w
  1213  0126  02B4               	subwf	sprintf@width,f
  1214  0127  082D               	movf	??_sprintf+1,w
  1215  0128  1C03               	skipc
  1216  0129  03B5               	decf	sprintf@width+1,f
  1217  012A  02B5               	subwf	sprintf@width+1,f
  1218  012B  2930               	goto	l1666
  1219  012C                     l1664:
  1220                           
  1221                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1222  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1223  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1224  012E  01B4               	clrf	sprintf@width
  1225  012F  01B5               	clrf	sprintf@width+1
  1226  0130                     l1666:
  1227                           
  1228                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1229  0130  1D33               	btfss	sprintf@flag,2
  1230  0131  2933               	goto	u1261
  1231  0132  2934               	goto	u1260
  1232  0133                     u1261:
  1233  0133  2963               	goto	l1682
  1234  0134                     u1260:
  1235  0134                     l1668:
  1236                           
  1237                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1238  0134  0833               	movf	sprintf@flag,w
  1239  0135  3903               	andlw	3
  1240  0136  1903               	btfsc	3,2
  1241  0137  2939               	goto	u1271
  1242  0138  293A               	goto	u1270
  1243  0139                     u1271:
  1244  0139  2945               	goto	l1674
  1245  013A                     u1270:
  1246  013A                     l1670:
  1247                           
  1248                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1249  013A  302D               	movlw	45
  1250  013B  00AC               	movwf	??_sprintf
  1251  013C  0836               	movf	sprintf@sp,w
  1252  013D  0084               	movwf	4
  1253  013E  082C               	movf	??_sprintf,w
  1254  013F  1383               	bcf	3,7	;select IRP bank0
  1255  0140  0080               	movwf	0
  1256  0141                     l1672:
  1257  0141  3001               	movlw	1
  1258  0142  00AC               	movwf	??_sprintf
  1259  0143  082C               	movf	??_sprintf,w
  1260  0144  07B6               	addwf	sprintf@sp,f
  1261  0145                     l1674:
  1262                           
  1263                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1264  0145  0834               	movf	sprintf@width,w
  1265  0146  0435               	iorwf	sprintf@width+1,w
  1266  0147  1903               	btfsc	3,2
  1267  0148  294A               	goto	u1281
  1268  0149  294B               	goto	u1280
  1269  014A                     u1281:
  1270  014A  2991               	goto	l1696
  1271  014B                     u1280:
  1272  014B                     l1676:
  1273                           
  1274                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1275  014B  3030               	movlw	48
  1276  014C  00AC               	movwf	??_sprintf
  1277  014D  0836               	movf	sprintf@sp,w
  1278  014E  0084               	movwf	4
  1279  014F  082C               	movf	??_sprintf,w
  1280  0150  1383               	bcf	3,7	;select IRP bank0
  1281  0151  0080               	movwf	0
  1282  0152                     l1678:
  1283  0152  3001               	movlw	1
  1284  0153  00AC               	movwf	??_sprintf
  1285  0154  082C               	movf	??_sprintf,w
  1286  0155  07B6               	addwf	sprintf@sp,f
  1287  0156                     l1680:
  1288  0156  30FF               	movlw	255
  1289  0157  07B4               	addwf	sprintf@width,f
  1290  0158  1803               	skipnc
  1291  0159  0AB5               	incf	sprintf@width+1,f
  1292  015A  30FF               	movlw	255
  1293  015B  07B5               	addwf	sprintf@width+1,f
  1294  015C  0834               	movf	sprintf@width,w
  1295  015D  0435               	iorwf	sprintf@width+1,w
  1296  015E  1D03               	btfss	3,2
  1297  015F  2961               	goto	u1291
  1298  0160  2962               	goto	u1290
  1299  0161                     u1291:
  1300  0161  294B               	goto	l1676
  1301  0162                     u1290:
  1302  0162  2991               	goto	l1696
  1303  0163                     l1682:
  1304                           
  1305                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1306  0163  0834               	movf	sprintf@width,w
  1307  0164  0435               	iorwf	sprintf@width+1,w
  1308  0165  1903               	btfsc	3,2
  1309  0166  2968               	goto	u1301
  1310  0167  2969               	goto	u1300
  1311  0168                     u1301:
  1312  0168  2980               	goto	l1690
  1313  0169                     u1300:
  1314  0169                     l1684:
  1315                           
  1316                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1317  0169  3020               	movlw	32
  1318  016A  00AC               	movwf	??_sprintf
  1319  016B  0836               	movf	sprintf@sp,w
  1320  016C  0084               	movwf	4
  1321  016D  082C               	movf	??_sprintf,w
  1322  016E  1383               	bcf	3,7	;select IRP bank0
  1323  016F  0080               	movwf	0
  1324  0170                     l1686:
  1325  0170  3001               	movlw	1
  1326  0171  00AC               	movwf	??_sprintf
  1327  0172  082C               	movf	??_sprintf,w
  1328  0173  07B6               	addwf	sprintf@sp,f
  1329  0174                     l1688:
  1330  0174  30FF               	movlw	255
  1331  0175  07B4               	addwf	sprintf@width,f
  1332  0176  1803               	skipnc
  1333  0177  0AB5               	incf	sprintf@width+1,f
  1334  0178  30FF               	movlw	255
  1335  0179  07B5               	addwf	sprintf@width+1,f
  1336  017A  0834               	movf	sprintf@width,w
  1337  017B  0435               	iorwf	sprintf@width+1,w
  1338  017C  1D03               	btfss	3,2
  1339  017D  297F               	goto	u1311
  1340  017E  2980               	goto	u1310
  1341  017F                     u1311:
  1342  017F  2969               	goto	l1684
  1343  0180                     u1310:
  1344  0180                     l1690:
  1345                           
  1346                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1347  0180  0833               	movf	sprintf@flag,w
  1348  0181  3903               	andlw	3
  1349  0182  1903               	btfsc	3,2
  1350  0183  2985               	goto	u1321
  1351  0184  2986               	goto	u1320
  1352  0185                     u1321:
  1353  0185  2991               	goto	l1696
  1354  0186                     u1320:
  1355  0186                     l1692:
  1356                           
  1357                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1358  0186  302D               	movlw	45
  1359  0187  00AC               	movwf	??_sprintf
  1360  0188  0836               	movf	sprintf@sp,w
  1361  0189  0084               	movwf	4
  1362  018A  082C               	movf	??_sprintf,w
  1363  018B  1383               	bcf	3,7	;select IRP bank0
  1364  018C  0080               	movwf	0
  1365  018D                     l1694:
  1366  018D  3001               	movlw	1
  1367  018E  00AC               	movwf	??_sprintf
  1368  018F  082C               	movf	??_sprintf,w
  1369  0190  07B6               	addwf	sprintf@sp,f
  1370  0191                     l1696:
  1371                           
  1372                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1373  0191  0837               	movf	sprintf@c,w
  1374  0192  00AC               	movwf	??_sprintf
  1375  0193  082C               	movf	??_sprintf,w
  1376  0194  00B0               	movwf	sprintf@prec
  1377                           
  1378                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1379  0195  29D1               	goto	l1704
  1380  0196                     l1698:
  1381                           
  1382                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1383  0196  300A               	movlw	10
  1384  0197  00A0               	movwf	___lwmod@divisor
  1385  0198  3000               	movlw	0
  1386  0199  00A1               	movwf	___lwmod@divisor+1
  1387  019A  0830               	movf	sprintf@prec,w
  1388  019B  00AC               	movwf	??_sprintf
  1389  019C  072C               	addwf	??_sprintf,w
  1390  019D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1391  019E  0084               	movwf	4
  1392  019F  120A  118A  24AA  120A  118A  	fcall	stringdir
  1393  01A4  00F2               	movwf	___lwdiv@divisor
  1394  01A5  120A  118A  24AA  120A  118A  	fcall	stringdir
  1395  01AA  00F3               	movwf	___lwdiv@divisor+1
  1396  01AB  0832               	movf	sprintf@val+1,w
  1397  01AC  00F5               	movwf	___lwdiv@dividend+1
  1398  01AD  0831               	movf	sprintf@val,w
  1399  01AE  00F4               	movwf	___lwdiv@dividend
  1400  01AF  120A  118A  22F5  120A  118A  	fcall	___lwdiv
  1401  01B4  0873               	movf	?___lwdiv+1,w
  1402  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1403  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1404  01B7  00A3               	movwf	___lwmod@dividend+1
  1405  01B8  0872               	movf	?___lwdiv,w
  1406  01B9  00A2               	movwf	___lwmod@dividend
  1407  01BA  120A  118A  2339  120A  118A  	fcall	___lwmod
  1408  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1409  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1410  01C1  0820               	movf	?___lwmod,w
  1411  01C2  3E30               	addlw	48
  1412  01C3  00AD               	movwf	??_sprintf+1
  1413  01C4  082D               	movf	??_sprintf+1,w
  1414  01C5  00B7               	movwf	sprintf@c
  1415  01C6                     l1700:
  1416                           
  1417                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1418  01C6  0837               	movf	sprintf@c,w
  1419  01C7  00AC               	movwf	??_sprintf
  1420  01C8  0836               	movf	sprintf@sp,w
  1421  01C9  0084               	movwf	4
  1422  01CA  082C               	movf	??_sprintf,w
  1423  01CB  1383               	bcf	3,7	;select IRP bank0
  1424  01CC  0080               	movwf	0
  1425  01CD                     l1702:
  1426  01CD  3001               	movlw	1
  1427  01CE  00AC               	movwf	??_sprintf
  1428  01CF  082C               	movf	??_sprintf,w
  1429  01D0  07B6               	addwf	sprintf@sp,f
  1430  01D1                     l1704:
  1431                           
  1432                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1433  01D1  30FF               	movlw	255
  1434  01D2  00AC               	movwf	??_sprintf
  1435  01D3  082C               	movf	??_sprintf,w
  1436  01D4  07B0               	addwf	sprintf@prec,f
  1437  01D5  0A30               	incf	sprintf@prec,w
  1438  01D6  1D03               	btfss	3,2
  1439  01D7  29D9               	goto	u1331
  1440  01D8  29DA               	goto	u1330
  1441  01D9                     u1331:
  1442  01D9  2996               	goto	l1698
  1443  01DA                     u1330:
  1444  01DA                     l1706:
  1445                           
  1446                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1447  01DA  3001               	movlw	1
  1448  01DB  07A5               	addwf	sprintf@f,f
  1449  01DC  30FF               	movlw	-1
  1450  01DD  0725               	addwf	sprintf@f,w
  1451  01DE  0084               	movwf	4
  1452  01DF  120A  118A  24AA  120A  118A  	fcall	stringdir
  1453  01E4  00AC               	movwf	??_sprintf
  1454  01E5  082C               	movf	??_sprintf,w
  1455  01E6  00B7               	movwf	sprintf@c
  1456  01E7  0837               	movf	sprintf@c,w
  1457  01E8  1D03               	btfss	3,2
  1458  01E9  29EB               	goto	u1341
  1459  01EA  29EC               	goto	u1340
  1460  01EB                     u1341:
  1461  01EB  2825               	goto	l1604
  1462  01EC                     u1340:
  1463  01EC                     l1708:
  1464                           
  1465                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1466  01EC  0836               	movf	sprintf@sp,w
  1467  01ED  0084               	movwf	4
  1468  01EE  1383               	bcf	3,7	;select IRP bank0
  1469  01EF  0180               	clrf	0
  1470  01F0                     l261:
  1471  01F0  0008               	return
  1472  01F1                     __end_of_sprintf:
  1473                           
  1474                           	psect	text3
  1475  04E3                     __ptext3:	
  1476 ;; *************** function _isdigit *****************
  1477 ;; Defined at:
  1478 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  c               1    wreg     unsigned char 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  c               1    3[COMMON] unsigned char 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;		None               void
  1485 ;; Registers used:
  1486 ;;		wreg, status,2, status,0
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1492 ;;      Params:         0       0       0       0       0
  1493 ;;      Locals:         2       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0
  1495 ;;      Totals:         2       0       0       0       0
  1496 ;;Total ram usage:        2 bytes
  1497 ;; Hardware stack levels used: 1
  1498 ;; Hardware stack levels required when called: 2
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_sprintf
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506  04E3                     _isdigit:	
  1507                           ;psect for function _isdigit
  1508                           
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1512                           ;isdigit@c stored from wreg
  1513  04E3  00F3               	movwf	isdigit@c
  1514  04E4                     l1218:
  1515  04E4  01F2               	clrf	_isdigit$732
  1516  04E5                     l1220:
  1517  04E5  303A               	movlw	58
  1518  04E6  0273               	subwf	isdigit@c,w
  1519  04E7  1803               	skipnc
  1520  04E8  2CEA               	goto	u611
  1521  04E9  2CEB               	goto	u610
  1522  04EA                     u611:
  1523  04EA  2CF3               	goto	l1226
  1524  04EB                     u610:
  1525  04EB                     l1222:
  1526  04EB  3030               	movlw	48
  1527  04EC  0273               	subwf	isdigit@c,w
  1528  04ED  1C03               	skipc
  1529  04EE  2CF0               	goto	u621
  1530  04EF  2CF1               	goto	u620
  1531  04F0                     u621:
  1532  04F0  2CF3               	goto	l1226
  1533  04F1                     u620:
  1534  04F1                     l1224:
  1535  04F1  01F2               	clrf	_isdigit$732
  1536  04F2  0AF2               	incf	_isdigit$732,f
  1537  04F3                     l1226:
  1538  04F3  0C72               	rrf	_isdigit$732,w
  1539  04F4                     l718:
  1540  04F4  0008               	return
  1541  04F5                     __end_of_isdigit:
  1542                           
  1543                           	psect	text4
  1544  0442                     __ptext4:	
  1545 ;; *************** function ___wmul *****************
  1546 ;; Defined at:
  1547 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  multiplier      2    2[COMMON] unsigned int 
  1550 ;;  multiplicand    2    4[COMMON] unsigned int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  product         2    6[COMMON] unsigned int 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  2    2[COMMON] unsigned int 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         4       0       0       0       0
  1563 ;;      Locals:         2       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0
  1565 ;;      Totals:         6       0       0       0       0
  1566 ;;Total ram usage:        6 bytes
  1567 ;; Hardware stack levels used: 1
  1568 ;; Hardware stack levels required when called: 2
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_sprintf
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576  0442                     ___wmul:	
  1577                           ;psect for function ___wmul
  1578                           
  1579  0442                     l1230:	
  1580                           ;incstack = 0
  1581                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1582                           
  1583  0442  01F6               	clrf	___wmul@product
  1584  0443  01F7               	clrf	___wmul@product+1
  1585  0444                     l1232:
  1586  0444  1C72               	btfss	___wmul@multiplier,0
  1587  0445  2C47               	goto	u631
  1588  0446  2C48               	goto	u630
  1589  0447                     u631:
  1590  0447  2C4E               	goto	l265
  1591  0448                     u630:
  1592  0448                     l1234:
  1593  0448  0874               	movf	___wmul@multiplicand,w
  1594  0449  07F6               	addwf	___wmul@product,f
  1595  044A  1803               	skipnc
  1596  044B  0AF7               	incf	___wmul@product+1,f
  1597  044C  0875               	movf	___wmul@multiplicand+1,w
  1598  044D  07F7               	addwf	___wmul@product+1,f
  1599  044E                     l265:
  1600  044E  3001               	movlw	1
  1601  044F                     u645:
  1602  044F  1003               	clrc
  1603  0450  0DF4               	rlf	___wmul@multiplicand,f
  1604  0451  0DF5               	rlf	___wmul@multiplicand+1,f
  1605  0452  3EFF               	addlw	-1
  1606  0453  1D03               	skipz
  1607  0454  2C4F               	goto	u645
  1608  0455                     l1236:
  1609  0455  3001               	movlw	1
  1610  0456                     u655:
  1611  0456  1003               	clrc
  1612  0457  0CF3               	rrf	___wmul@multiplier+1,f
  1613  0458  0CF2               	rrf	___wmul@multiplier,f
  1614  0459  3EFF               	addlw	-1
  1615  045A  1D03               	skipz
  1616  045B  2C56               	goto	u655
  1617  045C                     l1238:
  1618  045C  0872               	movf	___wmul@multiplier,w
  1619  045D  0473               	iorwf	___wmul@multiplier+1,w
  1620  045E  1D03               	btfss	3,2
  1621  045F  2C61               	goto	u661
  1622  0460  2C62               	goto	u660
  1623  0461                     u661:
  1624  0461  2C44               	goto	l1232
  1625  0462                     u660:
  1626  0462                     l1240:
  1627  0462  0877               	movf	___wmul@product+1,w
  1628  0463  00F3               	movwf	?___wmul+1
  1629  0464  0876               	movf	___wmul@product,w
  1630  0465  00F2               	movwf	?___wmul
  1631  0466                     l267:
  1632  0466  0008               	return
  1633  0467                     __end_of___wmul:
  1634                           
  1635                           	psect	text5
  1636  0339                     __ptext5:	
  1637 ;; *************** function ___lwmod *****************
  1638 ;; Defined at:
  1639 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  divisor         2    0[BANK0 ] unsigned int 
  1642 ;;  dividend        2    2[BANK0 ] unsigned int 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  counter         1    4[BANK0 ] unsigned char 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  2    0[BANK0 ] unsigned int 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1654 ;;      Params:         0       4       0       0       0
  1655 ;;      Locals:         0       1       0       0       0
  1656 ;;      Temps:          1       0       0       0       0
  1657 ;;      Totals:         1       5       0       0       0
  1658 ;;Total ram usage:        6 bytes
  1659 ;; Hardware stack levels used: 1
  1660 ;; Hardware stack levels required when called: 2
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_sprintf
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668  0339                     ___lwmod:	
  1669                           ;psect for function ___lwmod
  1670                           
  1671  0339                     l1580:	
  1672                           ;incstack = 0
  1673                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1674                           
  1675  0339  1283               	bcf	3,5	;RP0=0, select bank0
  1676  033A  1303               	bcf	3,6	;RP1=0, select bank0
  1677  033B  0820               	movf	___lwmod@divisor,w
  1678  033C  0421               	iorwf	___lwmod@divisor+1,w
  1679  033D  1903               	btfsc	3,2
  1680  033E  2B40               	goto	u1111
  1681  033F  2B41               	goto	u1110
  1682  0340                     u1111:
  1683  0340  2B70               	goto	l1598
  1684  0341                     u1110:
  1685  0341                     l1582:
  1686  0341  01A4               	clrf	___lwmod@counter
  1687  0342  0AA4               	incf	___lwmod@counter,f
  1688  0343  2B4F               	goto	l1588
  1689  0344                     l1584:
  1690  0344  3001               	movlw	1
  1691  0345                     u1125:
  1692  0345  1003               	clrc
  1693  0346  0DA0               	rlf	___lwmod@divisor,f
  1694  0347  0DA1               	rlf	___lwmod@divisor+1,f
  1695  0348  3EFF               	addlw	-1
  1696  0349  1D03               	skipz
  1697  034A  2B45               	goto	u1125
  1698  034B                     l1586:
  1699  034B  3001               	movlw	1
  1700  034C  00FA               	movwf	??___lwmod
  1701  034D  087A               	movf	??___lwmod,w
  1702  034E  07A4               	addwf	___lwmod@counter,f
  1703  034F                     l1588:
  1704  034F  1FA1               	btfss	___lwmod@divisor+1,7
  1705  0350  2B52               	goto	u1131
  1706  0351  2B53               	goto	u1130
  1707  0352                     u1131:
  1708  0352  2B44               	goto	l1584
  1709  0353                     u1130:
  1710  0353                     l1590:
  1711  0353  0821               	movf	___lwmod@divisor+1,w
  1712  0354  0223               	subwf	___lwmod@dividend+1,w
  1713  0355  1D03               	skipz
  1714  0356  2B59               	goto	u1145
  1715  0357  0820               	movf	___lwmod@divisor,w
  1716  0358  0222               	subwf	___lwmod@dividend,w
  1717  0359                     u1145:
  1718  0359  1C03               	skipc
  1719  035A  2B5C               	goto	u1141
  1720  035B  2B5D               	goto	u1140
  1721  035C                     u1141:
  1722  035C  2B63               	goto	l1594
  1723  035D                     u1140:
  1724  035D                     l1592:
  1725  035D  0820               	movf	___lwmod@divisor,w
  1726  035E  02A2               	subwf	___lwmod@dividend,f
  1727  035F  0821               	movf	___lwmod@divisor+1,w
  1728  0360  1C03               	skipc
  1729  0361  03A3               	decf	___lwmod@dividend+1,f
  1730  0362  02A3               	subwf	___lwmod@dividend+1,f
  1731  0363                     l1594:
  1732  0363  3001               	movlw	1
  1733  0364                     u1155:
  1734  0364  1003               	clrc
  1735  0365  0CA1               	rrf	___lwmod@divisor+1,f
  1736  0366  0CA0               	rrf	___lwmod@divisor,f
  1737  0367  3EFF               	addlw	-1
  1738  0368  1D03               	skipz
  1739  0369  2B64               	goto	u1155
  1740  036A                     l1596:
  1741  036A  3001               	movlw	1
  1742  036B  02A4               	subwf	___lwmod@counter,f
  1743  036C  1D03               	btfss	3,2
  1744  036D  2B6F               	goto	u1161
  1745  036E  2B70               	goto	u1160
  1746  036F                     u1161:
  1747  036F  2B53               	goto	l1590
  1748  0370                     u1160:
  1749  0370                     l1598:
  1750  0370  0823               	movf	___lwmod@dividend+1,w
  1751  0371  00A1               	movwf	?___lwmod+1
  1752  0372  0822               	movf	___lwmod@dividend,w
  1753  0373  00A0               	movwf	?___lwmod
  1754  0374                     l547:
  1755  0374  0008               	return
  1756  0375                     __end_of___lwmod:
  1757                           
  1758                           	psect	text6
  1759  02F5                     __ptext6:	
  1760 ;; *************** function ___lwdiv *****************
  1761 ;; Defined at:
  1762 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  divisor         2    2[COMMON] unsigned int 
  1765 ;;  dividend        2    4[COMMON] unsigned int 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  quotient        2    7[COMMON] unsigned int 
  1768 ;;  counter         1    9[COMMON] unsigned char 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  2    2[COMMON] unsigned int 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         4       0       0       0       0
  1779 ;;      Locals:         3       0       0       0       0
  1780 ;;      Temps:          1       0       0       0       0
  1781 ;;      Totals:         8       0       0       0       0
  1782 ;;Total ram usage:        8 bytes
  1783 ;; Hardware stack levels used: 1
  1784 ;; Hardware stack levels required when called: 2
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_sprintf
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792  02F5                     ___lwdiv:	
  1793                           ;psect for function ___lwdiv
  1794                           
  1795  02F5                     l1244:	
  1796                           ;incstack = 0
  1797                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1798                           
  1799  02F5  01F7               	clrf	___lwdiv@quotient
  1800  02F6  01F8               	clrf	___lwdiv@quotient+1
  1801  02F7                     l1246:
  1802  02F7  0872               	movf	___lwdiv@divisor,w
  1803  02F8  0473               	iorwf	___lwdiv@divisor+1,w
  1804  02F9  1903               	btfsc	3,2
  1805  02FA  2AFC               	goto	u671
  1806  02FB  2AFD               	goto	u670
  1807  02FC                     u671:
  1808  02FC  2B34               	goto	l1266
  1809  02FD                     u670:
  1810  02FD                     l1248:
  1811  02FD  01F9               	clrf	___lwdiv@counter
  1812  02FE  0AF9               	incf	___lwdiv@counter,f
  1813  02FF  2B0B               	goto	l1254
  1814  0300                     l1250:
  1815  0300  3001               	movlw	1
  1816  0301                     u685:
  1817  0301  1003               	clrc
  1818  0302  0DF2               	rlf	___lwdiv@divisor,f
  1819  0303  0DF3               	rlf	___lwdiv@divisor+1,f
  1820  0304  3EFF               	addlw	-1
  1821  0305  1D03               	skipz
  1822  0306  2B01               	goto	u685
  1823  0307                     l1252:
  1824  0307  3001               	movlw	1
  1825  0308  00F6               	movwf	??___lwdiv
  1826  0309  0876               	movf	??___lwdiv,w
  1827  030A  07F9               	addwf	___lwdiv@counter,f
  1828  030B                     l1254:
  1829  030B  1FF3               	btfss	___lwdiv@divisor+1,7
  1830  030C  2B0E               	goto	u691
  1831  030D  2B0F               	goto	u690
  1832  030E                     u691:
  1833  030E  2B00               	goto	l1250
  1834  030F                     u690:
  1835  030F                     l1256:
  1836  030F  3001               	movlw	1
  1837  0310                     u705:
  1838  0310  1003               	clrc
  1839  0311  0DF7               	rlf	___lwdiv@quotient,f
  1840  0312  0DF8               	rlf	___lwdiv@quotient+1,f
  1841  0313  3EFF               	addlw	-1
  1842  0314  1D03               	skipz
  1843  0315  2B10               	goto	u705
  1844  0316  0873               	movf	___lwdiv@divisor+1,w
  1845  0317  0275               	subwf	___lwdiv@dividend+1,w
  1846  0318  1D03               	skipz
  1847  0319  2B1C               	goto	u715
  1848  031A  0872               	movf	___lwdiv@divisor,w
  1849  031B  0274               	subwf	___lwdiv@dividend,w
  1850  031C                     u715:
  1851  031C  1C03               	skipc
  1852  031D  2B1F               	goto	u711
  1853  031E  2B20               	goto	u710
  1854  031F                     u711:
  1855  031F  2B27               	goto	l1262
  1856  0320                     u710:
  1857  0320                     l1258:
  1858  0320  0872               	movf	___lwdiv@divisor,w
  1859  0321  02F4               	subwf	___lwdiv@dividend,f
  1860  0322  0873               	movf	___lwdiv@divisor+1,w
  1861  0323  1C03               	skipc
  1862  0324  03F5               	decf	___lwdiv@dividend+1,f
  1863  0325  02F5               	subwf	___lwdiv@dividend+1,f
  1864  0326                     l1260:
  1865  0326  1477               	bsf	___lwdiv@quotient,0
  1866  0327                     l1262:
  1867  0327  3001               	movlw	1
  1868  0328                     u725:
  1869  0328  1003               	clrc
  1870  0329  0CF3               	rrf	___lwdiv@divisor+1,f
  1871  032A  0CF2               	rrf	___lwdiv@divisor,f
  1872  032B  3EFF               	addlw	-1
  1873  032C  1D03               	skipz
  1874  032D  2B28               	goto	u725
  1875  032E                     l1264:
  1876  032E  3001               	movlw	1
  1877  032F  02F9               	subwf	___lwdiv@counter,f
  1878  0330  1D03               	btfss	3,2
  1879  0331  2B33               	goto	u731
  1880  0332  2B34               	goto	u730
  1881  0333                     u731:
  1882  0333  2B0F               	goto	l1256
  1883  0334                     u730:
  1884  0334                     l1266:
  1885  0334  0878               	movf	___lwdiv@quotient+1,w
  1886  0335  00F3               	movwf	?___lwdiv+1
  1887  0336  0877               	movf	___lwdiv@quotient,w
  1888  0337  00F2               	movwf	?___lwdiv
  1889  0338                     l537:
  1890  0338  0008               	return
  1891  0339                     __end_of___lwdiv:
  1892                           
  1893                           	psect	text7
  1894  0489                     __ptext7:	
  1895 ;; *************** function _Lcd_Write_String *****************
  1896 ;; Defined at:
  1897 ;;		line 96 in file "./lcd.h"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  a               1    wreg     PTR unsigned char 
  1900 ;;		 -> buffer(10), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  a               1   10[COMMON] PTR unsigned char 
  1903 ;;		 -> buffer(10), 
  1904 ;;  i               2    8[COMMON] int 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1914 ;;      Params:         0       0       0       0       0
  1915 ;;      Locals:         3       0       0       0       0
  1916 ;;      Temps:          1       0       0       0       0
  1917 ;;      Totals:         4       0       0       0       0
  1918 ;;Total ram usage:        4 bytes
  1919 ;; Hardware stack levels used: 1
  1920 ;; Hardware stack levels required when called: 4
  1921 ;; This function calls:
  1922 ;;		_Lcd_Write_Char
  1923 ;; This function is called by:
  1924 ;;		_setCronometro
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928  0489                     _Lcd_Write_String:	
  1929                           ;psect for function _Lcd_Write_String
  1930                           
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1934                           ;Lcd_Write_String@a stored from wreg
  1935  0489  00FA               	movwf	Lcd_Write_String@a
  1936  048A                     l1312:
  1937                           
  1938                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  1939  048A  01F8               	clrf	Lcd_Write_String@i
  1940  048B  01F9               	clrf	Lcd_Write_String@i+1
  1941  048C  2C9E               	goto	l1318
  1942  048D                     l1314:
  1943                           
  1944                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  1945  048D  0878               	movf	Lcd_Write_String@i,w
  1946  048E  077A               	addwf	Lcd_Write_String@a,w
  1947  048F  00F7               	movwf	??_Lcd_Write_String
  1948  0490  0877               	movf	??_Lcd_Write_String,w
  1949  0491  0084               	movwf	4
  1950  0492  0800               	movf	0,w
  1951  0493  120A  118A  2375  120A  118A  	fcall	_Lcd_Write_Char
  1952  0498                     l1316:
  1953  0498  3001               	movlw	1
  1954  0499  07F8               	addwf	Lcd_Write_String@i,f
  1955  049A  1803               	skipnc
  1956  049B  0AF9               	incf	Lcd_Write_String@i+1,f
  1957  049C  3000               	movlw	0
  1958  049D  07F9               	addwf	Lcd_Write_String@i+1,f
  1959  049E                     l1318:
  1960  049E  0878               	movf	Lcd_Write_String@i,w
  1961  049F  077A               	addwf	Lcd_Write_String@a,w
  1962  04A0  00F7               	movwf	??_Lcd_Write_String
  1963  04A1  0877               	movf	??_Lcd_Write_String,w
  1964  04A2  0084               	movwf	4
  1965  04A3  1383               	bcf	3,7	;select IRP bank0
  1966  04A4  0800               	movf	0,w
  1967  04A5  1D03               	btfss	3,2
  1968  04A6  2CA8               	goto	u841
  1969  04A7  2CA9               	goto	u840
  1970  04A8                     u841:
  1971  04A8  2C8D               	goto	l1314
  1972  04A9                     u840:
  1973  04A9                     l85:
  1974  04A9  0008               	return
  1975  04AA                     __end_of_Lcd_Write_String:
  1976                           
  1977                           	psect	text8
  1978  0375                     __ptext8:	
  1979 ;; *************** function _Lcd_Write_Char *****************
  1980 ;; Defined at:
  1981 ;;		line 80 in file "./lcd.h"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  a               1    wreg     unsigned char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  a               1    6[COMMON] unsigned char 
  1986 ;;  y               1    5[COMMON] unsigned char 
  1987 ;;  temp            1    4[COMMON] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1997 ;;      Params:         0       0       0       0       0
  1998 ;;      Locals:         3       0       0       0       0
  1999 ;;      Temps:          1       0       0       0       0
  2000 ;;      Totals:         4       0       0       0       0
  2001 ;;Total ram usage:        4 bytes
  2002 ;; Hardware stack levels used: 1
  2003 ;; Hardware stack levels required when called: 3
  2004 ;; This function calls:
  2005 ;;		_Lcd_Port
  2006 ;; This function is called by:
  2007 ;;		_Lcd_Write_String
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011  0375                     _Lcd_Write_Char:	
  2012                           ;psect for function _Lcd_Write_Char
  2013                           
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2017                           ;Lcd_Write_Char@a stored from wreg
  2018  0375  00F6               	movwf	Lcd_Write_Char@a
  2019  0376                     l1198:
  2020                           
  2021                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2022  0376  0876               	movf	Lcd_Write_Char@a,w
  2023  0377  390F               	andlw	15
  2024  0378  00F3               	movwf	??_Lcd_Write_Char
  2025  0379  0873               	movf	??_Lcd_Write_Char,w
  2026  037A  00F4               	movwf	Lcd_Write_Char@temp
  2027                           
  2028                           ;./lcd.h: 84:    y = a&0xF0;
  2029  037B  0876               	movf	Lcd_Write_Char@a,w
  2030  037C  39F0               	andlw	240
  2031  037D  00F3               	movwf	??_Lcd_Write_Char
  2032  037E  0873               	movf	??_Lcd_Write_Char,w
  2033  037F  00F5               	movwf	Lcd_Write_Char@y
  2034  0380                     l1200:
  2035                           
  2036                           ;./lcd.h: 85:    RD2 = 1;
  2037  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0382  1508               	bsf	8,2	;volatile
  2040  0383                     l1202:
  2041                           
  2042                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2043  0383  0875               	movf	Lcd_Write_Char@y,w
  2044  0384  00F3               	movwf	??_Lcd_Write_Char
  2045  0385  3004               	movlw	4
  2046  0386                     u605:
  2047  0386  1003               	clrc
  2048  0387  0CF3               	rrf	??_Lcd_Write_Char,f
  2049  0388  3EFF               	addlw	-1
  2050  0389  1D03               	skipz
  2051  038A  2B86               	goto	u605
  2052  038B  0873               	movf	??_Lcd_Write_Char,w
  2053  038C  120A  118A  2467  120A  118A  	fcall	_Lcd_Port
  2054  0391                     l1204:
  2055                           
  2056                           ;./lcd.h: 87:    RD3 = 1;
  2057  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0393  1588               	bsf	8,3	;volatile
  2060  0394                     l1206:
  2061                           
  2062                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2063  0394  3042               	movlw	66
  2064  0395  00F3               	movwf	??_Lcd_Write_Char
  2065  0396                     u1387:
  2066  0396  0BF3               	decfsz	??_Lcd_Write_Char,f
  2067  0397  2B96               	goto	u1387
  2068  0398  0000               	nop
  2069  0399                     l1208:
  2070                           
  2071                           ;./lcd.h: 89:    RD3 = 0;
  2072  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2073  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2074  039B  1188               	bcf	8,3	;volatile
  2075  039C                     l1210:
  2076                           
  2077                           ;./lcd.h: 90:    Lcd_Port(temp);
  2078  039C  0874               	movf	Lcd_Write_Char@temp,w
  2079  039D  120A  118A  2467  120A  118A  	fcall	_Lcd_Port
  2080  03A2                     l1212:
  2081                           
  2082                           ;./lcd.h: 91:    RD3 = 1;
  2083  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2084  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2085  03A4  1588               	bsf	8,3	;volatile
  2086  03A5                     l1214:
  2087                           
  2088                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2089  03A5  3042               	movlw	66
  2090  03A6  00F3               	movwf	??_Lcd_Write_Char
  2091  03A7                     u1397:
  2092  03A7  0BF3               	decfsz	??_Lcd_Write_Char,f
  2093  03A8  2BA7               	goto	u1397
  2094  03A9  0000               	nop
  2095  03AA                     l1216:
  2096                           
  2097                           ;./lcd.h: 93:    RD3 = 0;
  2098  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2099  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2100  03AC  1188               	bcf	8,3	;volatile
  2101  03AD                     l79:
  2102  03AD  0008               	return
  2103  03AE                     __end_of_Lcd_Write_Char:
  2104                           
  2105                           	psect	text9
  2106  024F                     __ptext9:	
  2107 ;; *************** function _Lcd_Set_Cursor *****************
  2108 ;; Defined at:
  2109 ;;		line 40 in file "./lcd.h"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  a               1    wreg     unsigned char 
  2112 ;;  b               1    6[COMMON] unsigned char 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  a               1    0[BANK0 ] unsigned char 
  2115 ;;  temp            1    3[BANK0 ] unsigned char 
  2116 ;;  y               1    2[BANK0 ] unsigned char 
  2117 ;;  z               1    1[BANK0 ] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0, pclath, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         1       0       0       0       0
  2128 ;;      Locals:         0       4       0       0       0
  2129 ;;      Temps:          2       0       0       0       0
  2130 ;;      Totals:         3       4       0       0       0
  2131 ;;Total ram usage:        7 bytes
  2132 ;; Hardware stack levels used: 1
  2133 ;; Hardware stack levels required when called: 4
  2134 ;; This function calls:
  2135 ;;		_Lcd_Cmd
  2136 ;; This function is called by:
  2137 ;;		_setCronometro
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141  024F                     _Lcd_Set_Cursor:	
  2142                           ;psect for function _Lcd_Set_Cursor
  2143                           
  2144                           
  2145                           ;incstack = 0
  2146                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2147                           ;Lcd_Set_Cursor@a stored from wreg
  2148  024F  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0250  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0251  00A0               	movwf	Lcd_Set_Cursor@a
  2151  0252                     l1292:
  2152                           
  2153                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2154  0252  0320               	decf	Lcd_Set_Cursor@a,w
  2155  0253  1D03               	btfss	3,2
  2156  0254  2A56               	goto	u801
  2157  0255  2A57               	goto	u800
  2158  0256                     u801:
  2159  0256  2A7C               	goto	l1302
  2160  0257                     u800:
  2161  0257                     l1294:
  2162                           
  2163                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2164  0257  0876               	movf	Lcd_Set_Cursor@b,w
  2165  0258  3E7F               	addlw	127
  2166  0259  00F7               	movwf	??_Lcd_Set_Cursor
  2167  025A  0877               	movf	??_Lcd_Set_Cursor,w
  2168  025B  00A3               	movwf	Lcd_Set_Cursor@temp
  2169                           
  2170                           ;./lcd.h: 46:   z = temp>>4;
  2171  025C  0823               	movf	Lcd_Set_Cursor@temp,w
  2172  025D  00F7               	movwf	??_Lcd_Set_Cursor
  2173  025E  3004               	movlw	4
  2174  025F                     u815:
  2175  025F  1003               	clrc
  2176  0260  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2177  0261  3EFF               	addlw	-1
  2178  0262  1D03               	skipz
  2179  0263  2A5F               	goto	u815
  2180  0264  0877               	movf	??_Lcd_Set_Cursor,w
  2181  0265  00F8               	movwf	??_Lcd_Set_Cursor+1
  2182  0266  0878               	movf	??_Lcd_Set_Cursor+1,w
  2183  0267  00A1               	movwf	Lcd_Set_Cursor@z
  2184  0268                     l1296:
  2185                           
  2186                           ;./lcd.h: 47:   y = temp & 0x0F;
  2187  0268  0823               	movf	Lcd_Set_Cursor@temp,w
  2188  0269  390F               	andlw	15
  2189  026A  00F7               	movwf	??_Lcd_Set_Cursor
  2190  026B  0877               	movf	??_Lcd_Set_Cursor,w
  2191  026C  00A2               	movwf	Lcd_Set_Cursor@y
  2192  026D                     l1298:
  2193                           
  2194                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2195  026D  0821               	movf	Lcd_Set_Cursor@z,w
  2196  026E  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2197  0273                     l1300:
  2198                           
  2199                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2200  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0275  0822               	movf	Lcd_Set_Cursor@y,w
  2203  0276  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2204                           
  2205                           ;./lcd.h: 50:  }
  2206  027B  2AA6               	goto	l73
  2207  027C                     l1302:
  2208  027C  3002               	movlw	2
  2209  027D  0620               	xorwf	Lcd_Set_Cursor@a,w
  2210  027E  1D03               	btfss	3,2
  2211  027F  2A81               	goto	u821
  2212  0280  2A82               	goto	u820
  2213  0281                     u821:
  2214  0281  2AA6               	goto	l73
  2215  0282                     u820:
  2216  0282                     l1304:
  2217                           
  2218                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2219  0282  0876               	movf	Lcd_Set_Cursor@b,w
  2220  0283  3EBF               	addlw	191
  2221  0284  00F7               	movwf	??_Lcd_Set_Cursor
  2222  0285  0877               	movf	??_Lcd_Set_Cursor,w
  2223  0286  00A3               	movwf	Lcd_Set_Cursor@temp
  2224                           
  2225                           ;./lcd.h: 54:   z = temp>>4;
  2226  0287  0823               	movf	Lcd_Set_Cursor@temp,w
  2227  0288  00F7               	movwf	??_Lcd_Set_Cursor
  2228  0289  3004               	movlw	4
  2229  028A                     u835:
  2230  028A  1003               	clrc
  2231  028B  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2232  028C  3EFF               	addlw	-1
  2233  028D  1D03               	skipz
  2234  028E  2A8A               	goto	u835
  2235  028F  0877               	movf	??_Lcd_Set_Cursor,w
  2236  0290  00F8               	movwf	??_Lcd_Set_Cursor+1
  2237  0291  0878               	movf	??_Lcd_Set_Cursor+1,w
  2238  0292  00A1               	movwf	Lcd_Set_Cursor@z
  2239  0293                     l1306:
  2240                           
  2241                           ;./lcd.h: 55:   y = temp & 0x0F;
  2242  0293  0823               	movf	Lcd_Set_Cursor@temp,w
  2243  0294  390F               	andlw	15
  2244  0295  00F7               	movwf	??_Lcd_Set_Cursor
  2245  0296  0877               	movf	??_Lcd_Set_Cursor,w
  2246  0297  00A2               	movwf	Lcd_Set_Cursor@y
  2247  0298                     l1308:
  2248                           
  2249                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2250  0298  0821               	movf	Lcd_Set_Cursor@z,w
  2251  0299  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2252  029E                     l1310:
  2253                           
  2254                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2255  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2256  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2257  02A0  0822               	movf	Lcd_Set_Cursor@y,w
  2258  02A1  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2259  02A6                     l73:
  2260  02A6  0008               	return
  2261  02A7                     __end_of_Lcd_Set_Cursor:
  2262                           
  2263                           	psect	text10
  2264  01F1                     __ptext10:	
  2265 ;; *************** function _Lcd_Init *****************
  2266 ;; Defined at:
  2267 ;;		line 61 in file "./lcd.h"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0, pclath, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2281 ;;      Params:         0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0
  2283 ;;      Temps:          2       0       0       0       0
  2284 ;;      Totals:         2       0       0       0       0
  2285 ;;Total ram usage:        2 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; Hardware stack levels required when called: 4
  2288 ;; This function calls:
  2289 ;;		_Lcd_Cmd
  2290 ;;		_Lcd_Port
  2291 ;; This function is called by:
  2292 ;;		_main
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296  01F1                     _Lcd_Init:	
  2297                           ;psect for function _Lcd_Init
  2298                           
  2299  01F1                     l1438:	
  2300                           ;incstack = 0
  2301                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2302                           
  2303                           
  2304                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2305  01F1  3000               	movlw	0
  2306  01F2  120A  118A  2467  120A  118A  	fcall	_Lcd_Port
  2307  01F7                     l1440:
  2308                           
  2309                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2310  01F7  3082               	movlw	130
  2311  01F8  00F7               	movwf	??_Lcd_Init+1
  2312  01F9  30DD               	movlw	221
  2313  01FA  00F6               	movwf	??_Lcd_Init
  2314  01FB                     u1407:
  2315  01FB  0BF6               	decfsz	??_Lcd_Init,f
  2316  01FC  29FB               	goto	u1407
  2317  01FD  0BF7               	decfsz	??_Lcd_Init+1,f
  2318  01FE  29FB               	goto	u1407
  2319  01FF  2A00               	nop2
  2320  0200                     l1442:
  2321                           
  2322                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2323  0200  3003               	movlw	3
  2324  0201  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2325                           
  2326                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2327  0206  3021               	movlw	33
  2328  0207  00F7               	movwf	??_Lcd_Init+1
  2329  0208  3076               	movlw	118
  2330  0209  00F6               	movwf	??_Lcd_Init
  2331  020A                     u1417:
  2332  020A  0BF6               	decfsz	??_Lcd_Init,f
  2333  020B  2A0A               	goto	u1417
  2334  020C  0BF7               	decfsz	??_Lcd_Init+1,f
  2335  020D  2A0A               	goto	u1417
  2336  020E  0000               	nop
  2337  020F                     l1444:
  2338                           
  2339                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2340  020F  3003               	movlw	3
  2341  0210  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2342  0215                     l1446:
  2343                           
  2344                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2345  0215  3048               	movlw	72
  2346  0216  00F7               	movwf	??_Lcd_Init+1
  2347  0217  306C               	movlw	108
  2348  0218  00F6               	movwf	??_Lcd_Init
  2349  0219                     u1427:
  2350  0219  0BF6               	decfsz	??_Lcd_Init,f
  2351  021A  2A19               	goto	u1427
  2352  021B  0BF7               	decfsz	??_Lcd_Init+1,f
  2353  021C  2A19               	goto	u1427
  2354  021D  0000               	nop
  2355                           
  2356                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2357  021E  3003               	movlw	3
  2358  021F  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2359                           
  2360                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2361  0224  3002               	movlw	2
  2362  0225  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2363                           
  2364                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2365  022A  3002               	movlw	2
  2366  022B  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2367                           
  2368                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2369  0230  3008               	movlw	8
  2370  0231  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2371                           
  2372                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2373  0236  3000               	movlw	0
  2374  0237  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2375                           
  2376                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2377  023C  300C               	movlw	12
  2378  023D  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2379                           
  2380                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2381  0242  3000               	movlw	0
  2382  0243  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2383                           
  2384                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2385  0248  3006               	movlw	6
  2386  0249  120A  118A  24C9  120A  118A  	fcall	_Lcd_Cmd
  2387  024E                     l76:
  2388  024E  0008               	return
  2389  024F                     __end_of_Lcd_Init:
  2390                           
  2391                           	psect	text11
  2392  04C9                     __ptext11:	
  2393 ;; *************** function _Lcd_Cmd *****************
  2394 ;; Defined at:
  2395 ;;		line 25 in file "./lcd.h"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  a               1    wreg     unsigned char 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  a               1    5[COMMON] unsigned char 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0, pclath, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2409 ;;      Params:         0       0       0       0       0
  2410 ;;      Locals:         1       0       0       0       0
  2411 ;;      Temps:          2       0       0       0       0
  2412 ;;      Totals:         3       0       0       0       0
  2413 ;;Total ram usage:        3 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 3
  2416 ;; This function calls:
  2417 ;;		_Lcd_Port
  2418 ;; This function is called by:
  2419 ;;		_Lcd_Set_Cursor
  2420 ;;		_Lcd_Init
  2421 ;;		_Lcd_Clear
  2422 ;;		_Lcd_Shift_Right
  2423 ;;		_Lcd_Shift_Left
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427  04C9                     _Lcd_Cmd:	
  2428                           ;psect for function _Lcd_Cmd
  2429                           
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2433                           ;Lcd_Cmd@a stored from wreg
  2434  04C9  00F5               	movwf	Lcd_Cmd@a
  2435  04CA                     l1188:
  2436                           
  2437                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2438  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  2439  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  2440  04CC  1108               	bcf	8,2	;volatile
  2441  04CD                     l1190:
  2442                           
  2443                           ;./lcd.h: 28:  Lcd_Port(a);
  2444  04CD  0875               	movf	Lcd_Cmd@a,w
  2445  04CE  120A  118A  2467  120A  118A  	fcall	_Lcd_Port
  2446  04D3                     l1192:
  2447                           
  2448                           ;./lcd.h: 29:  RD3 = 1;
  2449  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  2450  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  2451  04D5  1588               	bsf	8,3	;volatile
  2452  04D6                     l1194:
  2453                           
  2454                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2455  04D6  301A               	movlw	26
  2456  04D7  00F4               	movwf	??_Lcd_Cmd+1
  2457  04D8  30F8               	movlw	248
  2458  04D9  00F3               	movwf	??_Lcd_Cmd
  2459  04DA                     u1437:
  2460  04DA  0BF3               	decfsz	??_Lcd_Cmd,f
  2461  04DB  2CDA               	goto	u1437
  2462  04DC  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2463  04DD  2CDA               	goto	u1437
  2464  04DE  0000               	nop
  2465  04DF                     l1196:
  2466                           
  2467                           ;./lcd.h: 31:         RD3 = 0;
  2468  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2469  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2470  04E1  1188               	bcf	8,3	;volatile
  2471  04E2                     l64:
  2472  04E2  0008               	return
  2473  04E3                     __end_of_Lcd_Cmd:
  2474                           
  2475                           	psect	text12
  2476  0467                     __ptext12:	
  2477 ;; *************** function _Lcd_Port *****************
  2478 ;; Defined at:
  2479 ;;		line 3 in file "./lcd.h"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  a               1    wreg     unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  a               1    2[COMMON] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2493 ;;      Params:         0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0
  2496 ;;      Totals:         1       0       0       0       0
  2497 ;;Total ram usage:        1 bytes
  2498 ;; Hardware stack levels used: 1
  2499 ;; Hardware stack levels required when called: 2
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_Lcd_Cmd
  2504 ;;		_Lcd_Init
  2505 ;;		_Lcd_Write_Char
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509  0467                     _Lcd_Port:	
  2510                           ;psect for function _Lcd_Port
  2511                           
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in _Lcd_Port: [wreg]
  2515                           ;Lcd_Port@a stored from wreg
  2516  0467  00F2               	movwf	Lcd_Port@a
  2517  0468                     l1178:
  2518                           
  2519                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2520  0468  1C72               	btfss	Lcd_Port@a,0
  2521  0469  2C6B               	goto	u561
  2522  046A  2C6C               	goto	u560
  2523  046B                     u561:
  2524  046B  2C70               	goto	l53
  2525  046C                     u560:
  2526  046C                     l1180:
  2527                           
  2528                           ;./lcd.h: 6:   RD4 = 1;
  2529  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2530  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2531  046E  1608               	bsf	8,4	;volatile
  2532  046F  2C73               	goto	l54
  2533  0470                     l53:	
  2534                           ;./lcd.h: 7:  else
  2535                           
  2536                           
  2537                           ;./lcd.h: 8:   RD4 = 0;
  2538  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0472  1208               	bcf	8,4	;volatile
  2541  0473                     l54:
  2542                           
  2543                           ;./lcd.h: 10:  if(a & 2)
  2544  0473  1CF2               	btfss	Lcd_Port@a,1
  2545  0474  2C76               	goto	u571
  2546  0475  2C77               	goto	u570
  2547  0476                     u571:
  2548  0476  2C79               	goto	l55
  2549  0477                     u570:
  2550  0477                     l1182:
  2551                           
  2552                           ;./lcd.h: 11:   RD5 = 1;
  2553  0477  1688               	bsf	8,5	;volatile
  2554  0478  2C7A               	goto	l56
  2555  0479                     l55:	
  2556                           ;./lcd.h: 12:  else
  2557                           
  2558                           
  2559                           ;./lcd.h: 13:   RD5 = 0;
  2560  0479  1288               	bcf	8,5	;volatile
  2561  047A                     l56:
  2562                           
  2563                           ;./lcd.h: 15:  if(a & 4)
  2564  047A  1D72               	btfss	Lcd_Port@a,2
  2565  047B  2C7D               	goto	u581
  2566  047C  2C7E               	goto	u580
  2567  047D                     u581:
  2568  047D  2C80               	goto	l57
  2569  047E                     u580:
  2570  047E                     l1184:
  2571                           
  2572                           ;./lcd.h: 16:   RD6 = 1;
  2573  047E  1708               	bsf	8,6	;volatile
  2574  047F  2C81               	goto	l58
  2575  0480                     l57:	
  2576                           ;./lcd.h: 17:  else
  2577                           
  2578                           
  2579                           ;./lcd.h: 18:   RD6 = 0;
  2580  0480  1308               	bcf	8,6	;volatile
  2581  0481                     l58:
  2582                           
  2583                           ;./lcd.h: 20:  if(a & 8)
  2584  0481  1DF2               	btfss	Lcd_Port@a,3
  2585  0482  2C84               	goto	u591
  2586  0483  2C85               	goto	u590
  2587  0484                     u591:
  2588  0484  2C87               	goto	l59
  2589  0485                     u590:
  2590  0485                     l1186:
  2591                           
  2592                           ;./lcd.h: 21:   RD7 = 1;
  2593  0485  1788               	bsf	8,7	;volatile
  2594  0486  2C88               	goto	l61
  2595  0487                     l59:	
  2596                           ;./lcd.h: 22:  else
  2597                           
  2598                           
  2599                           ;./lcd.h: 23:   RD7 = 0;
  2600  0487  1388               	bcf	8,7	;volatile
  2601  0488                     l61:
  2602  0488  0008               	return
  2603  0489                     __end_of_Lcd_Port:
  2604                           
  2605                           	psect	text13
  2606  03AE                     __ptext13:	
  2607 ;; *************** function _ContaSegundos *****************
  2608 ;; Defined at:
  2609 ;;		line 100 in file "main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0
  2625 ;;      Temps:          2       0       0       0       0
  2626 ;;      Totals:         2       0       0       0       0
  2627 ;;Total ram usage:        2 bytes
  2628 ;; Hardware stack levels used: 1
  2629 ;; Hardware stack levels required when called: 1
  2630 ;; This function calls:
  2631 ;;		_cronometro
  2632 ;; This function is called by:
  2633 ;;		Interrupt level 1
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637  03AE                     _ContaSegundos:	
  2638                           ;psect for function _ContaSegundos
  2639                           
  2640  03AE                     i1l1520:
  2641                           
  2642                           ;main.c: 102:     if(TMR1IF)
  2643  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2644  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2645  03B0  1C0C               	btfss	12,0	;volatile
  2646  03B1  2BB3               	goto	u107_21
  2647  03B2  2BB4               	goto	u107_20
  2648  03B3                     u107_21:
  2649  03B3  2BE0               	goto	i1l119
  2650  03B4                     u107_20:
  2651  03B4                     i1l1522:
  2652                           
  2653                           ;main.c: 103:     {;main.c: 104:         PIR1bits.TMR1IF = 0;
  2654  03B4  100C               	bcf	12,0	;volatile
  2655  03B5                     i1l1524:
  2656                           
  2657                           ;main.c: 105:         TMR1L = 0x2C;
  2658  03B5  302C               	movlw	44
  2659  03B6  008E               	movwf	14	;volatile
  2660                           
  2661                           ;main.c: 106:         TMR1H = 0xCF;
  2662  03B7  30CF               	movlw	207
  2663  03B8  008F               	movwf	15	;volatile
  2664  03B9                     i1l1526:
  2665                           
  2666                           ;main.c: 110:         cronometro();
  2667  03B9  120A  118A  23E7  120A  118A  	fcall	_cronometro
  2668  03BE                     i1l1528:
  2669                           
  2670                           ;main.c: 112:         contador++;
  2671  03BE  3001               	movlw	1
  2672  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2673  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2674  03C1  07BC               	addwf	_contador,f
  2675  03C2  1803               	skipnc
  2676  03C3  0ABD               	incf	_contador+1,f
  2677  03C4  3000               	movlw	0
  2678  03C5  07BD               	addwf	_contador+1,f
  2679  03C6                     i1l1530:
  2680                           
  2681                           ;main.c: 113:         if(contador == 100)
  2682  03C6  3064               	movlw	100
  2683  03C7  063C               	xorwf	_contador,w
  2684  03C8  043D               	iorwf	_contador+1,w
  2685  03C9  1D03               	btfss	3,2
  2686  03CA  2BCC               	goto	u108_21
  2687  03CB  2BCD               	goto	u108_20
  2688  03CC                     u108_21:
  2689  03CC  2BE0               	goto	i1l119
  2690  03CD                     u108_20:
  2691  03CD                     i1l1532:
  2692                           
  2693                           ;main.c: 114:         {;main.c: 115:             cronometro();
  2694  03CD  120A  118A  23E7  120A  118A  	fcall	_cronometro
  2695  03D2                     i1l1534:
  2696                           
  2697                           ;main.c: 116:             inverte = ~inverte;
  2698  03D2  3001               	movlw	(0+1) shl (_inverte& (0+7))
  2699  03D3  06FB               	xorwf	_inverte/(0+8),f
  2700  03D4                     i1l1536:
  2701                           
  2702                           ;main.c: 117:             RC3 = inverte;
  2703  03D4  187B               	btfsc	_inverte/(0+8),_inverte& (0+7)
  2704  03D5  2BD7               	goto	u109_21
  2705  03D6  2BDB               	goto	u109_20
  2706  03D7                     u109_21:
  2707  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2708  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2709  03D9  1587               	bsf	7,3	;volatile
  2710  03DA  2BDE               	goto	u110_24
  2711  03DB                     u109_20:
  2712  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2713  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2714  03DD  1187               	bcf	7,3	;volatile
  2715  03DE                     u110_24:
  2716  03DE                     i1l1538:
  2717                           
  2718                           ;main.c: 118:             contador = 0;
  2719  03DE  01BC               	clrf	_contador
  2720  03DF  01BD               	clrf	_contador+1
  2721  03E0                     i1l119:
  2722  03E0  0871               	movf	??_ContaSegundos+1,w
  2723  03E1  008A               	movwf	10
  2724  03E2  0E70               	swapf	??_ContaSegundos,w
  2725  03E3  0083               	movwf	3
  2726  03E4  0EFE               	swapf	btemp,f
  2727  03E5  0E7E               	swapf	btemp,w
  2728  03E6  0009               	retfie
  2729  03E7                     __end_of_ContaSegundos:
  2730                           
  2731                           	psect	intentry
  2732  0004                     __pintentry:	
  2733                           ;incstack = 0
  2734                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  2735                           
  2736  0004                     interrupt_function:
  2737  007E                     saved_w	set	btemp
  2738  0004  00FE               	movwf	btemp
  2739  0005  0E03               	swapf	3,w
  2740  0006  00F0               	movwf	??_ContaSegundos
  2741  0007  080A               	movf	10,w
  2742  0008  00F1               	movwf	??_ContaSegundos+1
  2743  0009  120A  118A  2BAE   	ljmp	_ContaSegundos
  2744                           
  2745                           	psect	text14
  2746  03E7                     __ptext14:	
  2747 ;; *************** function _cronometro *****************
  2748 ;; Defined at:
  2749 ;;		line 130 in file "main.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2763 ;;      Params:         0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used: 1
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_ContaSegundos
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776  03E7                     _cronometro:	
  2777                           ;psect for function _cronometro
  2778                           
  2779  03E7                     i1l1454:	
  2780                           ;incstack = 0
  2781                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  2782                           
  2783                           
  2784                           ;main.c: 132:     centesimos++;
  2785  03E7  3001               	movlw	1
  2786  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2787  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2788  03EA  07BE               	addwf	_centesimos,f
  2789  03EB  1803               	skipnc
  2790  03EC  0ABF               	incf	_centesimos+1,f
  2791  03ED  3000               	movlw	0
  2792  03EE  07BF               	addwf	_centesimos+1,f
  2793  03EF                     i1l1456:
  2794                           
  2795                           ;main.c: 134:     if(centesimos == 100)
  2796  03EF  3064               	movlw	100
  2797  03F0  063E               	xorwf	_centesimos,w
  2798  03F1  043F               	iorwf	_centesimos+1,w
  2799  03F2  1D03               	btfss	3,2
  2800  03F3  2BF5               	goto	u103_21
  2801  03F4  2BF6               	goto	u103_20
  2802  03F5                     u103_21:
  2803  03F5  2C16               	goto	i1l128
  2804  03F6                     u103_20:
  2805  03F6                     i1l1458:
  2806                           
  2807                           ;main.c: 135:     {;main.c: 136:         centesimos = 0;
  2808  03F6  01BE               	clrf	_centesimos
  2809  03F7  01BF               	clrf	_centesimos+1
  2810  03F8                     i1l1460:
  2811                           
  2812                           ;main.c: 137:         segundos++;
  2813  03F8  3001               	movlw	1
  2814  03F9  07C0               	addwf	_segundos,f
  2815  03FA  1803               	skipnc
  2816  03FB  0AC1               	incf	_segundos+1,f
  2817  03FC  3000               	movlw	0
  2818  03FD  07C1               	addwf	_segundos+1,f
  2819  03FE                     i1l1462:
  2820                           
  2821                           ;main.c: 139:         if(segundos == 60)
  2822  03FE  303C               	movlw	60
  2823  03FF  0640               	xorwf	_segundos,w
  2824  0400  0441               	iorwf	_segundos+1,w
  2825  0401  1D03               	btfss	3,2
  2826  0402  2C04               	goto	u104_21
  2827  0403  2C05               	goto	u104_20
  2828  0404                     u104_21:
  2829  0404  2C16               	goto	i1l128
  2830  0405                     u104_20:
  2831  0405                     i1l1464:
  2832                           
  2833                           ;main.c: 140:         {;main.c: 141:            segundos = 0;
  2834  0405  01C0               	clrf	_segundos
  2835  0406  01C1               	clrf	_segundos+1
  2836  0407                     i1l1466:
  2837                           
  2838                           ;main.c: 142:            minutos++;
  2839  0407  3001               	movlw	1
  2840  0408  07C2               	addwf	_minutos,f
  2841  0409  1803               	skipnc
  2842  040A  0AC3               	incf	_minutos+1,f
  2843  040B  3000               	movlw	0
  2844  040C  07C3               	addwf	_minutos+1,f
  2845  040D                     i1l1468:
  2846                           
  2847                           ;main.c: 144:            if(minutos == 60) minutos = 0;
  2848  040D  303C               	movlw	60
  2849  040E  0642               	xorwf	_minutos,w
  2850  040F  0443               	iorwf	_minutos+1,w
  2851  0410  1D03               	btfss	3,2
  2852  0411  2C13               	goto	u105_21
  2853  0412  2C14               	goto	u105_20
  2854  0413                     u105_21:
  2855  0413  2C16               	goto	i1l128
  2856  0414                     u105_20:
  2857  0414                     i1l1470:
  2858  0414  01C2               	clrf	_minutos
  2859  0415  01C3               	clrf	_minutos+1
  2860  0416                     i1l128:
  2861  0416  0008               	return
  2862  0417                     __end_of_cronometro:
  2863  007E                     btemp	set	126	;btemp
  2864  007E                     wtemp0	set	126
  2865                           
  2866                           	psect	config
  2867                           
  2868                           ;Config register CONFIG @ 0x2007
  2869                           ;	Oscillator Selection bits
  2870                           ;	FOSC = HS, HS oscillator
  2871                           ;	Watchdog Timer Enable bit
  2872                           ;	WDTE = ON, WDT enabled
  2873                           ;	Power-up Timer Enable bit
  2874                           ;	PWRTE = ON, PWRT enabled
  2875                           ;	Brown-out Reset Enable bit
  2876                           ;	BOREN = ON, BOR enabled
  2877                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2878                           ;	LVP = 0x1, unprogrammed default
  2879                           ;	Data EEPROM Memory Code Protection bit
  2880                           ;	CPD = 0x1, unprogrammed default
  2881                           ;	Flash Program Memory Write Enable bits
  2882                           ;	WRT = 0x3, unprogrammed default
  2883                           ;	In-Circuit Debugger Mode bit
  2884                           ;	DEBUG = 0x1, unprogrammed default
  2885                           ;	Flash Program Memory Code Protection bit
  2886                           ;	CP = 0x1, unprogrammed default
  2887  2007                     	org	8199
  2888  2007  3FF6               	dw	16374

Data Sizes:
    Strings     15
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     28      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _setCronometro->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3443
                                             25 BANK0      3     3      0
                           _Lcd_Init
                      _setCronometro
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3245
                                             24 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2488
                                              5 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     301
                                              7 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     456
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sun Mar 06 23:19:33 2022

                       pc 0002                        l61 0488                        l53 0470  
                      l54 0473                        l55 0479                        l56 047A  
                      l64 04E2                        l57 0480                        l73 02A6  
                      l58 0481                        l59 0487                        l76 024E  
                      l85 04A9                        l79 03AD                        fsr 0004  
     ___wmul@multiplicand 0074                       l122 0441                       l226 003B  
                     l244 0115                       l261 01F0                       l265 044E  
                     l267 0466                       l537 0338                       l547 0374  
                     l718 04F4                       _RB0 0030                       _RC0 0038  
                     _RC2 003A                       _RC3 003B                       _RD2 0042  
                     _RD3 0043                       _RD4 0044                       _RD5 0045  
                     _RD6 0046                       _RD7 0047                       u610 04EB  
                     u611 04EA                       u620 04F1                       u605 0386  
                     u621 04F0                       u710 0320                       u630 0448  
                     u711 031F                       u631 0447                       u560 046C  
                     u800 0257                       u561 046B                       u801 0256  
                     u705 0310                       u570 0477                       u730 0334  
                     u571 0476                       u731 0333                       u715 031C  
                     u580 047E                       u820 0282                       u660 0462  
                     u581 047D                       u821 0281                       u725 0328  
                     u661 0461                       u645 044F                       u590 0485  
                     u670 02FD                       u591 0484                       u815 025F  
                     u671 02FC                       u655 0456                       u840 04A9  
                     u841 04A8                       u690 030F                       u835 028A  
                     u691 030E                       u685 0301                       fsr0 0004  
                     indf 0000                      l1200 0380                      l1210 039C  
                    l1202 0383                      l1300 0273                      l1212 03A2  
                    l1204 0391                      l1220 04E5                      l1310 029E  
                    l1302 027C                      l1214 03A5                      l1206 0394  
                    l1230 0442                      l1222 04EB                      l1304 0282  
                    l1216 03AA                      l1208 0399                      l1312 048A  
                    l1240 0462                      l1232 0444                      l1224 04F1  
                    l1306 0293                      l1314 048D                      l1250 0300  
                    l1234 0448                      l1226 04F3                      l1218 04E4  
                    l1180 046C                      l1308 0298                      l1316 0498  
                    l1260 0326                      l1252 0307                      l1244 02F5  
                    l1236 0455                      l1182 0477                      l1190 04CD  
                    l1318 049E                      l1262 0327                      l1254 030B  
                    l1246 02F7                      l1238 045C                      l1184 047E  
                    l1192 04D3                      l1440 01F7                      l1264 032E  
                    l1256 030F                      l1248 02FD                      l1186 0485  
                    l1178 0468                      l1194 04D6                      l1442 0200  
                    l1258 0320                      l1266 0334                      l1610 0037  
                    l1602 0020                      l1196 04DF                      l1188 04CA  
                    l1444 020F                      l1292 0252                      l1700 01C6  
                    l1620 0063                      l1612 003C                      l1604 0025  
                    l1446 0215                      l1438 01F1                      l1294 0257  
                    l1198 0376                      l1702 01CD                      l1622 0067  
                    l1606 002B                      l1296 0268                      l1704 01D1  
                    l1640 00D2                      l1624 007C                      l1632 00A3  
                    l1616 0040                      l1608 0032                      l1720 0417  
                    l1298 026D                      l1650 00DD                      l1642 00D6  
                    l1634 00C2                      l1810 00B7                      l1626 008F  
                    l1618 0053                      l1706 01DA                      l1722 042F  
                    l1730 02AC                      l1580 0339                      l1660 010F  
                    l1644 00DB                      l1636 00CA                      l1708 01EC  
                    l1628 0093                      l1724 043B                      l1740 02B1  
                    l1732 02AD                      l1590 0353                      l1582 0341  
                    l1670 013A                      l1662 0120                      l1654 00F9  
                    l1638 00CE                      l1750 02BC                      l1742 02B4  
                    l1734 02AE                      l1726 02A7                      l1592 035D  
                    l1584 0344                      l1680 0156                      l1672 0141  
                    l1664 012C                      l1656 0103                      l1808 004E  
                    l1760 02CB                      l1752 02BD                      l1744 02B5  
                    l1736 02AF                      l1728 02AB                      l1594 0363  
                    l1586 034B                      l1690 0180                      l1674 0145  
                    l1682 0163                      l1666 0130                      l1658 0109  
                    l1762 02D9                      l1754 02BE                      l1746 02BA  
                    l1738 02B0                      l1596 036A                      l1588 034F  
                    l1692 0186                      l1684 0169                      l1676 014B  
                    l1668 0134                      l1764 02DC                      l1756 02C3  
                    l1748 02BB                      l1598 0370                      l1694 018D  
                    l1686 0170                      l1678 0152                      l1758 02C9  
                    l1766 02EC                      l1688 0174                      l1696 0191  
                    l1698 0196                      STR_1 04BA                      u1110 0341  
                    u1111 0340                      u1200 00D2                      u1201 00D1  
                    u1130 0353                      u1210 00F8                      u1131 0352  
                    u1211 00F7                      u1140 035D                      u1300 0169  
                    u1220 0103                      u1141 035C                      u1125 0345  
                    u1301 0168                      u1221 0102                      u1310 0180  
                    u1230 0109                      u1311 017F                      u1231 0108  
                    u1215 00F4                      u1160 0370                      u1320 0186  
                    u1240 010F                      u1161 036F                      u1145 0359  
                    u1321 0185                      u1241 010E                      u1330 01DA  
                    u1250 0120                      u1170 002B                      u1155 0364  
                    u1331 01D9                      u1251 011F                      u1171 002A  
                    u1340 01EC                      u1260 0134                      u1180 0063  
                    u1341 01EB                      u1261 0133                      u1181 0062  
                    u1270 013A                      u1190 00A3                      u1350 02C9  
                    u1407 01FB                      u1271 0139                      u1255 011C  
                    u1191 00A2                      u1351 02C8                      u1280 014B  
                    u1417 020A                      u1281 014A                      u1290 0162  
                    u1427 0219                      u1291 0161                      u1437 04DA  
                    u1367 02D3                      u1377 02E5                      u1387 0396  
                    u1397 03A7         ?_Lcd_Write_String 0070                      _main 02A7  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 04E3     __end_of_setCronometro 0442                     ?_main 0070  
         __end_of___lwdiv 0339                     i1l119 03E0                     i1l128 0416  
         __end_of___lwmod 0375                     _TMR1H 000F                     _TMR1L 000E  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
         __end_of_dpowers 04BA           __end_of_isdigit 04F5            __pbitbssCOMMON 03D8  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 01F1          __end_of_Lcd_Init 024F          __end_of_Lcd_Port 0489  
         __initialization 000F              __end_of_main 02F5                    ??_main 0039  
                  u110_24 03DE                    u103_20 03F6                    u103_21 03F5  
                  u104_20 0405                    i1l1520 03AE                    u104_21 0404  
                  i1l1530 03C6                    i1l1522 03B4                    i1l1460 03F8  
                  i1l1532 03CD                    i1l1524 03B5                    i1l1470 0414  
                  i1l1462 03FE                    i1l1454 03E7                    i1l1534 03D2  
                  i1l1526 03B9                    u105_20 0414                    i1l1464 0405  
                  i1l1456 03EF                    i1l1536 03D4                    i1l1528 03BE  
                  u105_21 0413                    i1l1466 0407                    i1l1458 03F6  
                  i1l1538 03DE                    i1l1468 040D                    u107_20 03B4  
                  u107_21 03B3                    u108_20 03CD                    u108_21 03CC  
                  u109_20 03DB                    u109_21 03D7                 ??_Lcd_Cmd 0073  
                  _TMR1IF 0060                    ___wmul 0442                 ??___lwdiv 0076  
               ??___lwmod 007A                    _buffer 0044                 ??_isdigit 0072  
                  saved_w 007E                 ??_sprintf 002C           Lcd_Set_Cursor@a 0020  
         Lcd_Set_Cursor@b 0076           Lcd_Set_Cursor@y 0022           Lcd_Set_Cursor@z 0021  
 __end_of__initialization 0019            __pcstackCOMMON 0070            _Lcd_Set_Cursor 024F  
          _OPTION_REGbits 0081                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
            sprintf@width 0034                __pbssBANK0 003C                __pmaintext 02A7  
   __end_of_ContaSegundos 03E7                   ?___wmul 0072                _centesimos 003E  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 02A7                ??_Lcd_Init 0076  
              ??_Lcd_Port 0072                __stringtab 04AA            _Lcd_Write_Char 0375  
                 _Lcd_Cmd 04C9                _cronometro 03E7                   ___lwdiv 02F5  
                 ___lwmod 0339           ?_Lcd_Set_Cursor 0076                   __ptext1 0417  
                 __ptext2 001D                   __ptext3 04E3                   __ptext4 0442  
                 __ptext5 0339                   __ptext6 02F5                   __ptext7 0489  
                 __ptext8 0375                   __ptext9 024F                 _T1CONbits 0010  
                 _dpowers 04B0                   _isdigit 04E3                   _inverte 03D8  
                 _minutos 0042                   _sprintf 001D                   clrloop0 04F6  
  __end_of_Lcd_Write_Char 03AE      end_of_initialization 0019                 Lcd_Port@a 0072  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 007A         Lcd_Write_String@i 0078  
             ?_cronometro 0070            __end_of___wmul 0467          _Lcd_Write_String 0489  
           _setCronometro 0417       start_initialization 000F                  ??___wmul 0076  
         Lcd_Write_Char@a 0076           Lcd_Write_Char@y 0075            ?_setCronometro 0070  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0033               sprintf@prec 0030          ___lwdiv@dividend 0074  
        ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072                  ?___lwmod 0020  
               __pstrings 04AA                  ?_isdigit 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0025         interrupt_function 0004            ___wmul@product 0076  
               clear_ram0 04F5                  _PIE1bits 008C                  Lcd_Cmd@a 0075  
                _PIR1bits 000C           ??_setCronometro 0038               __stringbase 04AF  
       ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073                  _Lcd_Init 01F1  
                _Lcd_Port 0467  __end_of_Lcd_Write_String 04AA              ??_cronometro 0070  
           _ContaSegundos 03AE        __end_of__stringtab 04B0               _isdigit$732 0072  
              sprintf@val 0031           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
      __end_of_cronometro 0417                  __ptext10 01F1                  __ptext11 04C9  
                __ptext12 0467                  __ptext13 03AE                  __ptext14 03E7  
                _contador 003C                  _segundos 0040            ?_ContaSegundos 0070  
              _INTCONbits 000B                  isdigit@c 0073        Lcd_Write_Char@temp 0074  
                intlevel1 0000                 sprintf@ap 002F                 sprintf@sp 0036  
        ___lwmod@dividend 0022                 stringcode 04AA        Lcd_Set_Cursor@temp 0023  
                sprintf@c 0037                  sprintf@f 0025           ___lwmod@divisor 0020  
         ___lwmod@counter 0024                  stringdir 04AA                  stringtab 04AA  
         ??_ContaSegundos 0070  
