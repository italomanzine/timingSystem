

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Mon Mar 07 22:29:05 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0094                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  009F                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185                           
   186                           	psect	strings
   187  040E                     __pstrings:
   188  040E                     stringtab:
   189  040E                     __stringtab:
   190  040E                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193  040E                     stringdir:
   194  040E  3004               	movlw	high stringdir
   195  040F  008A               	movwf	10
   196  0410  0804               	movf	4,w
   197  0411  0A84               	incf	4,f
   198  0412  0782               	addwf	2,f
   199  0413                     __stringbase:
   200  0413  3400               	retlw	0
   201  0414                     __end_of__stringtab:
   202  0414                     _dpowers:
   203  0414  3401               	retlw	1
   204  0415  3400               	retlw	0
   205  0416  340A               	retlw	10
   206  0417  3400               	retlw	0
   207  0418  3464               	retlw	100
   208  0419  3400               	retlw	0
   209  041A  34E8               	retlw	232
   210  041B  3403               	retlw	3
   211  041C  3410               	retlw	16
   212  041D  3427               	retlw	39
   213  041E                     __end_of_dpowers:
   214  000C                     _PIR1bits	set	12
   215  000F                     _TMR1H	set	15
   216  000E                     _TMR1L	set	14
   217  0010                     _T1CONbits	set	16
   218  000B                     _INTCONbits	set	11
   219  0060                     _TMR1IF	set	96
   220  0030                     _RB0	set	48
   221  003B                     _RC3	set	59
   222  003A                     _RC2	set	58
   223  0038                     _RC0	set	56
   224  0043                     _RD3	set	67
   225  0042                     _RD2	set	66
   226  0047                     _RD7	set	71
   227  0046                     _RD6	set	70
   228  0045                     _RD5	set	69
   229  0044                     _RD4	set	68
   230  008C                     _PIE1bits	set	140
   231  0081                     _OPTION_REGbits	set	129
   232  0088                     _TRISD	set	136
   233  0087                     _TRISC	set	135
   234  0086                     _TRISB	set	134
   235  041E                     STR_1:
   236  041E  3431               	retlw	49	;'1'
   237  041F  342D               	retlw	45	;'-'
   238  0420  3420               	retlw	32	;' '
   239  0421  3420               	retlw	32	;' '
   240  0422  3420               	retlw	32	;' '
   241  0423  3420               	retlw	32	;' '
   242  0424  3420               	retlw	32	;' '
   243  0425  3420               	retlw	32	;' '
   244  0426  3425               	retlw	37	;'%'
   245  0427  3430               	retlw	48	;'0'
   246  0428  3432               	retlw	50	;'2'
   247  0429  3464               	retlw	100	;'d'
   248  042A  343A               	retlw	58	;':'
   249  042B  3425               	retlw	37	;'%'
   250  042C  3430               	retlw	48	;'0'
   251  042D  3432               	retlw	50	;'2'
   252  042E  3464               	retlw	100	;'d'
   253  042F  343A               	retlw	58	;':'
   254  0430  3425               	retlw	37	;'%'
   255  0431  3430               	retlw	48	;'0'
   256  0432  3432               	retlw	50	;'2'
   257  0433  3464               	retlw	100	;'d'
   258  0434  3400               	retlw	0
   259                           
   260                           	psect	cinit
   261  000F                     start_initialization:	
   262                           ; #config settings
   263                           
   264  000F                     __initialization:
   265                           
   266                           ; Clear objects allocated to BITCOMMON
   267  000F  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   268                           
   269                           ; Clear objects allocated to BANK0
   270  0010  1383               	bcf	3,7	;select IRP bank0
   271  0011  303C               	movlw	low __pbssBANK0
   272  0012  0084               	movwf	4
   273  0013  304E               	movlw	low (__pbssBANK0+18)
   274  0014  120A  118A  24FD  120A  118A  	fcall	clear_ram0
   275  0019                     end_of_initialization:	
   276                           ;End of C runtime variable initialization code
   277                           
   278  0019                     __end_of__initialization:
   279  0019  0183               	clrf	3
   280  001A  120A  118A  2AA7   	ljmp	_main	;jump to C main() function
   281                           
   282                           	psect	bitbssCOMMON
   283  03D8                     __pbitbssCOMMON:
   284  03D8                     _inverte:
   285  03D8                     	ds	1
   286                           
   287                           	psect	bssBANK0
   288  003C                     __pbssBANK0:
   289  003C                     _contador:
   290  003C                     	ds	2
   291  003E                     _centesimos:
   292  003E                     	ds	2
   293  0040                     _segundos:
   294  0040                     	ds	2
   295  0042                     _minutos:
   296  0042                     	ds	2
   297  0044                     _buffer:
   298  0044                     	ds	10
   299                           
   300                           	psect	clrtext
   301  04FD                     clear_ram0:	
   302                           ;	Called with FSR containing the base address, and
   303                           ;	W with the last address+1
   304                           
   305  04FD  0064               	clrwdt	;clear the watchdog before getting into this loop
   306  04FE                     clrloop0:
   307  04FE  0180               	clrf	0	;clear RAM location pointed to by FSR
   308  04FF  0A84               	incf	4,f	;increment pointer
   309  0500  0604               	xorwf	4,w	;XOR with final address
   310  0501  1903               	btfsc	3,2	;have we reached the end yet?
   311  0502  3400               	retlw	0	;all done for this memory range, return
   312  0503  0604               	xorwf	4,w	;XOR again to restore value
   313  0504  2CFE               	goto	clrloop0	;do the next byte
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:
   317  0070                     ?_isdigit:
   318  0070                     ?_setCronometro:	
   319                           ; 1 bit 
   320                           
   321  0070                     ?_cronometro:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ??_cronometro:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_Lcd_Port:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Lcd_Cmd:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_Lcd_Init:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_Lcd_Write_Char:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_Lcd_Write_String:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_main:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_ContaSegundos:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ??_ContaSegundos:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_Lcd_Clear:	
   352                           ; 1 bytes @ 0x0
   353                           
   354                           
   355                           ; 2 bytes @ 0x0
   356  0070                     	ds	2
   357  0072                     ??_isdigit:
   358  0072                     ??_Lcd_Port:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ?___wmul:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ?___lwdiv:	
   365                           ; 2 bytes @ 0x2
   366                           
   367  0072                     Lcd_Port@a:	
   368                           ; 2 bytes @ 0x2
   369                           
   370  0072                     _isdigit$733:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ___wmul@multiplier:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     ___lwdiv@divisor:	
   377                           ; 2 bytes @ 0x2
   378                           
   379                           
   380                           ; 2 bytes @ 0x2
   381  0072                     	ds	1
   382  0073                     ??_Lcd_Cmd:
   383  0073                     ??_Lcd_Write_Char:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     isdigit@c:	
   387                           ; 1 bytes @ 0x3
   388                           
   389                           
   390                           ; 1 bytes @ 0x3
   391  0073                     	ds	1
   392  0074                     Lcd_Write_Char@temp:
   393  0074                     ___wmul@multiplicand:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ___lwdiv@dividend:	
   397                           ; 2 bytes @ 0x4
   398                           
   399                           
   400                           ; 2 bytes @ 0x4
   401  0074                     	ds	1
   402  0075                     Lcd_Cmd@a:
   403  0075                     Lcd_Write_Char@y:	
   404                           ; 1 bytes @ 0x5
   405                           
   406                           
   407                           ; 1 bytes @ 0x5
   408  0075                     	ds	1
   409  0076                     ??_Lcd_Clear:
   410  0076                     ?_Lcd_Set_Cursor:	
   411                           ; 1 bytes @ 0x6
   412                           
   413  0076                     ??_Lcd_Init:	
   414                           ; 1 bytes @ 0x6
   415                           
   416  0076                     ??___wmul:	
   417                           ; 1 bytes @ 0x6
   418                           
   419  0076                     ??___lwdiv:	
   420                           ; 1 bytes @ 0x6
   421                           
   422  0076                     Lcd_Set_Cursor@b:	
   423                           ; 1 bytes @ 0x6
   424                           
   425  0076                     Lcd_Write_Char@a:	
   426                           ; 1 bytes @ 0x6
   427                           
   428  0076                     ___wmul@product:	
   429                           ; 1 bytes @ 0x6
   430                           
   431                           
   432                           ; 2 bytes @ 0x6
   433  0076                     	ds	1
   434  0077                     ??_Lcd_Set_Cursor:
   435  0077                     ??_Lcd_Write_String:	
   436                           ; 1 bytes @ 0x7
   437                           
   438  0077                     ___lwdiv@quotient:	
   439                           ; 1 bytes @ 0x7
   440                           
   441                           
   442                           ; 2 bytes @ 0x7
   443  0077                     	ds	1
   444  0078                     Lcd_Write_String@i:
   445                           
   446                           ; 2 bytes @ 0x8
   447  0078                     	ds	1
   448  0079                     ___lwdiv@counter:
   449                           
   450                           ; 1 bytes @ 0x9
   451  0079                     	ds	1
   452  007A                     ??___lwmod:
   453  007A                     Lcd_Write_String@a:	
   454                           ; 1 bytes @ 0xA
   455                           
   456                           
   457                           ; 1 bytes @ 0xA
   458  007A                     	ds	1
   459                           
   460                           	psect	cstackBANK0
   461  0020                     __pcstackBANK0:
   462  0020                     ?___lwmod:
   463  0020                     Lcd_Set_Cursor@a:	
   464                           ; 2 bytes @ 0x0
   465                           
   466  0020                     ___lwmod@divisor:	
   467                           ; 1 bytes @ 0x0
   468                           
   469                           
   470                           ; 2 bytes @ 0x0
   471  0020                     	ds	1
   472  0021                     Lcd_Set_Cursor@z:
   473                           
   474                           ; 1 bytes @ 0x1
   475  0021                     	ds	1
   476  0022                     Lcd_Set_Cursor@y:
   477  0022                     ___lwmod@dividend:	
   478                           ; 1 bytes @ 0x2
   479                           
   480                           
   481                           ; 2 bytes @ 0x2
   482  0022                     	ds	1
   483  0023                     Lcd_Set_Cursor@temp:
   484                           
   485                           ; 1 bytes @ 0x3
   486  0023                     	ds	1
   487  0024                     ___lwmod@counter:
   488                           
   489                           ; 1 bytes @ 0x4
   490  0024                     	ds	1
   491  0025                     ?_sprintf:
   492  0025                     sprintf@f:	
   493                           ; 2 bytes @ 0x5
   494                           
   495                           
   496                           ; 1 bytes @ 0x5
   497  0025                     	ds	7
   498  002C                     ??_sprintf:
   499                           
   500                           ; 1 bytes @ 0xC
   501  002C                     	ds	3
   502  002F                     sprintf@ap:
   503                           
   504                           ; 1 bytes @ 0xF
   505  002F                     	ds	1
   506  0030                     sprintf@prec:
   507                           
   508                           ; 1 bytes @ 0x10
   509  0030                     	ds	1
   510  0031                     sprintf@val:
   511                           
   512                           ; 2 bytes @ 0x11
   513  0031                     	ds	2
   514  0033                     sprintf@flag:
   515                           
   516                           ; 1 bytes @ 0x13
   517  0033                     	ds	1
   518  0034                     sprintf@width:
   519                           
   520                           ; 2 bytes @ 0x14
   521  0034                     	ds	2
   522  0036                     sprintf@sp:
   523                           
   524                           ; 1 bytes @ 0x16
   525  0036                     	ds	1
   526  0037                     sprintf@c:
   527                           
   528                           ; 1 bytes @ 0x17
   529  0037                     	ds	1
   530  0038                     ??_setCronometro:
   531                           
   532                           ; 1 bytes @ 0x18
   533  0038                     	ds	1
   534  0039                     ??_main:
   535                           
   536                           ; 1 bytes @ 0x19
   537  0039                     	ds	3
   538                           
   539                           	psect	maintext
   540  02A7                     __pmaintext:	
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 48 in file "main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : B00/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   560 ;;      Params:         0       0       0       0       0
   561 ;;      Locals:         0       0       0       0       0
   562 ;;      Temps:          0       3       0       0       0
   563 ;;      Totals:         0       3       0       0       0
   564 ;;Total ram usage:        3 bytes
   565 ;; Hardware stack levels required when called: 6
   566 ;; This function calls:
   567 ;;		_Lcd_Clear
   568 ;;		_Lcd_Init
   569 ;;		_setCronometro
   570 ;; This function is called by:
   571 ;;		Startup code after reset
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575  02A7                     _main:	
   576                           ;psect for function _main
   577                           
   578  02A7                     l1730:	
   579                           ;incstack = 0
   580                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   581                           
   582                           
   583                           ;main.c: 51:     TRISB = 0b11111111;
   584  02A7  30FF               	movlw	255
   585  02A8  1683               	bsf	3,5	;RP0=1, select bank1
   586  02A9  1303               	bcf	3,6	;RP1=0, select bank1
   587  02AA  0086               	movwf	6	;volatile
   588  02AB                     l1732:
   589                           
   590                           ;main.c: 52:     TRISC = 0b00000000;
   591  02AB  0187               	clrf	7	;volatile
   592  02AC                     l1734:
   593                           
   594                           ;main.c: 53:     TRISD = 0b00000000;
   595  02AC  0188               	clrf	8	;volatile
   596  02AD                     l1736:
   597                           
   598                           ;main.c: 56:     OPTION_REGbits.nRBPU = 0;
   599  02AD  1381               	bcf	1,7	;volatile
   600  02AE                     l1738:
   601                           
   602                           ;main.c: 60:     INTCONbits.GIE = 1;
   603  02AE  178B               	bsf	11,7	;volatile
   604  02AF                     l1740:
   605                           
   606                           ;main.c: 61:     INTCONbits.PEIE = 1;
   607  02AF  170B               	bsf	11,6	;volatile
   608  02B0                     l1742:
   609                           
   610                           ;main.c: 62:     PIE1bits.TMR1IE = 1;
   611  02B0  140C               	bsf	12,0	;volatile
   612  02B1                     l1744:
   613                           
   614                           ;main.c: 65:     T1CONbits.TMR1CS = 0;
   615  02B1  1283               	bcf	3,5	;RP0=0, select bank0
   616  02B2  1303               	bcf	3,6	;RP1=0, select bank0
   617  02B3  1090               	bcf	16,1	;volatile
   618  02B4                     l1746:
   619                           
   620                           ;main.c: 66:     T1CONbits.T1CKPS0 = 1;
   621  02B4  1610               	bsf	16,4	;volatile
   622  02B5                     l1748:
   623                           
   624                           ;main.c: 67:     T1CONbits.T1CKPS1 = 1;
   625  02B5  1690               	bsf	16,5	;volatile
   626                           
   627                           ;main.c: 70:     TMR1L = 0x95;
   628  02B6  3095               	movlw	149
   629  02B7  008E               	movwf	14	;volatile
   630                           
   631                           ;main.c: 71:     TMR1H = 0xE7;
   632  02B8  30E7               	movlw	231
   633  02B9  008F               	movwf	15	;volatile
   634  02BA                     l1750:
   635                           
   636                           ;main.c: 73:     T1CONbits.TMR1ON = 1;
   637  02BA  1410               	bsf	16,0	;volatile
   638  02BB                     l1752:
   639                           
   640                           ;main.c: 76:     RC0 = 0;
   641  02BB  1007               	bcf	7,0	;volatile
   642  02BC                     l1754:
   643                           
   644                           ;main.c: 77:     RC2 = 0;
   645  02BC  1107               	bcf	7,2	;volatile
   646  02BD                     l1756:
   647                           
   648                           ;main.c: 78:     RC3 = 0;
   649  02BD  1187               	bcf	7,3	;volatile
   650  02BE                     l1758:
   651                           
   652                           ;main.c: 81:     Lcd_Init();
   653  02BE  120A  118A  21F1  120A  118A  	fcall	_Lcd_Init
   654  02C3                     l1760:
   655                           
   656                           ;main.c: 82:     Lcd_Clear();
   657  02C3  120A  118A  24F0  120A  118A  	fcall	_Lcd_Clear
   658  02C8                     l108:	
   659                           ;main.c: 86:     while(1)
   660                           
   661  02C8  0064               	clrwdt	;# 
   662  02C9                     l1762:
   663                           
   664                           ;main.c: 89:         if (RB0 == 0)
   665  02C9  1283               	bcf	3,5	;RP0=0, select bank0
   666  02CA  1303               	bcf	3,6	;RP1=0, select bank0
   667  02CB  1806               	btfsc	6,0	;volatile
   668  02CC  2ACE               	goto	u1351
   669  02CD  2ACF               	goto	u1350
   670  02CE                     u1351:
   671  02CE  2AE3               	goto	l1772
   672  02CF                     u1350:
   673  02CF                     l1764:
   674                           
   675                           ;main.c: 90:         {;main.c: 91:             RC0 = 1;
   676  02CF  1407               	bsf	7,0	;volatile
   677                           
   678                           ;main.c: 92:             RC2 = 1;
   679  02D0  1507               	bsf	7,2	;volatile
   680  02D1                     l1766:
   681                           
   682                           ;main.c: 94:             _delay((unsigned long)((150)*(20000000/4000.0)));
   683  02D1  3004               	movlw	4
   684  02D2  1283               	bcf	3,5	;RP0=0, select bank0
   685  02D3  1303               	bcf	3,6	;RP1=0, select bank0
   686  02D4  00BB               	movwf	??_main+2
   687  02D5  30CF               	movlw	207
   688  02D6  00BA               	movwf	??_main+1
   689  02D7  3001               	movlw	1
   690  02D8  00B9               	movwf	??_main
   691  02D9                     u1367:
   692  02D9  0BB9               	decfsz	??_main,f
   693  02DA  2AD9               	goto	u1367
   694  02DB  0BBA               	decfsz	??_main+1,f
   695  02DC  2AD9               	goto	u1367
   696  02DD  0BBB               	decfsz	??_main+2,f
   697  02DE  2AD9               	goto	u1367
   698  02DF                     l1768:
   699                           
   700                           ;main.c: 95:             RC0 = 0;
   701  02DF  1283               	bcf	3,5	;RP0=0, select bank0
   702  02E0  1303               	bcf	3,6	;RP1=0, select bank0
   703  02E1  1007               	bcf	7,0	;volatile
   704  02E2                     l1770:
   705                           
   706                           ;main.c: 96:             RC2 = 0;
   707  02E2  1107               	bcf	7,2	;volatile
   708  02E3                     l1772:
   709                           
   710                           ;main.c: 100:         setCronometro();
   711  02E3  120A  118A  2435  120A  118A  	fcall	_setCronometro
   712  02E8  2AC8               	goto	l108
   713  02E9  120A  118A  280C   	ljmp	start
   714  02EC                     __end_of_main:
   715                           
   716                           	psect	text1
   717  0435                     __ptext1:	
   718 ;; *************** function _setCronometro *****************
   719 ;; Defined at:
   720 ;;		line 129 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0
   736 ;;      Temps:          0       1       0       0       0
   737 ;;      Totals:         0       1       0       0       0
   738 ;;Total ram usage:        1 bytes
   739 ;; Hardware stack levels used: 1
   740 ;; Hardware stack levels required when called: 5
   741 ;; This function calls:
   742 ;;		_Lcd_Set_Cursor
   743 ;;		_Lcd_Write_String
   744 ;;		_sprintf
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750  0435                     _setCronometro:	
   751                           ;psect for function _setCronometro
   752                           
   753  0435                     l1724:	
   754                           ;incstack = 0
   755                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   756                           
   757                           
   758                           ;main.c: 131:     sprintf(buffer,"1-      %02d:%02d:%02d", minutos, segundos, centesimos
      +                          );
   759  0435  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   760  0436  1283               	bcf	3,5	;RP0=0, select bank0
   761  0437  1303               	bcf	3,6	;RP1=0, select bank0
   762  0438  00B8               	movwf	??_setCronometro
   763  0439  0838               	movf	??_setCronometro,w
   764  043A  00A5               	movwf	sprintf@f
   765  043B  0843               	movf	_minutos+1,w
   766  043C  00A7               	movwf	?_sprintf+2
   767  043D  0842               	movf	_minutos,w
   768  043E  00A6               	movwf	?_sprintf+1
   769  043F  0841               	movf	_segundos+1,w
   770  0440  00A9               	movwf	?_sprintf+4
   771  0441  0840               	movf	_segundos,w
   772  0442  00A8               	movwf	?_sprintf+3
   773  0443  083F               	movf	_centesimos+1,w
   774  0444  00AB               	movwf	?_sprintf+6
   775  0445  083E               	movf	_centesimos,w
   776  0446  00AA               	movwf	?_sprintf+5
   777  0447  3044               	movlw	(low (_buffer| 0))& (0+255)
   778  0448  120A  118A  201D  120A  118A  	fcall	_sprintf
   779  044D                     l1726:
   780                           
   781                           ;main.c: 132:     Lcd_Set_Cursor(1,1);
   782  044D  01F6               	clrf	Lcd_Set_Cursor@b
   783  044E  0AF6               	incf	Lcd_Set_Cursor@b,f
   784  044F  3001               	movlw	1
   785  0450  120A  118A  224F  120A  118A  	fcall	_Lcd_Set_Cursor
   786  0455                     l1728:
   787                           
   788                           ;main.c: 133:     Lcd_Write_String(buffer);
   789  0455  3044               	movlw	(low (_buffer| 0))& (0+255)
   790  0456  120A  118A  24A3  120A  118A  	fcall	_Lcd_Write_String
   791  045B                     l122:
   792  045B  0008               	return
   793  045C                     __end_of_setCronometro:
   794                           
   795                           	psect	text2
   796  001D                     __ptext2:	
   797 ;; *************** function _sprintf *****************
   798 ;; Defined at:
   799 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  sp              1    wreg     PTR unsigned char 
   802 ;;		 -> buffer(10), 
   803 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   804 ;;		 -> STR_1(23), 
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   807 ;;		 -> buffer(10), 
   808 ;;  tmpval          4    0        struct .
   809 ;;  width           2   20[BANK0 ] int 
   810 ;;  val             2   17[BANK0 ] unsigned int 
   811 ;;  cp              2    0        PTR const unsigned char 
   812 ;;  len             2    0        unsigned int 
   813 ;;  c               1   23[BANK0 ] unsigned char 
   814 ;;  flag            1   19[BANK0 ] unsigned char 
   815 ;;  prec            1   16[BANK0 ] char 
   816 ;;  ap              1   15[BANK0 ] PTR void [1]
   817 ;;		 -> ?_sprintf(2), 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  2    5[BANK0 ] int 
   820 ;; Registers used:
   821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   827 ;;      Params:         0       7       0       0       0
   828 ;;      Locals:         0       9       0       0       0
   829 ;;      Temps:          0       3       0       0       0
   830 ;;      Totals:         0      19       0       0       0
   831 ;;Total ram usage:       19 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; Hardware stack levels required when called: 3
   834 ;; This function calls:
   835 ;;		___lwdiv
   836 ;;		___lwmod
   837 ;;		___wmul
   838 ;;		_isdigit
   839 ;; This function is called by:
   840 ;;		_setCronometro
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844  001D                     _sprintf:	
   845                           ;psect for function _sprintf
   846                           
   847                           
   848                           ;incstack = 0
   849                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   850                           ;sprintf@sp stored from wreg
   851  001D  1283               	bcf	3,5	;RP0=0, select bank0
   852  001E  1303               	bcf	3,6	;RP1=0, select bank0
   853  001F  00B6               	movwf	sprintf@sp
   854  0020                     l1606:
   855                           
   856                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   857  0020  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   858  0021  00AC               	movwf	??_sprintf
   859  0022  082C               	movf	??_sprintf,w
   860  0023  00AF               	movwf	sprintf@ap
   861                           
   862                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   863  0024  29DA               	goto	l1710
   864  0025                     l1608:
   865                           
   866                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   867  0025  3025               	movlw	37
   868  0026  0637               	xorwf	sprintf@c,w
   869  0027  1903               	btfsc	3,2
   870  0028  282A               	goto	u1171
   871  0029  282B               	goto	u1170
   872  002A                     u1171:
   873  002A  2837               	goto	l1614
   874  002B                     u1170:
   875  002B                     l1610:
   876                           
   877                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   878  002B  0837               	movf	sprintf@c,w
   879  002C  00AC               	movwf	??_sprintf
   880  002D  0836               	movf	sprintf@sp,w
   881  002E  0084               	movwf	4
   882  002F  082C               	movf	??_sprintf,w
   883  0030  1383               	bcf	3,7	;select IRP bank0
   884  0031  0080               	movwf	0
   885  0032                     l1612:
   886  0032  3001               	movlw	1
   887  0033  00AC               	movwf	??_sprintf
   888  0034  082C               	movf	??_sprintf,w
   889  0035  07B6               	addwf	sprintf@sp,f
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
   892  0036  29DA               	goto	l1710
   893  0037                     l1614:
   894                           
   895                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   896  0037  01B4               	clrf	sprintf@width
   897  0038  01B5               	clrf	sprintf@width+1
   898                           
   899                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   900  0039  01B3               	clrf	sprintf@flag
   901  003A  2840               	goto	l1620
   902  003B                     l226:	
   903                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
   904                           
   905                           
   906                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
   907  003B  1533               	bsf	sprintf@flag,2
   908  003C                     l1616:
   909                           
   910                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
   911  003C  3001               	movlw	1
   912  003D  00AC               	movwf	??_sprintf
   913  003E  082C               	movf	??_sprintf,w
   914  003F  07A5               	addwf	sprintf@f,f
   915  0040                     l1620:	
   916                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
   917                           
   918  0040  0825               	movf	sprintf@f,w
   919  0041  0084               	movwf	4
   920  0042  120A  118A  240E  120A  118A  	fcall	stringdir
   921  0047  00AC               	movwf	??_sprintf
   922  0048  01AD               	clrf	??_sprintf+1
   923                           
   924                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   925                           ; Switch size 1, requested type "simple"
   926                           ; Number of cases is 1, Range of values is 0 to 0
   927                           ; switch strategies available:
   928                           ; Name         Instructions Cycles
   929                           ; simple_byte            4     3 (average)
   930                           ; direct_byte           11     8 (fixed)
   931                           ; jumptable            260     6 (fixed)
   932                           ;	Chosen strategy is simple_byte
   933  0049  082D               	movf	??_sprintf+1,w
   934  004A  3A00               	xorlw	0	; case 0
   935  004B  1903               	skipnz
   936  004C  284E               	goto	l1814
   937  004D  2853               	goto	l1622
   938  004E                     l1814:
   939                           
   940                           ; Switch size 1, requested type "simple"
   941                           ; Number of cases is 1, Range of values is 48 to 48
   942                           ; switch strategies available:
   943                           ; Name         Instructions Cycles
   944                           ; simple_byte            4     3 (average)
   945                           ; direct_byte           14    11 (fixed)
   946                           ; jumptable            263     9 (fixed)
   947                           ;	Chosen strategy is simple_byte
   948  004E  082C               	movf	??_sprintf,w
   949  004F  3A30               	xorlw	48	; case 48
   950  0050  1903               	skipnz
   951  0051  283B               	goto	l226
   952  0052  2853               	goto	l1622
   953  0053                     l1622:
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
   956  0053  0825               	movf	sprintf@f,w
   957  0054  0084               	movwf	4
   958  0055  120A  118A  240E  120A  118A  	fcall	stringdir
   959  005A  120A  118A  24DE  120A  118A  	fcall	_isdigit
   960  005F  1C03               	btfss	3,0
   961  0060  2862               	goto	u1181
   962  0061  2863               	goto	u1180
   963  0062                     u1181:
   964  0062  28A3               	goto	l1636
   965  0063                     u1180:
   966  0063                     l1624:
   967                           
   968                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
   969  0063  1283               	bcf	3,5	;RP0=0, select bank0
   970  0064  1303               	bcf	3,6	;RP1=0, select bank0
   971  0065  01B4               	clrf	sprintf@width
   972  0066  01B5               	clrf	sprintf@width+1
   973  0067                     l1626:
   974                           
   975                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
   976  0067  300A               	movlw	10
   977  0068  00F2               	movwf	___wmul@multiplier
   978  0069  3000               	movlw	0
   979  006A  00F3               	movwf	___wmul@multiplier+1
   980  006B  1283               	bcf	3,5	;RP0=0, select bank0
   981  006C  1303               	bcf	3,6	;RP1=0, select bank0
   982  006D  0835               	movf	sprintf@width+1,w
   983  006E  00F5               	movwf	___wmul@multiplicand+1
   984  006F  0834               	movf	sprintf@width,w
   985  0070  00F4               	movwf	___wmul@multiplicand
   986  0071  120A  118A  245C  120A  118A  	fcall	___wmul
   987  0076  0873               	movf	?___wmul+1,w
   988  0077  1283               	bcf	3,5	;RP0=0, select bank0
   989  0078  1303               	bcf	3,6	;RP1=0, select bank0
   990  0079  00B5               	movwf	sprintf@width+1
   991  007A  0872               	movf	?___wmul,w
   992  007B  00B4               	movwf	sprintf@width
   993  007C                     l1628:
   994                           
   995                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
   996  007C  0825               	movf	sprintf@f,w
   997  007D  0084               	movwf	4
   998  007E  120A  118A  240E  120A  118A  	fcall	stringdir
   999  0083  3ED0               	addlw	208
  1000  0084  00AC               	movwf	??_sprintf
  1001  0085  30FF               	movlw	255
  1002  0086  1803               	skipnc
  1003  0087  3000               	movlw	0
  1004  0088  00AD               	movwf	??_sprintf+1
  1005  0089  082C               	movf	??_sprintf,w
  1006  008A  07B4               	addwf	sprintf@width,f
  1007  008B  1803               	skipnc
  1008  008C  0AB5               	incf	sprintf@width+1,f
  1009  008D  082D               	movf	??_sprintf+1,w
  1010  008E  07B5               	addwf	sprintf@width+1,f
  1011  008F                     l1630:
  1012  008F  3001               	movlw	1
  1013  0090  00AC               	movwf	??_sprintf
  1014  0091  082C               	movf	??_sprintf,w
  1015  0092  07A5               	addwf	sprintf@f,f
  1016  0093                     l1632:
  1017                           
  1018                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1019  0093  0825               	movf	sprintf@f,w
  1020  0094  0084               	movwf	4
  1021  0095  120A  118A  240E  120A  118A  	fcall	stringdir
  1022  009A  120A  118A  24DE  120A  118A  	fcall	_isdigit
  1023  009F  1803               	btfsc	3,0
  1024  00A0  28A2               	goto	u1191
  1025  00A1  28A3               	goto	u1190
  1026  00A2                     u1191:
  1027  00A2  2867               	goto	l1626
  1028  00A3                     u1190:
  1029  00A3                     l1636:
  1030  00A3  3001               	movlw	1
  1031  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1032  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1033  00A6  07A5               	addwf	sprintf@f,f
  1034  00A7  30FF               	movlw	-1
  1035  00A8  0725               	addwf	sprintf@f,w
  1036  00A9  0084               	movwf	4
  1037  00AA  120A  118A  240E  120A  118A  	fcall	stringdir
  1038  00AF  00B7               	movwf	sprintf@c
  1039  00B0  00AC               	movwf	??_sprintf
  1040  00B1  01AD               	clrf	??_sprintf+1
  1041                           
  1042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1043                           ; Switch size 1, requested type "simple"
  1044                           ; Number of cases is 1, Range of values is 0 to 0
  1045                           ; switch strategies available:
  1046                           ; Name         Instructions Cycles
  1047                           ; simple_byte            4     3 (average)
  1048                           ; direct_byte           11     8 (fixed)
  1049                           ; jumptable            260     6 (fixed)
  1050                           ;	Chosen strategy is simple_byte
  1051  00B2  082D               	movf	??_sprintf+1,w
  1052  00B3  3A00               	xorlw	0	; case 0
  1053  00B4  1903               	skipnz
  1054  00B5  28B7               	goto	l1816
  1055  00B6  29DA               	goto	l1710
  1056  00B7                     l1816:
  1057                           
  1058                           ; Switch size 1, requested type "simple"
  1059                           ; Number of cases is 3, Range of values is 0 to 105
  1060                           ; switch strategies available:
  1061                           ; Name         Instructions Cycles
  1062                           ; simple_byte           10     6 (average)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065  00B7  082C               	movf	??_sprintf,w
  1066  00B8  3A00               	xorlw	0	; case 0
  1067  00B9  1903               	skipnz
  1068  00BA  29EC               	goto	l1712
  1069  00BB  3A64               	xorlw	100	; case 100
  1070  00BC  1903               	skipnz
  1071  00BD  28C2               	goto	l1638
  1072  00BE  3A0D               	xorlw	13	; case 105
  1073  00BF  1903               	skipnz
  1074  00C0  28C2               	goto	l1638
  1075  00C1  29DA               	goto	l1710
  1076  00C2                     l1638:
  1077                           
  1078                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1079  00C2  082F               	movf	sprintf@ap,w
  1080  00C3  0084               	movwf	4
  1081  00C4  1383               	bcf	3,7	;select IRP bank0
  1082  00C5  0800               	movf	0,w
  1083  00C6  00B1               	movwf	sprintf@val
  1084  00C7  0A84               	incf	4,f
  1085  00C8  0800               	movf	0,w
  1086  00C9  00B2               	movwf	sprintf@val+1
  1087  00CA                     l1640:
  1088  00CA  3002               	movlw	2
  1089  00CB  00AC               	movwf	??_sprintf
  1090  00CC  082C               	movf	??_sprintf,w
  1091  00CD  07AF               	addwf	sprintf@ap,f
  1092  00CE                     l1642:
  1093                           
  1094                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1095  00CE  1FB2               	btfss	sprintf@val+1,7
  1096  00CF  28D1               	goto	u1201
  1097  00D0  28D2               	goto	u1200
  1098  00D1                     u1201:
  1099  00D1  28DB               	goto	l1648
  1100  00D2                     u1200:
  1101  00D2                     l1644:
  1102                           
  1103                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1104  00D2  3003               	movlw	3
  1105  00D3  00AC               	movwf	??_sprintf
  1106  00D4  082C               	movf	??_sprintf,w
  1107  00D5  04B3               	iorwf	sprintf@flag,f
  1108  00D6                     l1646:
  1109                           
  1110                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1111  00D6  09B1               	comf	sprintf@val,f
  1112  00D7  09B2               	comf	sprintf@val+1,f
  1113  00D8  0AB1               	incf	sprintf@val,f
  1114  00D9  1903               	skipnz
  1115  00DA  0AB2               	incf	sprintf@val+1,f
  1116  00DB                     l1648:
  1117                           
  1118                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1119  00DB  01B7               	clrf	sprintf@c
  1120  00DC  0AB7               	incf	sprintf@c,f
  1121  00DD                     l1654:
  1122                           
  1123                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1124  00DD  0837               	movf	sprintf@c,w
  1125  00DE  00AC               	movwf	??_sprintf
  1126  00DF  072C               	addwf	??_sprintf,w
  1127  00E0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1128  00E1  0084               	movwf	4
  1129  00E2  120A  118A  240E  120A  118A  	fcall	stringdir
  1130  00E7  00AD               	movwf	??_sprintf+1
  1131  00E8  120A  118A  240E  120A  118A  	fcall	stringdir
  1132  00ED  00AE               	movwf	??_sprintf+2
  1133  00EE  082E               	movf	??_sprintf+2,w
  1134  00EF  0232               	subwf	sprintf@val+1,w
  1135  00F0  1D03               	skipz
  1136  00F1  28F4               	goto	u1215
  1137  00F2  082D               	movf	??_sprintf+1,w
  1138  00F3  0231               	subwf	sprintf@val,w
  1139  00F4                     u1215:
  1140  00F4  1803               	skipnc
  1141  00F5  28F7               	goto	u1211
  1142  00F6  28F8               	goto	u1210
  1143  00F7                     u1211:
  1144  00F7  28F9               	goto	l1658
  1145  00F8                     u1210:
  1146  00F8  2903               	goto	l1660
  1147  00F9                     l1658:
  1148  00F9  3001               	movlw	1
  1149  00FA  00AC               	movwf	??_sprintf
  1150  00FB  082C               	movf	??_sprintf,w
  1151  00FC  07B7               	addwf	sprintf@c,f
  1152  00FD  3005               	movlw	5
  1153  00FE  0637               	xorwf	sprintf@c,w
  1154  00FF  1D03               	btfss	3,2
  1155  0100  2902               	goto	u1221
  1156  0101  2903               	goto	u1220
  1157  0102                     u1221:
  1158  0102  28DD               	goto	l1654
  1159  0103                     u1220:
  1160  0103                     l1660:
  1161                           
  1162                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1163  0103  0834               	movf	sprintf@width,w
  1164  0104  0435               	iorwf	sprintf@width+1,w
  1165  0105  1903               	btfsc	3,2
  1166  0106  2908               	goto	u1231
  1167  0107  2909               	goto	u1230
  1168  0108                     u1231:
  1169  0108  2915               	goto	l244
  1170  0109                     u1230:
  1171  0109                     l1662:
  1172  0109  0833               	movf	sprintf@flag,w
  1173  010A  3903               	andlw	3
  1174  010B  1903               	btfsc	3,2
  1175  010C  290E               	goto	u1241
  1176  010D  290F               	goto	u1240
  1177  010E                     u1241:
  1178  010E  2915               	goto	l244
  1179  010F                     u1240:
  1180  010F                     l1664:
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1183  010F  30FF               	movlw	255
  1184  0110  07B4               	addwf	sprintf@width,f
  1185  0111  1803               	skipnc
  1186  0112  0AB5               	incf	sprintf@width+1,f
  1187  0113  30FF               	movlw	255
  1188  0114  07B5               	addwf	sprintf@width+1,f
  1189  0115                     l244:
  1190                           
  1191                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1192  0115  0835               	movf	sprintf@width+1,w
  1193  0116  3A80               	xorlw	128
  1194  0117  3C80               	sublw	128
  1195  0118  1D03               	skipz
  1196  0119  291C               	goto	u1255
  1197  011A  0834               	movf	sprintf@width,w
  1198  011B  0237               	subwf	sprintf@c,w
  1199  011C                     u1255:
  1200  011C  1803               	skipnc
  1201  011D  291F               	goto	u1251
  1202  011E  2920               	goto	u1250
  1203  011F                     u1251:
  1204  011F  292C               	goto	l1668
  1205  0120                     u1250:
  1206  0120                     l1666:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1209  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0122  0837               	movf	sprintf@c,w
  1212  0123  00AC               	movwf	??_sprintf
  1213  0124  01AD               	clrf	??_sprintf+1
  1214  0125  082C               	movf	??_sprintf,w
  1215  0126  02B4               	subwf	sprintf@width,f
  1216  0127  082D               	movf	??_sprintf+1,w
  1217  0128  1C03               	skipc
  1218  0129  03B5               	decf	sprintf@width+1,f
  1219  012A  02B5               	subwf	sprintf@width+1,f
  1220  012B  2930               	goto	l1670
  1221  012C                     l1668:
  1222                           
  1223                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1224  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1225  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1226  012E  01B4               	clrf	sprintf@width
  1227  012F  01B5               	clrf	sprintf@width+1
  1228  0130                     l1670:
  1229                           
  1230                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1231  0130  1D33               	btfss	sprintf@flag,2
  1232  0131  2933               	goto	u1261
  1233  0132  2934               	goto	u1260
  1234  0133                     u1261:
  1235  0133  2963               	goto	l1686
  1236  0134                     u1260:
  1237  0134                     l1672:
  1238                           
  1239                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1240  0134  0833               	movf	sprintf@flag,w
  1241  0135  3903               	andlw	3
  1242  0136  1903               	btfsc	3,2
  1243  0137  2939               	goto	u1271
  1244  0138  293A               	goto	u1270
  1245  0139                     u1271:
  1246  0139  2945               	goto	l1678
  1247  013A                     u1270:
  1248  013A                     l1674:
  1249                           
  1250                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1251  013A  302D               	movlw	45
  1252  013B  00AC               	movwf	??_sprintf
  1253  013C  0836               	movf	sprintf@sp,w
  1254  013D  0084               	movwf	4
  1255  013E  082C               	movf	??_sprintf,w
  1256  013F  1383               	bcf	3,7	;select IRP bank0
  1257  0140  0080               	movwf	0
  1258  0141                     l1676:
  1259  0141  3001               	movlw	1
  1260  0142  00AC               	movwf	??_sprintf
  1261  0143  082C               	movf	??_sprintf,w
  1262  0144  07B6               	addwf	sprintf@sp,f
  1263  0145                     l1678:
  1264                           
  1265                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1266  0145  0834               	movf	sprintf@width,w
  1267  0146  0435               	iorwf	sprintf@width+1,w
  1268  0147  1903               	btfsc	3,2
  1269  0148  294A               	goto	u1281
  1270  0149  294B               	goto	u1280
  1271  014A                     u1281:
  1272  014A  2991               	goto	l1700
  1273  014B                     u1280:
  1274  014B                     l1680:
  1275                           
  1276                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1277  014B  3030               	movlw	48
  1278  014C  00AC               	movwf	??_sprintf
  1279  014D  0836               	movf	sprintf@sp,w
  1280  014E  0084               	movwf	4
  1281  014F  082C               	movf	??_sprintf,w
  1282  0150  1383               	bcf	3,7	;select IRP bank0
  1283  0151  0080               	movwf	0
  1284  0152                     l1682:
  1285  0152  3001               	movlw	1
  1286  0153  00AC               	movwf	??_sprintf
  1287  0154  082C               	movf	??_sprintf,w
  1288  0155  07B6               	addwf	sprintf@sp,f
  1289  0156                     l1684:
  1290  0156  30FF               	movlw	255
  1291  0157  07B4               	addwf	sprintf@width,f
  1292  0158  1803               	skipnc
  1293  0159  0AB5               	incf	sprintf@width+1,f
  1294  015A  30FF               	movlw	255
  1295  015B  07B5               	addwf	sprintf@width+1,f
  1296  015C  0834               	movf	sprintf@width,w
  1297  015D  0435               	iorwf	sprintf@width+1,w
  1298  015E  1D03               	btfss	3,2
  1299  015F  2961               	goto	u1291
  1300  0160  2962               	goto	u1290
  1301  0161                     u1291:
  1302  0161  294B               	goto	l1680
  1303  0162                     u1290:
  1304  0162  2991               	goto	l1700
  1305  0163                     l1686:
  1306                           
  1307                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1308  0163  0834               	movf	sprintf@width,w
  1309  0164  0435               	iorwf	sprintf@width+1,w
  1310  0165  1903               	btfsc	3,2
  1311  0166  2968               	goto	u1301
  1312  0167  2969               	goto	u1300
  1313  0168                     u1301:
  1314  0168  2980               	goto	l1694
  1315  0169                     u1300:
  1316  0169                     l1688:
  1317                           
  1318                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1319  0169  3020               	movlw	32
  1320  016A  00AC               	movwf	??_sprintf
  1321  016B  0836               	movf	sprintf@sp,w
  1322  016C  0084               	movwf	4
  1323  016D  082C               	movf	??_sprintf,w
  1324  016E  1383               	bcf	3,7	;select IRP bank0
  1325  016F  0080               	movwf	0
  1326  0170                     l1690:
  1327  0170  3001               	movlw	1
  1328  0171  00AC               	movwf	??_sprintf
  1329  0172  082C               	movf	??_sprintf,w
  1330  0173  07B6               	addwf	sprintf@sp,f
  1331  0174                     l1692:
  1332  0174  30FF               	movlw	255
  1333  0175  07B4               	addwf	sprintf@width,f
  1334  0176  1803               	skipnc
  1335  0177  0AB5               	incf	sprintf@width+1,f
  1336  0178  30FF               	movlw	255
  1337  0179  07B5               	addwf	sprintf@width+1,f
  1338  017A  0834               	movf	sprintf@width,w
  1339  017B  0435               	iorwf	sprintf@width+1,w
  1340  017C  1D03               	btfss	3,2
  1341  017D  297F               	goto	u1311
  1342  017E  2980               	goto	u1310
  1343  017F                     u1311:
  1344  017F  2969               	goto	l1688
  1345  0180                     u1310:
  1346  0180                     l1694:
  1347                           
  1348                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1349  0180  0833               	movf	sprintf@flag,w
  1350  0181  3903               	andlw	3
  1351  0182  1903               	btfsc	3,2
  1352  0183  2985               	goto	u1321
  1353  0184  2986               	goto	u1320
  1354  0185                     u1321:
  1355  0185  2991               	goto	l1700
  1356  0186                     u1320:
  1357  0186                     l1696:
  1358                           
  1359                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1360  0186  302D               	movlw	45
  1361  0187  00AC               	movwf	??_sprintf
  1362  0188  0836               	movf	sprintf@sp,w
  1363  0189  0084               	movwf	4
  1364  018A  082C               	movf	??_sprintf,w
  1365  018B  1383               	bcf	3,7	;select IRP bank0
  1366  018C  0080               	movwf	0
  1367  018D                     l1698:
  1368  018D  3001               	movlw	1
  1369  018E  00AC               	movwf	??_sprintf
  1370  018F  082C               	movf	??_sprintf,w
  1371  0190  07B6               	addwf	sprintf@sp,f
  1372  0191                     l1700:
  1373                           
  1374                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1375  0191  0837               	movf	sprintf@c,w
  1376  0192  00AC               	movwf	??_sprintf
  1377  0193  082C               	movf	??_sprintf,w
  1378  0194  00B0               	movwf	sprintf@prec
  1379                           
  1380                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1381  0195  29D1               	goto	l1708
  1382  0196                     l1702:
  1383                           
  1384                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1385  0196  300A               	movlw	10
  1386  0197  00A0               	movwf	___lwmod@divisor
  1387  0198  3000               	movlw	0
  1388  0199  00A1               	movwf	___lwmod@divisor+1
  1389  019A  0830               	movf	sprintf@prec,w
  1390  019B  00AC               	movwf	??_sprintf
  1391  019C  072C               	addwf	??_sprintf,w
  1392  019D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1393  019E  0084               	movwf	4
  1394  019F  120A  118A  240E  120A  118A  	fcall	stringdir
  1395  01A4  00F2               	movwf	___lwdiv@divisor
  1396  01A5  120A  118A  240E  120A  118A  	fcall	stringdir
  1397  01AA  00F3               	movwf	___lwdiv@divisor+1
  1398  01AB  0832               	movf	sprintf@val+1,w
  1399  01AC  00F5               	movwf	___lwdiv@dividend+1
  1400  01AD  0831               	movf	sprintf@val,w
  1401  01AE  00F4               	movwf	___lwdiv@dividend
  1402  01AF  120A  118A  22EC  120A  118A  	fcall	___lwdiv
  1403  01B4  0873               	movf	?___lwdiv+1,w
  1404  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1405  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1406  01B7  00A3               	movwf	___lwmod@dividend+1
  1407  01B8  0872               	movf	?___lwdiv,w
  1408  01B9  00A2               	movwf	___lwmod@dividend
  1409  01BA  120A  118A  2330  120A  118A  	fcall	___lwmod
  1410  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1411  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1412  01C1  0820               	movf	?___lwmod,w
  1413  01C2  3E30               	addlw	48
  1414  01C3  00AD               	movwf	??_sprintf+1
  1415  01C4  082D               	movf	??_sprintf+1,w
  1416  01C5  00B7               	movwf	sprintf@c
  1417  01C6                     l1704:
  1418                           
  1419                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1420  01C6  0837               	movf	sprintf@c,w
  1421  01C7  00AC               	movwf	??_sprintf
  1422  01C8  0836               	movf	sprintf@sp,w
  1423  01C9  0084               	movwf	4
  1424  01CA  082C               	movf	??_sprintf,w
  1425  01CB  1383               	bcf	3,7	;select IRP bank0
  1426  01CC  0080               	movwf	0
  1427  01CD                     l1706:
  1428  01CD  3001               	movlw	1
  1429  01CE  00AC               	movwf	??_sprintf
  1430  01CF  082C               	movf	??_sprintf,w
  1431  01D0  07B6               	addwf	sprintf@sp,f
  1432  01D1                     l1708:
  1433                           
  1434                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1435  01D1  30FF               	movlw	255
  1436  01D2  00AC               	movwf	??_sprintf
  1437  01D3  082C               	movf	??_sprintf,w
  1438  01D4  07B0               	addwf	sprintf@prec,f
  1439  01D5  0A30               	incf	sprintf@prec,w
  1440  01D6  1D03               	btfss	3,2
  1441  01D7  29D9               	goto	u1331
  1442  01D8  29DA               	goto	u1330
  1443  01D9                     u1331:
  1444  01D9  2996               	goto	l1702
  1445  01DA                     u1330:
  1446  01DA                     l1710:
  1447                           
  1448                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1449  01DA  3001               	movlw	1
  1450  01DB  07A5               	addwf	sprintf@f,f
  1451  01DC  30FF               	movlw	-1
  1452  01DD  0725               	addwf	sprintf@f,w
  1453  01DE  0084               	movwf	4
  1454  01DF  120A  118A  240E  120A  118A  	fcall	stringdir
  1455  01E4  00AC               	movwf	??_sprintf
  1456  01E5  082C               	movf	??_sprintf,w
  1457  01E6  00B7               	movwf	sprintf@c
  1458  01E7  0837               	movf	sprintf@c,w
  1459  01E8  1D03               	btfss	3,2
  1460  01E9  29EB               	goto	u1341
  1461  01EA  29EC               	goto	u1340
  1462  01EB                     u1341:
  1463  01EB  2825               	goto	l1608
  1464  01EC                     u1340:
  1465  01EC                     l1712:
  1466                           
  1467                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1468  01EC  0836               	movf	sprintf@sp,w
  1469  01ED  0084               	movwf	4
  1470  01EE  1383               	bcf	3,7	;select IRP bank0
  1471  01EF  0180               	clrf	0
  1472  01F0                     l261:
  1473  01F0  0008               	return
  1474  01F1                     __end_of_sprintf:
  1475                           
  1476                           	psect	text3
  1477  04DE                     __ptext3:	
  1478 ;; *************** function _isdigit *****************
  1479 ;; Defined at:
  1480 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  c               1    wreg     unsigned char 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  c               1    3[COMMON] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;		None               void
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1494 ;;      Params:         0       0       0       0       0
  1495 ;;      Locals:         2       0       0       0       0
  1496 ;;      Temps:          0       0       0       0       0
  1497 ;;      Totals:         2       0       0       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels used: 1
  1500 ;; Hardware stack levels required when called: 2
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_sprintf
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508  04DE                     _isdigit:	
  1509                           ;psect for function _isdigit
  1510                           
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1514                           ;isdigit@c stored from wreg
  1515  04DE  00F3               	movwf	isdigit@c
  1516  04DF                     l1220:
  1517  04DF  01F2               	clrf	_isdigit$733
  1518  04E0                     l1222:
  1519  04E0  303A               	movlw	58
  1520  04E1  0273               	subwf	isdigit@c,w
  1521  04E2  1803               	skipnc
  1522  04E3  2CE5               	goto	u611
  1523  04E4  2CE6               	goto	u610
  1524  04E5                     u611:
  1525  04E5  2CEE               	goto	l1228
  1526  04E6                     u610:
  1527  04E6                     l1224:
  1528  04E6  3030               	movlw	48
  1529  04E7  0273               	subwf	isdigit@c,w
  1530  04E8  1C03               	skipc
  1531  04E9  2CEB               	goto	u621
  1532  04EA  2CEC               	goto	u620
  1533  04EB                     u621:
  1534  04EB  2CEE               	goto	l1228
  1535  04EC                     u620:
  1536  04EC                     l1226:
  1537  04EC  01F2               	clrf	_isdigit$733
  1538  04ED  0AF2               	incf	_isdigit$733,f
  1539  04EE                     l1228:
  1540  04EE  0C72               	rrf	_isdigit$733,w
  1541  04EF                     l718:
  1542  04EF  0008               	return
  1543  04F0                     __end_of_isdigit:
  1544                           
  1545                           	psect	text4
  1546  045C                     __ptext4:	
  1547 ;; *************** function ___wmul *****************
  1548 ;; Defined at:
  1549 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  multiplier      2    2[COMMON] unsigned int 
  1552 ;;  multiplicand    2    4[COMMON] unsigned int 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  product         2    6[COMMON] unsigned int 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  2    2[COMMON] unsigned int 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1564 ;;      Params:         4       0       0       0       0
  1565 ;;      Locals:         2       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0
  1567 ;;      Totals:         6       0       0       0       0
  1568 ;;Total ram usage:        6 bytes
  1569 ;; Hardware stack levels used: 1
  1570 ;; Hardware stack levels required when called: 2
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_sprintf
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578  045C                     ___wmul:	
  1579                           ;psect for function ___wmul
  1580                           
  1581  045C                     l1232:	
  1582                           ;incstack = 0
  1583                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1584                           
  1585  045C  01F6               	clrf	___wmul@product
  1586  045D  01F7               	clrf	___wmul@product+1
  1587  045E                     l1234:
  1588  045E  1C72               	btfss	___wmul@multiplier,0
  1589  045F  2C61               	goto	u631
  1590  0460  2C62               	goto	u630
  1591  0461                     u631:
  1592  0461  2C68               	goto	l265
  1593  0462                     u630:
  1594  0462                     l1236:
  1595  0462  0874               	movf	___wmul@multiplicand,w
  1596  0463  07F6               	addwf	___wmul@product,f
  1597  0464  1803               	skipnc
  1598  0465  0AF7               	incf	___wmul@product+1,f
  1599  0466  0875               	movf	___wmul@multiplicand+1,w
  1600  0467  07F7               	addwf	___wmul@product+1,f
  1601  0468                     l265:
  1602  0468  3001               	movlw	1
  1603  0469                     u645:
  1604  0469  1003               	clrc
  1605  046A  0DF4               	rlf	___wmul@multiplicand,f
  1606  046B  0DF5               	rlf	___wmul@multiplicand+1,f
  1607  046C  3EFF               	addlw	-1
  1608  046D  1D03               	skipz
  1609  046E  2C69               	goto	u645
  1610  046F                     l1238:
  1611  046F  3001               	movlw	1
  1612  0470                     u655:
  1613  0470  1003               	clrc
  1614  0471  0CF3               	rrf	___wmul@multiplier+1,f
  1615  0472  0CF2               	rrf	___wmul@multiplier,f
  1616  0473  3EFF               	addlw	-1
  1617  0474  1D03               	skipz
  1618  0475  2C70               	goto	u655
  1619  0476                     l1240:
  1620  0476  0872               	movf	___wmul@multiplier,w
  1621  0477  0473               	iorwf	___wmul@multiplier+1,w
  1622  0478  1D03               	btfss	3,2
  1623  0479  2C7B               	goto	u661
  1624  047A  2C7C               	goto	u660
  1625  047B                     u661:
  1626  047B  2C5E               	goto	l1234
  1627  047C                     u660:
  1628  047C                     l1242:
  1629  047C  0877               	movf	___wmul@product+1,w
  1630  047D  00F3               	movwf	?___wmul+1
  1631  047E  0876               	movf	___wmul@product,w
  1632  047F  00F2               	movwf	?___wmul
  1633  0480                     l267:
  1634  0480  0008               	return
  1635  0481                     __end_of___wmul:
  1636                           
  1637                           	psect	text5
  1638  0330                     __ptext5:	
  1639 ;; *************** function ___lwmod *****************
  1640 ;; Defined at:
  1641 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  divisor         2    0[BANK0 ] unsigned int 
  1644 ;;  dividend        2    2[BANK0 ] unsigned int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  counter         1    4[BANK0 ] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    0[BANK0 ] unsigned int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       4       0       0       0
  1657 ;;      Locals:         0       1       0       0       0
  1658 ;;      Temps:          1       0       0       0       0
  1659 ;;      Totals:         1       5       0       0       0
  1660 ;;Total ram usage:        6 bytes
  1661 ;; Hardware stack levels used: 1
  1662 ;; Hardware stack levels required when called: 2
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_sprintf
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670  0330                     ___lwmod:	
  1671                           ;psect for function ___lwmod
  1672                           
  1673  0330                     l1584:	
  1674                           ;incstack = 0
  1675                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1676                           
  1677  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1678  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1679  0332  0820               	movf	___lwmod@divisor,w
  1680  0333  0421               	iorwf	___lwmod@divisor+1,w
  1681  0334  1903               	btfsc	3,2
  1682  0335  2B37               	goto	u1111
  1683  0336  2B38               	goto	u1110
  1684  0337                     u1111:
  1685  0337  2B67               	goto	l1602
  1686  0338                     u1110:
  1687  0338                     l1586:
  1688  0338  01A4               	clrf	___lwmod@counter
  1689  0339  0AA4               	incf	___lwmod@counter,f
  1690  033A  2B46               	goto	l1592
  1691  033B                     l1588:
  1692  033B  3001               	movlw	1
  1693  033C                     u1125:
  1694  033C  1003               	clrc
  1695  033D  0DA0               	rlf	___lwmod@divisor,f
  1696  033E  0DA1               	rlf	___lwmod@divisor+1,f
  1697  033F  3EFF               	addlw	-1
  1698  0340  1D03               	skipz
  1699  0341  2B3C               	goto	u1125
  1700  0342                     l1590:
  1701  0342  3001               	movlw	1
  1702  0343  00FA               	movwf	??___lwmod
  1703  0344  087A               	movf	??___lwmod,w
  1704  0345  07A4               	addwf	___lwmod@counter,f
  1705  0346                     l1592:
  1706  0346  1FA1               	btfss	___lwmod@divisor+1,7
  1707  0347  2B49               	goto	u1131
  1708  0348  2B4A               	goto	u1130
  1709  0349                     u1131:
  1710  0349  2B3B               	goto	l1588
  1711  034A                     u1130:
  1712  034A                     l1594:
  1713  034A  0821               	movf	___lwmod@divisor+1,w
  1714  034B  0223               	subwf	___lwmod@dividend+1,w
  1715  034C  1D03               	skipz
  1716  034D  2B50               	goto	u1145
  1717  034E  0820               	movf	___lwmod@divisor,w
  1718  034F  0222               	subwf	___lwmod@dividend,w
  1719  0350                     u1145:
  1720  0350  1C03               	skipc
  1721  0351  2B53               	goto	u1141
  1722  0352  2B54               	goto	u1140
  1723  0353                     u1141:
  1724  0353  2B5A               	goto	l1598
  1725  0354                     u1140:
  1726  0354                     l1596:
  1727  0354  0820               	movf	___lwmod@divisor,w
  1728  0355  02A2               	subwf	___lwmod@dividend,f
  1729  0356  0821               	movf	___lwmod@divisor+1,w
  1730  0357  1C03               	skipc
  1731  0358  03A3               	decf	___lwmod@dividend+1,f
  1732  0359  02A3               	subwf	___lwmod@dividend+1,f
  1733  035A                     l1598:
  1734  035A  3001               	movlw	1
  1735  035B                     u1155:
  1736  035B  1003               	clrc
  1737  035C  0CA1               	rrf	___lwmod@divisor+1,f
  1738  035D  0CA0               	rrf	___lwmod@divisor,f
  1739  035E  3EFF               	addlw	-1
  1740  035F  1D03               	skipz
  1741  0360  2B5B               	goto	u1155
  1742  0361                     l1600:
  1743  0361  3001               	movlw	1
  1744  0362  02A4               	subwf	___lwmod@counter,f
  1745  0363  1D03               	btfss	3,2
  1746  0364  2B66               	goto	u1161
  1747  0365  2B67               	goto	u1160
  1748  0366                     u1161:
  1749  0366  2B4A               	goto	l1594
  1750  0367                     u1160:
  1751  0367                     l1602:
  1752  0367  0823               	movf	___lwmod@dividend+1,w
  1753  0368  00A1               	movwf	?___lwmod+1
  1754  0369  0822               	movf	___lwmod@dividend,w
  1755  036A  00A0               	movwf	?___lwmod
  1756  036B                     l547:
  1757  036B  0008               	return
  1758  036C                     __end_of___lwmod:
  1759                           
  1760                           	psect	text6
  1761  02EC                     __ptext6:	
  1762 ;; *************** function ___lwdiv *****************
  1763 ;; Defined at:
  1764 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  divisor         2    2[COMMON] unsigned int 
  1767 ;;  dividend        2    4[COMMON] unsigned int 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  quotient        2    7[COMMON] unsigned int 
  1770 ;;  counter         1    9[COMMON] unsigned char 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  2    2[COMMON] unsigned int 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1780 ;;      Params:         4       0       0       0       0
  1781 ;;      Locals:         3       0       0       0       0
  1782 ;;      Temps:          1       0       0       0       0
  1783 ;;      Totals:         8       0       0       0       0
  1784 ;;Total ram usage:        8 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 2
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_sprintf
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794  02EC                     ___lwdiv:	
  1795                           ;psect for function ___lwdiv
  1796                           
  1797  02EC                     l1246:	
  1798                           ;incstack = 0
  1799                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1800                           
  1801  02EC  01F7               	clrf	___lwdiv@quotient
  1802  02ED  01F8               	clrf	___lwdiv@quotient+1
  1803  02EE                     l1248:
  1804  02EE  0872               	movf	___lwdiv@divisor,w
  1805  02EF  0473               	iorwf	___lwdiv@divisor+1,w
  1806  02F0  1903               	btfsc	3,2
  1807  02F1  2AF3               	goto	u671
  1808  02F2  2AF4               	goto	u670
  1809  02F3                     u671:
  1810  02F3  2B2B               	goto	l1268
  1811  02F4                     u670:
  1812  02F4                     l1250:
  1813  02F4  01F9               	clrf	___lwdiv@counter
  1814  02F5  0AF9               	incf	___lwdiv@counter,f
  1815  02F6  2B02               	goto	l1256
  1816  02F7                     l1252:
  1817  02F7  3001               	movlw	1
  1818  02F8                     u685:
  1819  02F8  1003               	clrc
  1820  02F9  0DF2               	rlf	___lwdiv@divisor,f
  1821  02FA  0DF3               	rlf	___lwdiv@divisor+1,f
  1822  02FB  3EFF               	addlw	-1
  1823  02FC  1D03               	skipz
  1824  02FD  2AF8               	goto	u685
  1825  02FE                     l1254:
  1826  02FE  3001               	movlw	1
  1827  02FF  00F6               	movwf	??___lwdiv
  1828  0300  0876               	movf	??___lwdiv,w
  1829  0301  07F9               	addwf	___lwdiv@counter,f
  1830  0302                     l1256:
  1831  0302  1FF3               	btfss	___lwdiv@divisor+1,7
  1832  0303  2B05               	goto	u691
  1833  0304  2B06               	goto	u690
  1834  0305                     u691:
  1835  0305  2AF7               	goto	l1252
  1836  0306                     u690:
  1837  0306                     l1258:
  1838  0306  3001               	movlw	1
  1839  0307                     u705:
  1840  0307  1003               	clrc
  1841  0308  0DF7               	rlf	___lwdiv@quotient,f
  1842  0309  0DF8               	rlf	___lwdiv@quotient+1,f
  1843  030A  3EFF               	addlw	-1
  1844  030B  1D03               	skipz
  1845  030C  2B07               	goto	u705
  1846  030D  0873               	movf	___lwdiv@divisor+1,w
  1847  030E  0275               	subwf	___lwdiv@dividend+1,w
  1848  030F  1D03               	skipz
  1849  0310  2B13               	goto	u715
  1850  0311  0872               	movf	___lwdiv@divisor,w
  1851  0312  0274               	subwf	___lwdiv@dividend,w
  1852  0313                     u715:
  1853  0313  1C03               	skipc
  1854  0314  2B16               	goto	u711
  1855  0315  2B17               	goto	u710
  1856  0316                     u711:
  1857  0316  2B1E               	goto	l1264
  1858  0317                     u710:
  1859  0317                     l1260:
  1860  0317  0872               	movf	___lwdiv@divisor,w
  1861  0318  02F4               	subwf	___lwdiv@dividend,f
  1862  0319  0873               	movf	___lwdiv@divisor+1,w
  1863  031A  1C03               	skipc
  1864  031B  03F5               	decf	___lwdiv@dividend+1,f
  1865  031C  02F5               	subwf	___lwdiv@dividend+1,f
  1866  031D                     l1262:
  1867  031D  1477               	bsf	___lwdiv@quotient,0
  1868  031E                     l1264:
  1869  031E  3001               	movlw	1
  1870  031F                     u725:
  1871  031F  1003               	clrc
  1872  0320  0CF3               	rrf	___lwdiv@divisor+1,f
  1873  0321  0CF2               	rrf	___lwdiv@divisor,f
  1874  0322  3EFF               	addlw	-1
  1875  0323  1D03               	skipz
  1876  0324  2B1F               	goto	u725
  1877  0325                     l1266:
  1878  0325  3001               	movlw	1
  1879  0326  02F9               	subwf	___lwdiv@counter,f
  1880  0327  1D03               	btfss	3,2
  1881  0328  2B2A               	goto	u731
  1882  0329  2B2B               	goto	u730
  1883  032A                     u731:
  1884  032A  2B06               	goto	l1258
  1885  032B                     u730:
  1886  032B                     l1268:
  1887  032B  0878               	movf	___lwdiv@quotient+1,w
  1888  032C  00F3               	movwf	?___lwdiv+1
  1889  032D  0877               	movf	___lwdiv@quotient,w
  1890  032E  00F2               	movwf	?___lwdiv
  1891  032F                     l537:
  1892  032F  0008               	return
  1893  0330                     __end_of___lwdiv:
  1894                           
  1895                           	psect	text7
  1896  04A3                     __ptext7:	
  1897 ;; *************** function _Lcd_Write_String *****************
  1898 ;; Defined at:
  1899 ;;		line 96 in file "./lcd.h"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  a               1    wreg     PTR unsigned char 
  1902 ;;		 -> buffer(10), 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  a               1   10[COMMON] PTR unsigned char 
  1905 ;;		 -> buffer(10), 
  1906 ;;  i               2    8[COMMON] int 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         3       0       0       0       0
  1918 ;;      Temps:          1       0       0       0       0
  1919 ;;      Totals:         4       0       0       0       0
  1920 ;;Total ram usage:        4 bytes
  1921 ;; Hardware stack levels used: 1
  1922 ;; Hardware stack levels required when called: 4
  1923 ;; This function calls:
  1924 ;;		_Lcd_Write_Char
  1925 ;; This function is called by:
  1926 ;;		_setCronometro
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930  04A3                     _Lcd_Write_String:	
  1931                           ;psect for function _Lcd_Write_String
  1932                           
  1933                           
  1934                           ;incstack = 0
  1935                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1936                           ;Lcd_Write_String@a stored from wreg
  1937  04A3  00FA               	movwf	Lcd_Write_String@a
  1938  04A4                     l1314:
  1939                           
  1940                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  1941  04A4  01F8               	clrf	Lcd_Write_String@i
  1942  04A5  01F9               	clrf	Lcd_Write_String@i+1
  1943  04A6  2CB8               	goto	l1320
  1944  04A7                     l1316:
  1945                           
  1946                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  1947  04A7  0878               	movf	Lcd_Write_String@i,w
  1948  04A8  077A               	addwf	Lcd_Write_String@a,w
  1949  04A9  00F7               	movwf	??_Lcd_Write_String
  1950  04AA  0877               	movf	??_Lcd_Write_String,w
  1951  04AB  0084               	movwf	4
  1952  04AC  0800               	movf	0,w
  1953  04AD  120A  118A  236C  120A  118A  	fcall	_Lcd_Write_Char
  1954  04B2                     l1318:
  1955  04B2  3001               	movlw	1
  1956  04B3  07F8               	addwf	Lcd_Write_String@i,f
  1957  04B4  1803               	skipnc
  1958  04B5  0AF9               	incf	Lcd_Write_String@i+1,f
  1959  04B6  3000               	movlw	0
  1960  04B7  07F9               	addwf	Lcd_Write_String@i+1,f
  1961  04B8                     l1320:
  1962  04B8  0878               	movf	Lcd_Write_String@i,w
  1963  04B9  077A               	addwf	Lcd_Write_String@a,w
  1964  04BA  00F7               	movwf	??_Lcd_Write_String
  1965  04BB  0877               	movf	??_Lcd_Write_String,w
  1966  04BC  0084               	movwf	4
  1967  04BD  1383               	bcf	3,7	;select IRP bank0
  1968  04BE  0800               	movf	0,w
  1969  04BF  1D03               	btfss	3,2
  1970  04C0  2CC2               	goto	u841
  1971  04C1  2CC3               	goto	u840
  1972  04C2                     u841:
  1973  04C2  2CA7               	goto	l1316
  1974  04C3                     u840:
  1975  04C3                     l85:
  1976  04C3  0008               	return
  1977  04C4                     __end_of_Lcd_Write_String:
  1978                           
  1979                           	psect	text8
  1980  036C                     __ptext8:	
  1981 ;; *************** function _Lcd_Write_Char *****************
  1982 ;; Defined at:
  1983 ;;		line 80 in file "./lcd.h"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  a               1    wreg     unsigned char 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  a               1    6[COMMON] unsigned char 
  1988 ;;  y               1    5[COMMON] unsigned char 
  1989 ;;  temp            1    4[COMMON] unsigned char 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0, pclath, cstack
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1999 ;;      Params:         0       0       0       0       0
  2000 ;;      Locals:         3       0       0       0       0
  2001 ;;      Temps:          1       0       0       0       0
  2002 ;;      Totals:         4       0       0       0       0
  2003 ;;Total ram usage:        4 bytes
  2004 ;; Hardware stack levels used: 1
  2005 ;; Hardware stack levels required when called: 3
  2006 ;; This function calls:
  2007 ;;		_Lcd_Port
  2008 ;; This function is called by:
  2009 ;;		_Lcd_Write_String
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013  036C                     _Lcd_Write_Char:	
  2014                           ;psect for function _Lcd_Write_Char
  2015                           
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2019                           ;Lcd_Write_Char@a stored from wreg
  2020  036C  00F6               	movwf	Lcd_Write_Char@a
  2021  036D                     l1200:
  2022                           
  2023                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2024  036D  0876               	movf	Lcd_Write_Char@a,w
  2025  036E  390F               	andlw	15
  2026  036F  00F3               	movwf	??_Lcd_Write_Char
  2027  0370  0873               	movf	??_Lcd_Write_Char,w
  2028  0371  00F4               	movwf	Lcd_Write_Char@temp
  2029                           
  2030                           ;./lcd.h: 84:    y = a&0xF0;
  2031  0372  0876               	movf	Lcd_Write_Char@a,w
  2032  0373  39F0               	andlw	240
  2033  0374  00F3               	movwf	??_Lcd_Write_Char
  2034  0375  0873               	movf	??_Lcd_Write_Char,w
  2035  0376  00F5               	movwf	Lcd_Write_Char@y
  2036  0377                     l1202:
  2037                           
  2038                           ;./lcd.h: 85:    RD2 = 1;
  2039  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0378  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0379  1508               	bsf	8,2	;volatile
  2042  037A                     l1204:
  2043                           
  2044                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2045  037A  0875               	movf	Lcd_Write_Char@y,w
  2046  037B  00F3               	movwf	??_Lcd_Write_Char
  2047  037C  3004               	movlw	4
  2048  037D                     u605:
  2049  037D  1003               	clrc
  2050  037E  0CF3               	rrf	??_Lcd_Write_Char,f
  2051  037F  3EFF               	addlw	-1
  2052  0380  1D03               	skipz
  2053  0381  2B7D               	goto	u605
  2054  0382  0873               	movf	??_Lcd_Write_Char,w
  2055  0383  120A  118A  2481  120A  118A  	fcall	_Lcd_Port
  2056  0388                     l1206:
  2057                           
  2058                           ;./lcd.h: 87:    RD3 = 1;
  2059  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2061  038A  1588               	bsf	8,3	;volatile
  2062  038B                     l1208:
  2063                           
  2064                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2065  038B  3042               	movlw	66
  2066  038C  00F3               	movwf	??_Lcd_Write_Char
  2067  038D                     u1377:
  2068  038D  0BF3               	decfsz	??_Lcd_Write_Char,f
  2069  038E  2B8D               	goto	u1377
  2070  038F  0000               	nop
  2071  0390                     l1210:
  2072                           
  2073                           ;./lcd.h: 89:    RD3 = 0;
  2074  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0392  1188               	bcf	8,3	;volatile
  2077  0393                     l1212:
  2078                           
  2079                           ;./lcd.h: 90:    Lcd_Port(temp);
  2080  0393  0874               	movf	Lcd_Write_Char@temp,w
  2081  0394  120A  118A  2481  120A  118A  	fcall	_Lcd_Port
  2082  0399                     l1214:
  2083                           
  2084                           ;./lcd.h: 91:    RD3 = 1;
  2085  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2086  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2087  039B  1588               	bsf	8,3	;volatile
  2088  039C                     l1216:
  2089                           
  2090                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2091  039C  3042               	movlw	66
  2092  039D  00F3               	movwf	??_Lcd_Write_Char
  2093  039E                     u1387:
  2094  039E  0BF3               	decfsz	??_Lcd_Write_Char,f
  2095  039F  2B9E               	goto	u1387
  2096  03A0  0000               	nop
  2097  03A1                     l1218:
  2098                           
  2099                           ;./lcd.h: 93:    RD3 = 0;
  2100  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2101  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2102  03A3  1188               	bcf	8,3	;volatile
  2103  03A4                     l79:
  2104  03A4  0008               	return
  2105  03A5                     __end_of_Lcd_Write_Char:
  2106                           
  2107                           	psect	text9
  2108  024F                     __ptext9:	
  2109 ;; *************** function _Lcd_Set_Cursor *****************
  2110 ;; Defined at:
  2111 ;;		line 40 in file "./lcd.h"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  a               1    wreg     unsigned char 
  2114 ;;  b               1    6[COMMON] unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  a               1    0[BANK0 ] unsigned char 
  2117 ;;  temp            1    3[BANK0 ] unsigned char 
  2118 ;;  y               1    2[BANK0 ] unsigned char 
  2119 ;;  z               1    1[BANK0 ] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0, pclath, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2129 ;;      Params:         1       0       0       0       0
  2130 ;;      Locals:         0       4       0       0       0
  2131 ;;      Temps:          2       0       0       0       0
  2132 ;;      Totals:         3       4       0       0       0
  2133 ;;Total ram usage:        7 bytes
  2134 ;; Hardware stack levels used: 1
  2135 ;; Hardware stack levels required when called: 4
  2136 ;; This function calls:
  2137 ;;		_Lcd_Cmd
  2138 ;; This function is called by:
  2139 ;;		_setCronometro
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143  024F                     _Lcd_Set_Cursor:	
  2144                           ;psect for function _Lcd_Set_Cursor
  2145                           
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2149                           ;Lcd_Set_Cursor@a stored from wreg
  2150  024F  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0250  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0251  00A0               	movwf	Lcd_Set_Cursor@a
  2153  0252                     l1294:
  2154                           
  2155                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2156  0252  0320               	decf	Lcd_Set_Cursor@a,w
  2157  0253  1D03               	btfss	3,2
  2158  0254  2A56               	goto	u801
  2159  0255  2A57               	goto	u800
  2160  0256                     u801:
  2161  0256  2A7C               	goto	l1304
  2162  0257                     u800:
  2163  0257                     l1296:
  2164                           
  2165                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2166  0257  0876               	movf	Lcd_Set_Cursor@b,w
  2167  0258  3E7F               	addlw	127
  2168  0259  00F7               	movwf	??_Lcd_Set_Cursor
  2169  025A  0877               	movf	??_Lcd_Set_Cursor,w
  2170  025B  00A3               	movwf	Lcd_Set_Cursor@temp
  2171                           
  2172                           ;./lcd.h: 46:   z = temp>>4;
  2173  025C  0823               	movf	Lcd_Set_Cursor@temp,w
  2174  025D  00F7               	movwf	??_Lcd_Set_Cursor
  2175  025E  3004               	movlw	4
  2176  025F                     u815:
  2177  025F  1003               	clrc
  2178  0260  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2179  0261  3EFF               	addlw	-1
  2180  0262  1D03               	skipz
  2181  0263  2A5F               	goto	u815
  2182  0264  0877               	movf	??_Lcd_Set_Cursor,w
  2183  0265  00F8               	movwf	??_Lcd_Set_Cursor+1
  2184  0266  0878               	movf	??_Lcd_Set_Cursor+1,w
  2185  0267  00A1               	movwf	Lcd_Set_Cursor@z
  2186  0268                     l1298:
  2187                           
  2188                           ;./lcd.h: 47:   y = temp & 0x0F;
  2189  0268  0823               	movf	Lcd_Set_Cursor@temp,w
  2190  0269  390F               	andlw	15
  2191  026A  00F7               	movwf	??_Lcd_Set_Cursor
  2192  026B  0877               	movf	??_Lcd_Set_Cursor,w
  2193  026C  00A2               	movwf	Lcd_Set_Cursor@y
  2194  026D                     l1300:
  2195                           
  2196                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2197  026D  0821               	movf	Lcd_Set_Cursor@z,w
  2198  026E  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2199  0273                     l1302:
  2200                           
  2201                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2202  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0275  0822               	movf	Lcd_Set_Cursor@y,w
  2205  0276  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2206                           
  2207                           ;./lcd.h: 50:  }
  2208  027B  2AA6               	goto	l73
  2209  027C                     l1304:
  2210  027C  3002               	movlw	2
  2211  027D  0620               	xorwf	Lcd_Set_Cursor@a,w
  2212  027E  1D03               	btfss	3,2
  2213  027F  2A81               	goto	u821
  2214  0280  2A82               	goto	u820
  2215  0281                     u821:
  2216  0281  2AA6               	goto	l73
  2217  0282                     u820:
  2218  0282                     l1306:
  2219                           
  2220                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2221  0282  0876               	movf	Lcd_Set_Cursor@b,w
  2222  0283  3EBF               	addlw	191
  2223  0284  00F7               	movwf	??_Lcd_Set_Cursor
  2224  0285  0877               	movf	??_Lcd_Set_Cursor,w
  2225  0286  00A3               	movwf	Lcd_Set_Cursor@temp
  2226                           
  2227                           ;./lcd.h: 54:   z = temp>>4;
  2228  0287  0823               	movf	Lcd_Set_Cursor@temp,w
  2229  0288  00F7               	movwf	??_Lcd_Set_Cursor
  2230  0289  3004               	movlw	4
  2231  028A                     u835:
  2232  028A  1003               	clrc
  2233  028B  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2234  028C  3EFF               	addlw	-1
  2235  028D  1D03               	skipz
  2236  028E  2A8A               	goto	u835
  2237  028F  0877               	movf	??_Lcd_Set_Cursor,w
  2238  0290  00F8               	movwf	??_Lcd_Set_Cursor+1
  2239  0291  0878               	movf	??_Lcd_Set_Cursor+1,w
  2240  0292  00A1               	movwf	Lcd_Set_Cursor@z
  2241  0293                     l1308:
  2242                           
  2243                           ;./lcd.h: 55:   y = temp & 0x0F;
  2244  0293  0823               	movf	Lcd_Set_Cursor@temp,w
  2245  0294  390F               	andlw	15
  2246  0295  00F7               	movwf	??_Lcd_Set_Cursor
  2247  0296  0877               	movf	??_Lcd_Set_Cursor,w
  2248  0297  00A2               	movwf	Lcd_Set_Cursor@y
  2249  0298                     l1310:
  2250                           
  2251                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2252  0298  0821               	movf	Lcd_Set_Cursor@z,w
  2253  0299  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2254  029E                     l1312:
  2255                           
  2256                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2257  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2258  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2259  02A0  0822               	movf	Lcd_Set_Cursor@y,w
  2260  02A1  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2261  02A6                     l73:
  2262  02A6  0008               	return
  2263  02A7                     __end_of_Lcd_Set_Cursor:
  2264                           
  2265                           	psect	text10
  2266  01F1                     __ptext10:	
  2267 ;; *************** function _Lcd_Init *****************
  2268 ;; Defined at:
  2269 ;;		line 61 in file "./lcd.h"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0, pclath, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2283 ;;      Params:         0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0
  2285 ;;      Temps:          2       0       0       0       0
  2286 ;;      Totals:         2       0       0       0       0
  2287 ;;Total ram usage:        2 bytes
  2288 ;; Hardware stack levels used: 1
  2289 ;; Hardware stack levels required when called: 4
  2290 ;; This function calls:
  2291 ;;		_Lcd_Cmd
  2292 ;;		_Lcd_Port
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298  01F1                     _Lcd_Init:	
  2299                           ;psect for function _Lcd_Init
  2300                           
  2301  01F1                     l1442:	
  2302                           ;incstack = 0
  2303                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2304                           
  2305                           
  2306                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2307  01F1  3000               	movlw	0
  2308  01F2  120A  118A  2481  120A  118A  	fcall	_Lcd_Port
  2309  01F7                     l1444:
  2310                           
  2311                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2312  01F7  3082               	movlw	130
  2313  01F8  00F7               	movwf	??_Lcd_Init+1
  2314  01F9  30DD               	movlw	221
  2315  01FA  00F6               	movwf	??_Lcd_Init
  2316  01FB                     u1397:
  2317  01FB  0BF6               	decfsz	??_Lcd_Init,f
  2318  01FC  29FB               	goto	u1397
  2319  01FD  0BF7               	decfsz	??_Lcd_Init+1,f
  2320  01FE  29FB               	goto	u1397
  2321  01FF  2A00               	nop2
  2322  0200                     l1446:
  2323                           
  2324                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2325  0200  3003               	movlw	3
  2326  0201  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2327                           
  2328                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2329  0206  3021               	movlw	33
  2330  0207  00F7               	movwf	??_Lcd_Init+1
  2331  0208  3076               	movlw	118
  2332  0209  00F6               	movwf	??_Lcd_Init
  2333  020A                     u1407:
  2334  020A  0BF6               	decfsz	??_Lcd_Init,f
  2335  020B  2A0A               	goto	u1407
  2336  020C  0BF7               	decfsz	??_Lcd_Init+1,f
  2337  020D  2A0A               	goto	u1407
  2338  020E  0000               	nop
  2339  020F                     l1448:
  2340                           
  2341                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2342  020F  3003               	movlw	3
  2343  0210  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2344  0215                     l1450:
  2345                           
  2346                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2347  0215  3048               	movlw	72
  2348  0216  00F7               	movwf	??_Lcd_Init+1
  2349  0217  306C               	movlw	108
  2350  0218  00F6               	movwf	??_Lcd_Init
  2351  0219                     u1417:
  2352  0219  0BF6               	decfsz	??_Lcd_Init,f
  2353  021A  2A19               	goto	u1417
  2354  021B  0BF7               	decfsz	??_Lcd_Init+1,f
  2355  021C  2A19               	goto	u1417
  2356  021D  0000               	nop
  2357                           
  2358                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2359  021E  3003               	movlw	3
  2360  021F  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2361                           
  2362                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2363  0224  3002               	movlw	2
  2364  0225  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2365                           
  2366                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2367  022A  3002               	movlw	2
  2368  022B  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2369                           
  2370                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2371  0230  3008               	movlw	8
  2372  0231  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2373                           
  2374                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2375  0236  3000               	movlw	0
  2376  0237  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2377                           
  2378                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2379  023C  300C               	movlw	12
  2380  023D  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2381                           
  2382                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2383  0242  3000               	movlw	0
  2384  0243  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2385                           
  2386                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2387  0248  3006               	movlw	6
  2388  0249  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2389  024E                     l76:
  2390  024E  0008               	return
  2391  024F                     __end_of_Lcd_Init:
  2392                           
  2393                           	psect	text11
  2394  04F0                     __ptext11:	
  2395 ;; *************** function _Lcd_Clear *****************
  2396 ;; Defined at:
  2397 ;;		line 34 in file "./lcd.h"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  2   66[None  ] int 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0, pclath, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2411 ;;      Params:         0       0       0       0       0
  2412 ;;      Locals:         0       0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0
  2414 ;;      Totals:         0       0       0       0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used: 1
  2417 ;; Hardware stack levels required when called: 4
  2418 ;; This function calls:
  2419 ;;		_Lcd_Cmd
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425  04F0                     _Lcd_Clear:	
  2426                           ;psect for function _Lcd_Clear
  2427                           
  2428  04F0                     l1440:	
  2429                           ;incstack = 0
  2430                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2431                           
  2432                           
  2433                           ;./lcd.h: 36:  Lcd_Cmd(0);
  2434  04F0  3000               	movlw	0
  2435  04F1  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2436                           
  2437                           ;./lcd.h: 37:  Lcd_Cmd(1);
  2438  04F6  3001               	movlw	1
  2439  04F7  120A  118A  24C4  120A  118A  	fcall	_Lcd_Cmd
  2440  04FC                     l67:
  2441  04FC  0008               	return
  2442  04FD                     __end_of_Lcd_Clear:
  2443                           
  2444                           	psect	text12
  2445  04C4                     __ptext12:	
  2446 ;; *************** function _Lcd_Cmd *****************
  2447 ;; Defined at:
  2448 ;;		line 25 in file "./lcd.h"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  a               1    wreg     unsigned char 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  a               1    5[COMMON] unsigned char 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2462 ;;      Params:         0       0       0       0       0
  2463 ;;      Locals:         1       0       0       0       0
  2464 ;;      Temps:          2       0       0       0       0
  2465 ;;      Totals:         3       0       0       0       0
  2466 ;;Total ram usage:        3 bytes
  2467 ;; Hardware stack levels used: 1
  2468 ;; Hardware stack levels required when called: 3
  2469 ;; This function calls:
  2470 ;;		_Lcd_Port
  2471 ;; This function is called by:
  2472 ;;		_Lcd_Clear
  2473 ;;		_Lcd_Set_Cursor
  2474 ;;		_Lcd_Init
  2475 ;;		_Lcd_Shift_Right
  2476 ;;		_Lcd_Shift_Left
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480  04C4                     _Lcd_Cmd:	
  2481                           ;psect for function _Lcd_Cmd
  2482                           
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2486                           ;Lcd_Cmd@a stored from wreg
  2487  04C4  00F5               	movwf	Lcd_Cmd@a
  2488  04C5                     l1190:
  2489                           
  2490                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2491  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2492  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2493  04C7  1108               	bcf	8,2	;volatile
  2494  04C8                     l1192:
  2495                           
  2496                           ;./lcd.h: 28:  Lcd_Port(a);
  2497  04C8  0875               	movf	Lcd_Cmd@a,w
  2498  04C9  120A  118A  2481  120A  118A  	fcall	_Lcd_Port
  2499  04CE                     l1194:
  2500                           
  2501                           ;./lcd.h: 29:  RD3 = 1;
  2502  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2503  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2504  04D0  1588               	bsf	8,3	;volatile
  2505  04D1                     l1196:
  2506                           
  2507                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2508  04D1  301A               	movlw	26
  2509  04D2  00F4               	movwf	??_Lcd_Cmd+1
  2510  04D3  30F8               	movlw	248
  2511  04D4  00F3               	movwf	??_Lcd_Cmd
  2512  04D5                     u1427:
  2513  04D5  0BF3               	decfsz	??_Lcd_Cmd,f
  2514  04D6  2CD5               	goto	u1427
  2515  04D7  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2516  04D8  2CD5               	goto	u1427
  2517  04D9  0000               	nop
  2518  04DA                     l1198:
  2519                           
  2520                           ;./lcd.h: 31:         RD3 = 0;
  2521  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2522  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2523  04DC  1188               	bcf	8,3	;volatile
  2524  04DD                     l64:
  2525  04DD  0008               	return
  2526  04DE                     __end_of_Lcd_Cmd:
  2527                           
  2528                           	psect	text13
  2529  0481                     __ptext13:	
  2530 ;; *************** function _Lcd_Port *****************
  2531 ;; Defined at:
  2532 ;;		line 3 in file "./lcd.h"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  a               1    wreg     unsigned char 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  a               1    2[COMMON] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         0       0       0       0       0
  2547 ;;      Locals:         1       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0
  2549 ;;      Totals:         1       0       0       0       0
  2550 ;;Total ram usage:        1 bytes
  2551 ;; Hardware stack levels used: 1
  2552 ;; Hardware stack levels required when called: 2
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_Lcd_Cmd
  2557 ;;		_Lcd_Init
  2558 ;;		_Lcd_Write_Char
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562  0481                     _Lcd_Port:	
  2563                           ;psect for function _Lcd_Port
  2564                           
  2565                           
  2566                           ;incstack = 0
  2567                           ; Regs used in _Lcd_Port: [wreg]
  2568                           ;Lcd_Port@a stored from wreg
  2569  0481  00F2               	movwf	Lcd_Port@a
  2570  0482                     l1180:
  2571                           
  2572                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2573  0482  1C72               	btfss	Lcd_Port@a,0
  2574  0483  2C85               	goto	u561
  2575  0484  2C86               	goto	u560
  2576  0485                     u561:
  2577  0485  2C8A               	goto	l53
  2578  0486                     u560:
  2579  0486                     l1182:
  2580                           
  2581                           ;./lcd.h: 6:   RD4 = 1;
  2582  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2584  0488  1608               	bsf	8,4	;volatile
  2585  0489  2C8D               	goto	l54
  2586  048A                     l53:	
  2587                           ;./lcd.h: 7:  else
  2588                           
  2589                           
  2590                           ;./lcd.h: 8:   RD4 = 0;
  2591  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2592  048B  1303               	bcf	3,6	;RP1=0, select bank0
  2593  048C  1208               	bcf	8,4	;volatile
  2594  048D                     l54:
  2595                           
  2596                           ;./lcd.h: 10:  if(a & 2)
  2597  048D  1CF2               	btfss	Lcd_Port@a,1
  2598  048E  2C90               	goto	u571
  2599  048F  2C91               	goto	u570
  2600  0490                     u571:
  2601  0490  2C93               	goto	l55
  2602  0491                     u570:
  2603  0491                     l1184:
  2604                           
  2605                           ;./lcd.h: 11:   RD5 = 1;
  2606  0491  1688               	bsf	8,5	;volatile
  2607  0492  2C94               	goto	l56
  2608  0493                     l55:	
  2609                           ;./lcd.h: 12:  else
  2610                           
  2611                           
  2612                           ;./lcd.h: 13:   RD5 = 0;
  2613  0493  1288               	bcf	8,5	;volatile
  2614  0494                     l56:
  2615                           
  2616                           ;./lcd.h: 15:  if(a & 4)
  2617  0494  1D72               	btfss	Lcd_Port@a,2
  2618  0495  2C97               	goto	u581
  2619  0496  2C98               	goto	u580
  2620  0497                     u581:
  2621  0497  2C9A               	goto	l57
  2622  0498                     u580:
  2623  0498                     l1186:
  2624                           
  2625                           ;./lcd.h: 16:   RD6 = 1;
  2626  0498  1708               	bsf	8,6	;volatile
  2627  0499  2C9B               	goto	l58
  2628  049A                     l57:	
  2629                           ;./lcd.h: 17:  else
  2630                           
  2631                           
  2632                           ;./lcd.h: 18:   RD6 = 0;
  2633  049A  1308               	bcf	8,6	;volatile
  2634  049B                     l58:
  2635                           
  2636                           ;./lcd.h: 20:  if(a & 8)
  2637  049B  1DF2               	btfss	Lcd_Port@a,3
  2638  049C  2C9E               	goto	u591
  2639  049D  2C9F               	goto	u590
  2640  049E                     u591:
  2641  049E  2CA1               	goto	l59
  2642  049F                     u590:
  2643  049F                     l1188:
  2644                           
  2645                           ;./lcd.h: 21:   RD7 = 1;
  2646  049F  1788               	bsf	8,7	;volatile
  2647  04A0  2CA2               	goto	l61
  2648  04A1                     l59:	
  2649                           ;./lcd.h: 22:  else
  2650                           
  2651                           
  2652                           ;./lcd.h: 23:   RD7 = 0;
  2653  04A1  1388               	bcf	8,7	;volatile
  2654  04A2                     l61:
  2655  04A2  0008               	return
  2656  04A3                     __end_of_Lcd_Port:
  2657                           
  2658                           	psect	text14
  2659  03A5                     __ptext14:	
  2660 ;; *************** function _ContaSegundos *****************
  2661 ;; Defined at:
  2662 ;;		line 106 in file "main.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         0       0       0       0       0
  2677 ;;      Locals:         0       0       0       0       0
  2678 ;;      Temps:          2       0       0       0       0
  2679 ;;      Totals:         2       0       0       0       0
  2680 ;;Total ram usage:        2 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 1
  2683 ;; This function calls:
  2684 ;;		_cronometro
  2685 ;; This function is called by:
  2686 ;;		Interrupt level 1
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690  03A5                     _ContaSegundos:	
  2691                           ;psect for function _ContaSegundos
  2692                           
  2693  03A5                     i1l1524:
  2694                           
  2695                           ;main.c: 108:     if(TMR1IF)
  2696  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2697  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2698  03A7  1C0C               	btfss	12,0	;volatile
  2699  03A8  2BAA               	goto	u107_21
  2700  03A9  2BAB               	goto	u107_20
  2701  03AA                     u107_21:
  2702  03AA  2BD7               	goto	i1l119
  2703  03AB                     u107_20:
  2704  03AB                     i1l1526:
  2705                           
  2706                           ;main.c: 109:     {;main.c: 110:         PIR1bits.TMR1IF = 0;
  2707  03AB  100C               	bcf	12,0	;volatile
  2708  03AC                     i1l1528:
  2709                           
  2710                           ;main.c: 111:         TMR1L = 0x95;
  2711  03AC  3095               	movlw	149
  2712  03AD  008E               	movwf	14	;volatile
  2713                           
  2714                           ;main.c: 112:         TMR1H = 0xE7;
  2715  03AE  30E7               	movlw	231
  2716  03AF  008F               	movwf	15	;volatile
  2717  03B0                     i1l1530:
  2718                           
  2719                           ;main.c: 116:         cronometro();
  2720  03B0  120A  118A  23DE  120A  118A  	fcall	_cronometro
  2721  03B5                     i1l1532:
  2722                           
  2723                           ;main.c: 118:         contador++;
  2724  03B5  3001               	movlw	1
  2725  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2726  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  2727  03B8  07BC               	addwf	_contador,f
  2728  03B9  1803               	skipnc
  2729  03BA  0ABD               	incf	_contador+1,f
  2730  03BB  3000               	movlw	0
  2731  03BC  07BD               	addwf	_contador+1,f
  2732  03BD                     i1l1534:
  2733                           
  2734                           ;main.c: 119:         if(contador == 100)
  2735  03BD  3064               	movlw	100
  2736  03BE  063C               	xorwf	_contador,w
  2737  03BF  043D               	iorwf	_contador+1,w
  2738  03C0  1D03               	btfss	3,2
  2739  03C1  2BC3               	goto	u108_21
  2740  03C2  2BC4               	goto	u108_20
  2741  03C3                     u108_21:
  2742  03C3  2BD7               	goto	i1l119
  2743  03C4                     u108_20:
  2744  03C4                     i1l1536:
  2745                           
  2746                           ;main.c: 120:         {;main.c: 121:             cronometro();
  2747  03C4  120A  118A  23DE  120A  118A  	fcall	_cronometro
  2748  03C9                     i1l1538:
  2749                           
  2750                           ;main.c: 122:             inverte = ~inverte;
  2751  03C9  3001               	movlw	(0+1) shl (_inverte& (0+7))
  2752  03CA  06FB               	xorwf	_inverte/(0+8),f
  2753  03CB                     i1l1540:
  2754                           
  2755                           ;main.c: 123:             RC3 = inverte;
  2756  03CB  187B               	btfsc	_inverte/(0+8),_inverte& (0+7)
  2757  03CC  2BCE               	goto	u109_21
  2758  03CD  2BD2               	goto	u109_20
  2759  03CE                     u109_21:
  2760  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2761  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2762  03D0  1587               	bsf	7,3	;volatile
  2763  03D1  2BD5               	goto	u110_24
  2764  03D2                     u109_20:
  2765  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2766  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2767  03D4  1187               	bcf	7,3	;volatile
  2768  03D5                     u110_24:
  2769  03D5                     i1l1542:
  2770                           
  2771                           ;main.c: 124:             contador = 0;
  2772  03D5  01BC               	clrf	_contador
  2773  03D6  01BD               	clrf	_contador+1
  2774  03D7                     i1l119:
  2775  03D7  0871               	movf	??_ContaSegundos+1,w
  2776  03D8  008A               	movwf	10
  2777  03D9  0E70               	swapf	??_ContaSegundos,w
  2778  03DA  0083               	movwf	3
  2779  03DB  0EFE               	swapf	btemp,f
  2780  03DC  0E7E               	swapf	btemp,w
  2781  03DD  0009               	retfie
  2782  03DE                     __end_of_ContaSegundos:
  2783                           
  2784                           	psect	intentry
  2785  0004                     __pintentry:	
  2786                           ;incstack = 0
  2787                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  2788                           
  2789  0004                     interrupt_function:
  2790  007E                     saved_w	set	btemp
  2791  0004  00FE               	movwf	btemp
  2792  0005  0E03               	swapf	3,w
  2793  0006  00F0               	movwf	??_ContaSegundos
  2794  0007  080A               	movf	10,w
  2795  0008  00F1               	movwf	??_ContaSegundos+1
  2796  0009  120A  118A  2BA5   	ljmp	_ContaSegundos
  2797                           
  2798                           	psect	text15
  2799  03DE                     __ptext15:	
  2800 ;; *************** function _cronometro *****************
  2801 ;; Defined at:
  2802 ;;		line 136 in file "main.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2, status,0
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2816 ;;      Params:         0       0       0       0       0
  2817 ;;      Locals:         0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0
  2819 ;;      Totals:         0       0       0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used: 1
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_ContaSegundos
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829  03DE                     _cronometro:	
  2830                           ;psect for function _cronometro
  2831                           
  2832  03DE                     i1l1458:	
  2833                           ;incstack = 0
  2834                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  2835                           
  2836                           
  2837                           ;main.c: 138:     centesimos++;
  2838  03DE  3001               	movlw	1
  2839  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2840  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2841  03E1  07BE               	addwf	_centesimos,f
  2842  03E2  1803               	skipnc
  2843  03E3  0ABF               	incf	_centesimos+1,f
  2844  03E4  3000               	movlw	0
  2845  03E5  07BF               	addwf	_centesimos+1,f
  2846  03E6                     i1l1460:
  2847                           
  2848                           ;main.c: 140:     if(centesimos == 100)
  2849  03E6  3064               	movlw	100
  2850  03E7  063E               	xorwf	_centesimos,w
  2851  03E8  043F               	iorwf	_centesimos+1,w
  2852  03E9  1D03               	btfss	3,2
  2853  03EA  2BEC               	goto	u103_21
  2854  03EB  2BED               	goto	u103_20
  2855  03EC                     u103_21:
  2856  03EC  2C0D               	goto	i1l128
  2857  03ED                     u103_20:
  2858  03ED                     i1l1462:
  2859                           
  2860                           ;main.c: 141:     {;main.c: 142:         centesimos = 0;
  2861  03ED  01BE               	clrf	_centesimos
  2862  03EE  01BF               	clrf	_centesimos+1
  2863  03EF                     i1l1464:
  2864                           
  2865                           ;main.c: 143:         segundos++;
  2866  03EF  3001               	movlw	1
  2867  03F0  07C0               	addwf	_segundos,f
  2868  03F1  1803               	skipnc
  2869  03F2  0AC1               	incf	_segundos+1,f
  2870  03F3  3000               	movlw	0
  2871  03F4  07C1               	addwf	_segundos+1,f
  2872  03F5                     i1l1466:
  2873                           
  2874                           ;main.c: 145:         if(segundos == 60)
  2875  03F5  303C               	movlw	60
  2876  03F6  0640               	xorwf	_segundos,w
  2877  03F7  0441               	iorwf	_segundos+1,w
  2878  03F8  1D03               	btfss	3,2
  2879  03F9  2BFB               	goto	u104_21
  2880  03FA  2BFC               	goto	u104_20
  2881  03FB                     u104_21:
  2882  03FB  2C0D               	goto	i1l128
  2883  03FC                     u104_20:
  2884  03FC                     i1l1468:
  2885                           
  2886                           ;main.c: 146:         {;main.c: 147:            segundos = 0;
  2887  03FC  01C0               	clrf	_segundos
  2888  03FD  01C1               	clrf	_segundos+1
  2889  03FE                     i1l1470:
  2890                           
  2891                           ;main.c: 148:            minutos++;
  2892  03FE  3001               	movlw	1
  2893  03FF  07C2               	addwf	_minutos,f
  2894  0400  1803               	skipnc
  2895  0401  0AC3               	incf	_minutos+1,f
  2896  0402  3000               	movlw	0
  2897  0403  07C3               	addwf	_minutos+1,f
  2898  0404                     i1l1472:
  2899                           
  2900                           ;main.c: 150:            if(minutos == 60) minutos = 0;
  2901  0404  303C               	movlw	60
  2902  0405  0642               	xorwf	_minutos,w
  2903  0406  0443               	iorwf	_minutos+1,w
  2904  0407  1D03               	btfss	3,2
  2905  0408  2C0A               	goto	u105_21
  2906  0409  2C0B               	goto	u105_20
  2907  040A                     u105_21:
  2908  040A  2C0D               	goto	i1l128
  2909  040B                     u105_20:
  2910  040B                     i1l1474:
  2911  040B  01C2               	clrf	_minutos
  2912  040C  01C3               	clrf	_minutos+1
  2913  040D                     i1l128:
  2914  040D  0008               	return
  2915  040E                     __end_of_cronometro:
  2916  007E                     btemp	set	126	;btemp
  2917  007E                     wtemp0	set	126
  2918                           
  2919                           	psect	config
  2920                           
  2921                           ;Config register CONFIG @ 0x2007
  2922                           ;	Oscillator Selection bits
  2923                           ;	FOSC = HS, HS oscillator
  2924                           ;	Watchdog Timer Enable bit
  2925                           ;	WDTE = ON, WDT enabled
  2926                           ;	Power-up Timer Enable bit
  2927                           ;	PWRTE = ON, PWRT enabled
  2928                           ;	Brown-out Reset Enable bit
  2929                           ;	BOREN = ON, BOR enabled
  2930                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2931                           ;	LVP = 0x1, unprogrammed default
  2932                           ;	Data EEPROM Memory Code Protection bit
  2933                           ;	CPD = 0x1, unprogrammed default
  2934                           ;	Flash Program Memory Write Enable bits
  2935                           ;	WRT = 0x3, unprogrammed default
  2936                           ;	In-Circuit Debugger Mode bit
  2937                           ;	DEBUG = 0x1, unprogrammed default
  2938                           ;	Flash Program Memory Code Protection bit
  2939                           ;	CP = 0x1, unprogrammed default
  2940  2007                     	org	8199
  2941  2007  3FF6               	dw	16374

Data Sizes:
    Strings     23
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     28      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _setCronometro->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3553
                                             25 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                      _setCronometro
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3245
                                             24 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2488
                                              5 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     301
                                              7 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     456
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Mon Mar 07 22:29:05 2022

                       pc 0002                        l61 04A2                        l53 048A  
                      l54 048D                        l55 0493                        l56 0494  
                      l64 04DD                        l57 049A                        l73 02A6  
                      l58 049B                        l59 04A1                        l67 04FC  
                      l76 024E                        l85 04C3                        l79 03A4  
                      fsr 0004       ___wmul@multiplicand 0074                       l122 045B  
                     l108 02C8                       l226 003B                       l244 0115  
                     l261 01F0                       l265 0468                       l267 0480  
                     l537 032F                       l547 036B                       l718 04EF  
                     _RB0 0030                       _RC0 0038                       _RC2 003A  
                     _RC3 003B                       _RD2 0042                       _RD3 0043  
                     _RD4 0044                       _RD5 0045                       _RD6 0046  
                     _RD7 0047                       u610 04E6                       u611 04E5  
                     u620 04EC                       u605 037D                       u621 04EB  
                     u710 0317                       u630 0462                       u711 0316  
                     u631 0461                       u560 0486                       u800 0257  
                     u561 0485                       u801 0256                       u705 0307  
                     u570 0491                       u730 032B                       u571 0490  
                     u731 032A                       u715 0313                       u580 0498  
                     u820 0282                       u660 047C                       u581 0497  
                     u821 0281                       u725 031F                       u661 047B  
                     u645 0469                       u590 049F                       u670 02F4  
                     u591 049E                       u815 025F                       u671 02F3  
                     u655 0470                       u840 04C3                       u841 04C2  
                     u690 0306                       u835 028A                       u691 0305  
                     u685 02F8                       fsr0 0004                       indf 0000  
                    l1200 036D                      l1210 0390                      l1202 0377  
                    l1300 026D                      l1212 0393                      l1204 037A  
                    l1220 04DF                      l1310 0298                      l1302 0273  
                    l1214 0399                      l1206 0388                      l1222 04E0  
                    l1312 029E                      l1304 027C                      l1216 039C  
                    l1208 038B                      l1320 04B8                      l1240 0476  
                    l1232 045C                      l1224 04E6                      l1306 0282  
                    l1218 03A1                      l1314 04A4                      l1250 02F4  
                    l1242 047C                      l1234 045E                      l1226 04EC  
                    l1180 0482                      l1308 0293                      l1316 04A7  
                    l1260 0317                      l1252 02F7                      l1236 0462  
                    l1228 04EE                      l1182 0486                      l1190 04C5  
                    l1318 04B2                      l1262 031D                      l1254 02FE  
                    l1246 02EC                      l1238 046F                      l1184 0491  
                    l1192 04C8                      l1440 04F0                      l1264 031E  
                    l1256 0302                      l1248 02EE                      l1600 0361  
                    l1186 0498                      l1194 04CE                      l1450 0215  
                    l1442 01F1                      l1266 0325                      l1258 0306  
                    l1602 0367                      l1610 002B                      l1188 049F  
                    l1196 04D1                      l1444 01F7                      l1268 032B  
                    l1700 0191                      l1620 0040                      l1612 0032  
                    l1198 04DA                      l1446 0200                      l1294 0252  
                    l1702 0196                      l1630 008F                      l1622 0053  
                    l1614 0037                      l1710 01DA                      l1606 0020  
                    l1448 020F                      l1296 0257                      l1704 01C6  
                    l1640 00CA                      l1712 01EC                      l1632 0093  
                    l1624 0063                      l1616 003C                      l1608 0025  
                    l1298 0268                      l1706 01CD                      l1642 00CE  
                    l1626 0067                      l1730 02A7                      l1708 01D1  
                    l1660 0103                      l1644 00D2                      l1628 007C  
                    l1636 00A3                      l1724 0435                      l1740 02AF  
                    l1732 02AB                      l1590 0342                      l1670 0130  
                    l1662 0109                      l1654 00DD                      l1646 00D6  
                    l1638 00C2                      l1814 004E                      l1726 044D  
                    l1750 02BA                      l1742 02B0                      l1734 02AC  
                    l1592 0346                      l1584 0330                      l1680 014B  
                    l1672 0134                      l1664 010F                      l1648 00DB  
                    l1816 00B7                      l1728 0455                      l1760 02C3  
                    l1752 02BB                      l1744 02B1                      l1736 02AD  
                    l1594 034A                      l1586 0338                      l1690 0170  
                    l1682 0152                      l1674 013A                      l1666 0120  
                    l1658 00F9                      l1770 02E2                      l1762 02C9  
                    l1754 02BC                      l1746 02B4                      l1738 02AE  
                    l1596 0354                      l1588 033B                      l1692 0174  
                    l1684 0156                      l1676 0141                      l1668 012C  
                    l1764 02CF                      l1772 02E3                      l1756 02BD  
                    l1748 02B5                      l1598 035A                      l1694 0180  
                    l1678 0145                      l1686 0163                      l1766 02D1  
                    l1758 02BE                      l1696 0186                      l1688 0169  
                    l1768 02DF                      l1698 018D                      STR_1 041E  
                    u1110 0338                      u1111 0337                      u1200 00D2  
                    u1201 00D1                      u1130 034A                      u1210 00F8  
                    u1131 0349                      u1211 00F7                      u1140 0354  
                    u1300 0169                      u1220 0103                      u1141 0353  
                    u1125 033C                      u1301 0168                      u1221 0102  
                    u1310 0180                      u1230 0109                      u1311 017F  
                    u1231 0108                      u1215 00F4                      u1160 0367  
                    u1320 0186                      u1240 010F                      u1161 0366  
                    u1145 0350                      u1321 0185                      u1241 010E  
                    u1330 01DA                      u1250 0120                      u1170 002B  
                    u1155 035B                      u1331 01D9                      u1251 011F  
                    u1171 002A                      u1340 01EC                      u1260 0134  
                    u1180 0063                      u1341 01EB                      u1261 0133  
                    u1181 0062                      u1270 013A                      u1190 00A3  
                    u1350 02CF                      u1407 020A                      u1271 0139  
                    u1255 011C                      u1191 00A2                      u1351 02CE  
                    u1280 014B                      u1417 0219                      u1281 014A  
                    u1290 0162                      u1427 04D5                      u1291 0161  
                    u1367 02D9                      u1377 038D                      u1387 039E  
                    u1397 01FB         ?_Lcd_Write_String 0070                      _main 02A7  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 04DE     __end_of_setCronometro 045C                     ?_main 0070  
         __end_of___lwdiv 0330                     i1l119 03D7                     i1l128 040D  
         __end_of___lwmod 036C                     _TMR1H 000F                     _TMR1L 000E  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
         __end_of_dpowers 041E           __end_of_isdigit 04F0            __pbitbssCOMMON 03D8  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 01F1          __end_of_Lcd_Init 024F          __end_of_Lcd_Port 04A3  
         __initialization 000F              __end_of_main 02EC                    ??_main 0039  
                  u110_24 03D5                    u103_20 03ED                    u103_21 03EC  
                  u104_20 03FC                    u104_21 03FB                    i1l1530 03B0  
                  i1l1460 03E6                    i1l1540 03CB                    i1l1532 03B5  
                  i1l1524 03A5                    i1l1470 03FE                    i1l1462 03ED  
                  i1l1542 03D5                    i1l1534 03BD                    i1l1526 03AB  
                  u105_20 040B                    i1l1472 0404                    i1l1464 03EF  
                  i1l1536 03C4                    i1l1528 03AC                    u105_21 040A  
                  i1l1474 040B                    i1l1466 03F5                    i1l1458 03DE  
                  i1l1538 03C9                    i1l1468 03FC                    u107_20 03AB  
                  u107_21 03AA                    u108_20 03C4                    u108_21 03C3  
                  u109_20 03D2                    u109_21 03CE                 ??_Lcd_Cmd 0073  
                  _TMR1IF 0060                    ___wmul 045C                 ??___lwdiv 0076  
               ??___lwmod 007A                    _buffer 0044                 ??_isdigit 0072  
                  saved_w 007E                 ??_sprintf 002C           Lcd_Set_Cursor@a 0020  
         Lcd_Set_Cursor@b 0076           Lcd_Set_Cursor@y 0022           Lcd_Set_Cursor@z 0021  
 __end_of__initialization 0019         __end_of_Lcd_Clear 04FD            __pcstackCOMMON 0070  
          _Lcd_Set_Cursor 024F            _OPTION_REGbits 0081                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070              sprintf@width 0034                __pbssBANK0 003C  
              __pmaintext 02A7     __end_of_ContaSegundos 03DE                   ?___wmul 0072  
              _centesimos 003E                __pintentry 0004    __end_of_Lcd_Set_Cursor 02A7  
              ??_Lcd_Init 0076                ??_Lcd_Port 0072                __stringtab 040E  
          _Lcd_Write_Char 036C                   _Lcd_Cmd 04C4                _cronometro 03DE  
                 ___lwdiv 02EC                   ___lwmod 0330           ?_Lcd_Set_Cursor 0076  
                 __ptext1 0435                   __ptext2 001D                   __ptext3 04DE  
                 __ptext4 045C                   __ptext5 0330                   __ptext6 02EC  
                 __ptext7 04A3                   __ptext8 036C                   __ptext9 024F  
               _T1CONbits 0010                   _dpowers 0414                   _isdigit 04DE  
                 _inverte 03D8                   _minutos 0042                   _sprintf 001D  
                 clrloop0 04FE    __end_of_Lcd_Write_Char 03A5      end_of_initialization 0019  
               Lcd_Port@a 0072           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 007A  
       Lcd_Write_String@i 0078               ?_cronometro 0070                 _Lcd_Clear 04F0  
          __end_of___wmul 0481          _Lcd_Write_String 04A3             _setCronometro 0435  
     start_initialization 000F                ?_Lcd_Clear 0070                  ??___wmul 0076  
         Lcd_Write_Char@a 0076           Lcd_Write_Char@y 0075            ?_setCronometro 0070  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0033               sprintf@prec 0030          ___lwdiv@dividend 0074  
        ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072                  ?___lwmod 0020  
               __pstrings 040E                  ?_isdigit 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0025         interrupt_function 0004            ___wmul@product 0076  
               clear_ram0 04FD                  _PIE1bits 008C                  Lcd_Cmd@a 0075  
                _PIR1bits 000C               ??_Lcd_Clear 0076           ??_setCronometro 0038  
             __stringbase 0413         ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073  
                _Lcd_Init 01F1                  _Lcd_Port 0481  __end_of_Lcd_Write_String 04C4  
            ??_cronometro 0070             _ContaSegundos 03A5        __end_of__stringtab 0414  
             _isdigit$733 0072                sprintf@val 0031           ___lwdiv@divisor 0072  
         ___lwdiv@counter 0079        __end_of_cronometro 040E                  __ptext10 01F1  
                __ptext11 04F0                  __ptext12 04C4                  __ptext13 0481  
                __ptext14 03A5                  __ptext15 03DE                  _contador 003C  
                _segundos 0040            ?_ContaSegundos 0070                _INTCONbits 000B  
                isdigit@c 0073        Lcd_Write_Char@temp 0074                  intlevel1 0000  
               sprintf@ap 002F                 sprintf@sp 0036          ___lwmod@dividend 0022  
               stringcode 040E        Lcd_Set_Cursor@temp 0023                  sprintf@c 0037  
                sprintf@f 0025           ___lwmod@divisor 0020           ___lwmod@counter 0024  
                stringdir 040E                  stringtab 040E           ??_ContaSegundos 0070  
