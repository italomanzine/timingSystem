

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Mar 08 18:41:19 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F877A Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  010F                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186                           
   187                           	psect	strings
   188  0382                     __pstrings:
   189  0382                     stringtab:
   190  0382                     __stringtab:
   191  0382                     stringcode:	
   192                           ;	String table - string pointers are 1 byte each
   193                           
   194  0382                     stringdir:
   195  0382  3003               	movlw	high stringdir
   196  0383  008A               	movwf	10
   197  0384  0804               	movf	4,w
   198  0385  0A84               	incf	4,f
   199  0386  0782               	addwf	2,f
   200  0387                     __stringbase:
   201  0387  3400               	retlw	0
   202  0388                     __end_of__stringtab:
   203  0388                     _dpowers:
   204  0388  3401               	retlw	1
   205  0389  3400               	retlw	0
   206  038A  340A               	retlw	10
   207  038B  3400               	retlw	0
   208  038C  3464               	retlw	100
   209  038D  3400               	retlw	0
   210  038E  34E8               	retlw	232
   211  038F  3403               	retlw	3
   212  0390  3410               	retlw	16
   213  0391  3427               	retlw	39
   214  0392                     __end_of_dpowers:
   215  000C                     _PIR1bits	set	12
   216  001E                     _ADRESH	set	30
   217  001F                     _ADCON0bits	set	31
   218  000F                     _TMR1H	set	15
   219  000E                     _TMR1L	set	14
   220  0010                     _T1CONbits	set	16
   221  000B                     _INTCONbits	set	11
   222  0060                     _TMR1IF	set	96
   223  0031                     _RB1	set	49
   224  0080                     _TMR1ON	set	128
   225  0030                     _RB0	set	48
   226  003B                     _RC3	set	59
   227  003A                     _RC2	set	58
   228  0038                     _RC0	set	56
   229  0043                     _RD3	set	67
   230  0042                     _RD2	set	66
   231  0047                     _RD7	set	71
   232  0046                     _RD6	set	70
   233  0045                     _RD5	set	69
   234  0044                     _RD4	set	68
   235  009E                     _ADRESL	set	158
   236  009F                     _ADCON1bits	set	159
   237  008C                     _PIE1bits	set	140
   238  0081                     _OPTION_REGbits	set	129
   239  0088                     _TRISD	set	136
   240  0087                     _TRISC	set	135
   241  0086                     _TRISB	set	134
   242  0392                     STR_1:
   243  0392  3431               	retlw	49	;'1'
   244  0393  342D               	retlw	45	;'-'
   245  0394  3420               	retlw	32	;' '
   246  0395  3420               	retlw	32	;' '
   247  0396  3420               	retlw	32	;' '
   248  0397  3420               	retlw	32	;' '
   249  0398  3420               	retlw	32	;' '
   250  0399  3420               	retlw	32	;' '
   251  039A  3425               	retlw	37	;'%'
   252  039B  3430               	retlw	48	;'0'
   253  039C  3432               	retlw	50	;'2'
   254  039D  3464               	retlw	100	;'d'
   255  039E  343A               	retlw	58	;':'
   256  039F  3425               	retlw	37	;'%'
   257  03A0  3430               	retlw	48	;'0'
   258  03A1  3432               	retlw	50	;'2'
   259  03A2  3464               	retlw	100	;'d'
   260  03A3  343A               	retlw	58	;':'
   261  03A4  3425               	retlw	37	;'%'
   262  03A5  3430               	retlw	48	;'0'
   263  03A6  3432               	retlw	50	;'2'
   264  03A7  3464               	retlw	100	;'d'
   265  03A8  3400               	retlw	0
   266  03A9                     STR_2:
   267  03A9  3441               	retlw	65	;'A'
   268  03AA  3474               	retlw	116	;'t'
   269  03AB  346C               	retlw	108	;'l'
   270  03AC  3465               	retlw	101	;'e'
   271  03AD  3474               	retlw	116	;'t'
   272  03AE  3461               	retlw	97	;'a'
   273  03AF  3420               	retlw	32	;' '
   274  03B0  3444               	retlw	68	;'D'
   275  03B1  3465               	retlw	101	;'e'
   276  03B2  3473               	retlw	115	;'s'
   277  03B3  3463               	retlw	99	;'c'
   278  03B4  346C               	retlw	108	;'l'
   279  03B5  3461               	retlw	97	;'a'
   280  03B6  3473               	retlw	115	;'s'
   281  03B7  3473               	retlw	115	;'s'
   282  03B8  3469               	retlw	105	;'i'
   283  03B9  3466               	retlw	102	;'f'
   284  03BA  3469               	retlw	105	;'i'
   285  03BB  3463               	retlw	99	;'c'
   286  03BC  3461               	retlw	97	;'a'
   287  03BD  3464               	retlw	100	;'d'
   288  03BE  346F               	retlw	111	;'o'
   289  03BF  3400               	retlw	0
   290                           
   291                           	psect	cinit
   292  000F                     start_initialization:	
   293                           ; #config settings
   294                           
   295  000F                     __initialization:
   296                           
   297                           ; Clear objects allocated to COMMON
   298  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   299  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   300                           
   301                           ; Clear objects allocated to BANK0
   302  0011  1383               	bcf	3,7	;select IRP bank0
   303  0012  303D               	movlw	low __pbssBANK0
   304  0013  0084               	movwf	4
   305  0014  304F               	movlw	low (__pbssBANK0+18)
   306  0015  120A  118A  2577  120A  118A  	fcall	clear_ram0
   307  001A                     end_of_initialization:	
   308                           ;End of C runtime variable initialization code
   309                           
   310  001A                     __end_of__initialization:
   311  001A  0183               	clrf	3
   312  001B  120A  118A  29F2   	ljmp	_main	;jump to C main() function
   313                           
   314                           	psect	bssCOMMON
   315  007A                     __pbssCOMMON:
   316  007A                     _contador:
   317  007A                     	ds	2
   318                           
   319                           	psect	bssBANK0
   320  003D                     __pbssBANK0:
   321  003D                     _valor:
   322  003D                     	ds	2
   323  003F                     _centesimos:
   324  003F                     	ds	2
   325  0041                     _segundos:
   326  0041                     	ds	2
   327  0043                     _minutos:
   328  0043                     	ds	2
   329  0045                     _buffer:
   330  0045                     	ds	10
   331                           
   332                           	psect	clrtext
   333  0577                     clear_ram0:	
   334                           ;	Called with FSR containing the base address, and
   335                           ;	W with the last address+1
   336                           
   337  0577  0064               	clrwdt	;clear the watchdog before getting into this loop
   338  0578                     clrloop0:
   339  0578  0180               	clrf	0	;clear RAM location pointed to by FSR
   340  0579  0A84               	incf	4,f	;increment pointer
   341  057A  0604               	xorwf	4,w	;XOR with final address
   342  057B  1903               	btfsc	3,2	;have we reached the end yet?
   343  057C  3400               	retlw	0	;all done for this memory range, return
   344  057D  0604               	xorwf	4,w	;XOR again to restore value
   345  057E  2D78               	goto	clrloop0	;do the next byte
   346                           
   347                           	psect	cstackCOMMON
   348  0070                     __pcstackCOMMON:
   349  0070                     ?_isdigit:
   350  0070                     ?_setCronometro:	
   351                           ; 1 bit 
   352                           
   353  0070                     ?_setDQ:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_cronometro:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ??_cronometro:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_Lcd_Port:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_Lcd_Cmd:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_Lcd_Init:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_Lcd_Write_Char:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Lcd_Write_String:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_main:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_ContaSegundos:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ??_ContaSegundos:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_Lcd_Clear:	
   387                           ; 1 bytes @ 0x0
   388                           
   389                           
   390                           ; 2 bytes @ 0x0
   391  0070                     	ds	2
   392  0072                     ??_isdigit:
   393  0072                     ??_Lcd_Port:	
   394                           ; 1 bytes @ 0x2
   395                           
   396  0072                     ?___wmul:	
   397                           ; 1 bytes @ 0x2
   398                           
   399  0072                     ?___lwdiv:	
   400                           ; 2 bytes @ 0x2
   401                           
   402  0072                     Lcd_Port@a:	
   403                           ; 2 bytes @ 0x2
   404                           
   405  0072                     _isdigit$833:	
   406                           ; 1 bytes @ 0x2
   407                           
   408  0072                     ___wmul@multiplier:	
   409                           ; 1 bytes @ 0x2
   410                           
   411  0072                     ___lwdiv@divisor:	
   412                           ; 2 bytes @ 0x2
   413                           
   414                           
   415                           ; 2 bytes @ 0x2
   416  0072                     	ds	1
   417  0073                     ??_Lcd_Cmd:
   418  0073                     ??_Lcd_Write_Char:	
   419                           ; 1 bytes @ 0x3
   420                           
   421  0073                     isdigit@c:	
   422                           ; 1 bytes @ 0x3
   423                           
   424                           
   425                           ; 1 bytes @ 0x3
   426  0073                     	ds	1
   427  0074                     Lcd_Write_Char@temp:
   428  0074                     ___wmul@multiplicand:	
   429                           ; 1 bytes @ 0x4
   430                           
   431  0074                     ___lwdiv@dividend:	
   432                           ; 2 bytes @ 0x4
   433                           
   434                           
   435                           ; 2 bytes @ 0x4
   436  0074                     	ds	1
   437  0075                     Lcd_Cmd@a:
   438  0075                     Lcd_Write_Char@y:	
   439                           ; 1 bytes @ 0x5
   440                           
   441                           
   442                           ; 1 bytes @ 0x5
   443  0075                     	ds	1
   444  0076                     ??_Lcd_Clear:
   445  0076                     ?_Lcd_Set_Cursor:	
   446                           ; 1 bytes @ 0x6
   447                           
   448  0076                     ??_Lcd_Init:	
   449                           ; 1 bytes @ 0x6
   450                           
   451  0076                     ??___wmul:	
   452                           ; 1 bytes @ 0x6
   453                           
   454  0076                     ??___lwdiv:	
   455                           ; 1 bytes @ 0x6
   456                           
   457  0076                     Lcd_Set_Cursor@b:	
   458                           ; 1 bytes @ 0x6
   459                           
   460  0076                     Lcd_Write_Char@a:	
   461                           ; 1 bytes @ 0x6
   462                           
   463  0076                     ___wmul@product:	
   464                           ; 1 bytes @ 0x6
   465                           
   466                           
   467                           ; 2 bytes @ 0x6
   468  0076                     	ds	1
   469  0077                     ??_Lcd_Set_Cursor:
   470  0077                     ??_Lcd_Write_String:	
   471                           ; 1 bytes @ 0x7
   472                           
   473  0077                     ___lwdiv@quotient:	
   474                           ; 1 bytes @ 0x7
   475                           
   476                           
   477                           ; 2 bytes @ 0x7
   478  0077                     	ds	2
   479  0079                     ___lwdiv@counter:
   480                           
   481                           ; 1 bytes @ 0x9
   482  0079                     	ds	1
   483                           
   484                           	psect	cstackBANK0
   485  0020                     __pcstackBANK0:
   486  0020                     ?___lwmod:
   487  0020                     Lcd_Set_Cursor@a:	
   488                           ; 2 bytes @ 0x0
   489                           
   490  0020                     Lcd_Write_String@i:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0020                     ___lwmod@divisor:	
   494                           ; 2 bytes @ 0x0
   495                           
   496                           
   497                           ; 2 bytes @ 0x0
   498  0020                     	ds	1
   499  0021                     Lcd_Set_Cursor@z:
   500                           
   501                           ; 1 bytes @ 0x1
   502  0021                     	ds	1
   503  0022                     Lcd_Set_Cursor@y:
   504  0022                     Lcd_Write_String@a:	
   505                           ; 1 bytes @ 0x2
   506                           
   507  0022                     ___lwmod@dividend:	
   508                           ; 1 bytes @ 0x2
   509                           
   510                           
   511                           ; 2 bytes @ 0x2
   512  0022                     	ds	1
   513  0023                     Lcd_Set_Cursor@temp:
   514                           
   515                           ; 1 bytes @ 0x3
   516  0023                     	ds	1
   517  0024                     ??___lwmod:
   518                           
   519                           ; 1 bytes @ 0x4
   520  0024                     	ds	1
   521  0025                     ___lwmod@counter:
   522                           
   523                           ; 1 bytes @ 0x5
   524  0025                     	ds	1
   525  0026                     ?_sprintf:
   526  0026                     sprintf@f:	
   527                           ; 2 bytes @ 0x6
   528                           
   529                           
   530                           ; 1 bytes @ 0x6
   531  0026                     	ds	7
   532  002D                     ??_sprintf:
   533                           
   534                           ; 1 bytes @ 0xD
   535  002D                     	ds	3
   536  0030                     sprintf@ap:
   537                           
   538                           ; 1 bytes @ 0x10
   539  0030                     	ds	1
   540  0031                     sprintf@prec:
   541                           
   542                           ; 1 bytes @ 0x11
   543  0031                     	ds	1
   544  0032                     sprintf@val:
   545                           
   546                           ; 2 bytes @ 0x12
   547  0032                     	ds	2
   548  0034                     sprintf@flag:
   549                           
   550                           ; 1 bytes @ 0x14
   551  0034                     	ds	1
   552  0035                     sprintf@width:
   553                           
   554                           ; 2 bytes @ 0x15
   555  0035                     	ds	2
   556  0037                     sprintf@sp:
   557                           
   558                           ; 1 bytes @ 0x17
   559  0037                     	ds	1
   560  0038                     sprintf@c:
   561                           
   562                           ; 1 bytes @ 0x18
   563  0038                     	ds	1
   564  0039                     ??_setCronometro:
   565  0039                     ??_setDQ:	
   566                           ; 1 bytes @ 0x19
   567                           
   568                           
   569                           ; 1 bytes @ 0x19
   570  0039                     	ds	1
   571  003A                     ??_main:
   572                           
   573                           ; 1 bytes @ 0x1A
   574  003A                     	ds	3
   575                           
   576                           	psect	maintext
   577  01F2                     __pmaintext:	
   578 ;;
   579 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   580 ;;
   581 ;; *************** function _main *****************
   582 ;; Defined at:
   583 ;;		line 50 in file "main.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : B00/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   597 ;;      Params:         0       0       0       0       0
   598 ;;      Locals:         0       0       0       0       0
   599 ;;      Temps:          0       3       0       0       0
   600 ;;      Totals:         0       3       0       0       0
   601 ;;Total ram usage:        3 bytes
   602 ;; Hardware stack levels required when called: 6
   603 ;; This function calls:
   604 ;;		_Lcd_Clear
   605 ;;		_Lcd_Init
   606 ;;		_setCronometro
   607 ;;		_setDQ
   608 ;; This function is called by:
   609 ;;		Startup code after reset
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613  01F2                     _main:	
   614                           ;psect for function _main
   615                           
   616  01F2                     l1941:	
   617                           ;incstack = 0
   618                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   619                           
   620                           
   621                           ;main.c: 53:     TRISB = 0b11111111;
   622  01F2  30FF               	movlw	255
   623  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   624  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   625  01F5  0086               	movwf	6	;volatile
   626  01F6                     l1943:
   627                           
   628                           ;main.c: 54:     TRISC = 0b00000000;
   629  01F6  0187               	clrf	7	;volatile
   630  01F7                     l1945:
   631                           
   632                           ;main.c: 55:     TRISD = 0b00000000;
   633  01F7  0188               	clrf	8	;volatile
   634  01F8                     l1947:
   635                           
   636                           ;main.c: 58:     OPTION_REGbits.nRBPU = 0;
   637  01F8  1381               	bcf	1,7	;volatile
   638  01F9                     l1949:
   639                           
   640                           ;main.c: 61:     INTCONbits.GIE = 1;
   641  01F9  178B               	bsf	11,7	;volatile
   642  01FA                     l1951:
   643                           
   644                           ;main.c: 62:     INTCONbits.PEIE = 1;
   645  01FA  170B               	bsf	11,6	;volatile
   646  01FB                     l1953:
   647                           
   648                           ;main.c: 63:     PIE1bits.TMR1IE = 1;
   649  01FB  140C               	bsf	12,0	;volatile
   650  01FC                     l1955:
   651                           
   652                           ;main.c: 66:     T1CONbits.TMR1CS = 0;
   653  01FC  1283               	bcf	3,5	;RP0=0, select bank0
   654  01FD  1303               	bcf	3,6	;RP1=0, select bank0
   655  01FE  1090               	bcf	16,1	;volatile
   656  01FF                     l1957:
   657                           
   658                           ;main.c: 67:     T1CONbits.T1CKPS0 = 1;
   659  01FF  1610               	bsf	16,4	;volatile
   660  0200                     l1959:
   661                           
   662                           ;main.c: 68:     T1CONbits.T1CKPS1 = 1;
   663  0200  1690               	bsf	16,5	;volatile
   664                           
   665                           ;main.c: 71:     TMR1L = 0x95;
   666  0201  3095               	movlw	149
   667  0202  008E               	movwf	14	;volatile
   668                           
   669                           ;main.c: 72:     TMR1H = 0xE7;
   670  0203  30E7               	movlw	231
   671  0204  008F               	movwf	15	;volatile
   672  0205                     l1961:
   673                           
   674                           ;main.c: 74:     T1CONbits.TMR1ON = 0;
   675  0205  1010               	bcf	16,0	;volatile
   676  0206                     l1963:
   677                           
   678                           ;main.c: 77:     ADCON1bits.PCFG0 = 0;
   679  0206  1683               	bsf	3,5	;RP0=1, select bank1
   680  0207  1303               	bcf	3,6	;RP1=0, select bank1
   681  0208  101F               	bcf	31,0	;volatile
   682  0209                     l1965:
   683                           
   684                           ;main.c: 78:     ADCON1bits.PCFG1 = 1;
   685  0209  149F               	bsf	31,1	;volatile
   686  020A                     l1967:
   687                           
   688                           ;main.c: 79:     ADCON1bits.PCFG2 = 1;
   689  020A  151F               	bsf	31,2	;volatile
   690  020B                     l1969:
   691                           
   692                           ;main.c: 80:     ADCON1bits.PCFG3 = 1;
   693  020B  159F               	bsf	31,3	;volatile
   694  020C                     l1971:
   695                           
   696                           ;main.c: 83:     ADCON0bits.ADCS0 = 0;
   697  020C  1283               	bcf	3,5	;RP0=0, select bank0
   698  020D  1303               	bcf	3,6	;RP1=0, select bank0
   699  020E  131F               	bcf	31,6	;volatile
   700  020F                     l1973:
   701                           
   702                           ;main.c: 84:     ADCON0bits.ADCS1 = 0;
   703  020F  139F               	bcf	31,7	;volatile
   704  0210                     l1975:
   705                           
   706                           ;main.c: 86:     ADCON1bits.ADFM = 0;
   707  0210  1683               	bsf	3,5	;RP0=1, select bank1
   708  0211  1303               	bcf	3,6	;RP1=0, select bank1
   709  0212  139F               	bcf	31,7	;volatile
   710  0213                     l1977:
   711                           
   712                           ;main.c: 88:     ADRESL = 0x00;
   713  0213  019E               	clrf	30	;volatile
   714  0214                     l1979:
   715                           
   716                           ;main.c: 89:     ADRESH = 0x00;
   717  0214  1283               	bcf	3,5	;RP0=0, select bank0
   718  0215  1303               	bcf	3,6	;RP1=0, select bank0
   719  0216  019E               	clrf	30	;volatile
   720  0217                     l1981:
   721                           
   722                           ;main.c: 91:     ADCON0bits.ADON = 1;
   723  0217  141F               	bsf	31,0	;volatile
   724  0218                     l1983:
   725                           
   726                           ;main.c: 94:     RC0 = 0;
   727  0218  1007               	bcf	7,0	;volatile
   728  0219                     l1985:
   729                           
   730                           ;main.c: 95:     RC2 = 0;
   731  0219  1107               	bcf	7,2	;volatile
   732  021A                     l1987:
   733                           
   734                           ;main.c: 96:     RC3 = 0;
   735  021A  1187               	bcf	7,3	;volatile
   736  021B                     l1989:
   737                           
   738                           ;main.c: 99:     Lcd_Init();
   739  021B  120A  118A  2288  120A  118A  	fcall	_Lcd_Init
   740  0220                     l1991:
   741                           
   742                           ;main.c: 100:     Lcd_Clear();
   743  0220  120A  118A  256A  120A  118A  	fcall	_Lcd_Clear
   744  0225                     l122:	
   745                           ;main.c: 103:     while(1)
   746                           
   747  0225  0064               	clrwdt	;# 
   748  0226                     l1993:
   749                           
   750                           ;main.c: 107:         if(RB0 == 0)
   751  0226  1283               	bcf	3,5	;RP0=0, select bank0
   752  0227  1303               	bcf	3,6	;RP1=0, select bank0
   753  0228  1806               	btfsc	6,0	;volatile
   754  0229  2A2B               	goto	u1491
   755  022A  2A2C               	goto	u1490
   756  022B                     u1491:
   757  022B  2A41               	goto	l2003
   758  022C                     u1490:
   759  022C                     l1995:
   760                           
   761                           ;main.c: 108:         {;main.c: 109:             TMR1ON = 1;
   762  022C  1410               	bsf	16,0	;volatile
   763                           
   764                           ;main.c: 111:             RC0 = 1;
   765  022D  1407               	bsf	7,0	;volatile
   766                           
   767                           ;main.c: 112:             RC2 = 1;
   768  022E  1507               	bsf	7,2	;volatile
   769  022F                     l1997:
   770                           
   771                           ;main.c: 113:             _delay((unsigned long)((400)*(20000000/4000.0)));
   772  022F  300B               	movlw	11
   773  0230  1283               	bcf	3,5	;RP0=0, select bank0
   774  0231  1303               	bcf	3,6	;RP1=0, select bank0
   775  0232  00BC               	movwf	??_main+2
   776  0233  3026               	movlw	38
   777  0234  00BB               	movwf	??_main+1
   778  0235  305D               	movlw	93
   779  0236  00BA               	movwf	??_main
   780  0237                     u1547:
   781  0237  0BBA               	decfsz	??_main,f
   782  0238  2A37               	goto	u1547
   783  0239  0BBB               	decfsz	??_main+1,f
   784  023A  2A37               	goto	u1547
   785  023B  0BBC               	decfsz	??_main+2,f
   786  023C  2A37               	goto	u1547
   787  023D                     l1999:
   788                           
   789                           ;main.c: 114:             RC0 = 0;
   790  023D  1283               	bcf	3,5	;RP0=0, select bank0
   791  023E  1303               	bcf	3,6	;RP1=0, select bank0
   792  023F  1007               	bcf	7,0	;volatile
   793  0240                     l2001:
   794                           
   795                           ;main.c: 115:             RC2 = 0;
   796  0240  1107               	bcf	7,2	;volatile
   797  0241                     l2003:
   798                           
   799                           ;main.c: 118:         if(RB1 == 0)
   800  0241  1886               	btfsc	6,1	;volatile
   801  0242  2A44               	goto	u1501
   802  0243  2A45               	goto	u1500
   803  0244                     u1501:
   804  0244  2A46               	goto	l2007
   805  0245                     u1500:
   806  0245                     l2005:
   807                           
   808                           ;main.c: 119:         {;main.c: 120:             TMR1ON = 0;
   809  0245  1010               	bcf	16,0	;volatile
   810  0246                     l2007:
   811                           
   812                           ;main.c: 123:         setCronometro();
   813  0246  120A  118A  2490  120A  118A  	fcall	_setCronometro
   814  024B                     l2009:
   815                           
   816                           ;main.c: 125:         ADCON0bits.CHS0 = 0;
   817  024B  1283               	bcf	3,5	;RP0=0, select bank0
   818  024C  1303               	bcf	3,6	;RP1=0, select bank0
   819  024D  119F               	bcf	31,3	;volatile
   820  024E                     l2011:
   821                           
   822                           ;main.c: 126:         ADCON0bits.CHS1 = 0;
   823  024E  121F               	bcf	31,4	;volatile
   824  024F                     l2013:
   825                           
   826                           ;main.c: 127:         ADCON0bits.CHS2 = 0;
   827  024F  129F               	bcf	31,5	;volatile
   828  0250                     l2015:
   829                           
   830                           ;main.c: 129:         ADCON0bits.GO = 1;
   831  0250  151F               	bsf	31,2	;volatile
   832  0251                     l2017:
   833                           
   834                           ;main.c: 130:         _delay((unsigned long)((10)*(20000000/4000000.0)));
   835  0251  300F               	movlw	15
   836  0252  1283               	bcf	3,5	;RP0=0, select bank0
   837  0253  1303               	bcf	3,6	;RP1=0, select bank0
   838  0254  00BA               	movwf	??_main
   839  0255                     u1557:
   840  0255  0BBA               	decfsz	??_main,f
   841  0256  2A55               	goto	u1557
   842  0257  2A58               	nop2
   843  0258                     l2019:
   844                           
   845                           ;main.c: 131:         valor = ADRESH;
   846  0258  1283               	bcf	3,5	;RP0=0, select bank0
   847  0259  1303               	bcf	3,6	;RP1=0, select bank0
   848  025A  081E               	movf	30,w	;volatile
   849  025B  00BA               	movwf	??_main
   850  025C  01BB               	clrf	??_main+1
   851  025D  083A               	movf	??_main,w
   852  025E  00BD               	movwf	_valor
   853  025F  083B               	movf	??_main+1,w
   854  0260  00BE               	movwf	_valor+1
   855  0261                     l2021:
   856                           
   857                           ;main.c: 134:         if(valor != 0)
   858  0261  083D               	movf	_valor,w
   859  0262  043E               	iorwf	_valor+1,w
   860  0263  1903               	btfsc	3,2
   861  0264  2A66               	goto	u1511
   862  0265  2A67               	goto	u1510
   863  0266                     u1511:
   864  0266  2A69               	goto	l2025
   865  0267                     u1510:
   866  0267                     l2023:
   867                           
   868                           ;main.c: 135:         {;main.c: 136:             RC3 = 0;
   869  0267  1187               	bcf	7,3	;volatile
   870                           
   871                           ;main.c: 137:         }
   872  0268  2A25               	goto	l122
   873  0269                     l2025:
   874  0269  083D               	movf	_valor,w
   875  026A  043E               	iorwf	_valor+1,w
   876  026B  1D03               	btfss	3,2
   877  026C  2A6E               	goto	u1521
   878  026D  2A6F               	goto	u1520
   879  026E                     u1521:
   880  026E  2A25               	goto	l122
   881  026F                     u1520:
   882  026F                     l2027:
   883  026F  0842               	movf	_segundos+1,w
   884  0270  3A80               	xorlw	128
   885  0271  00FF               	movwf	btemp+1
   886  0272  3080               	movlw	128
   887  0273  027F               	subwf	btemp+1,w
   888  0274  1D03               	skipz
   889  0275  2A78               	goto	u1535
   890  0276  3003               	movlw	3
   891  0277  0241               	subwf	_segundos,w
   892  0278                     u1535:
   893  0278  1803               	skipnc
   894  0279  2A7B               	goto	u1531
   895  027A  2A7C               	goto	u1530
   896  027B                     u1531:
   897  027B  2A25               	goto	l122
   898  027C                     u1530:
   899  027C                     l2029:
   900                           
   901                           ;main.c: 139:         {;main.c: 140:             RC3 = 1;
   902  027C  1283               	bcf	3,5	;RP0=0, select bank0
   903  027D  1303               	bcf	3,6	;RP1=0, select bank0
   904  027E  1587               	bsf	7,3	;volatile
   905  027F                     l2031:
   906                           
   907                           ;main.c: 141:             setDQ();
   908  027F  120A  118A  2523  120A  118A  	fcall	_setDQ
   909  0284  2A25               	goto	l122
   910  0285  120A  118A  280C   	ljmp	start
   911  0288                     __end_of_main:
   912                           
   913                           	psect	text1
   914  0523                     __ptext1:	
   915 ;; *************** function _setDQ *****************
   916 ;; Defined at:
   917 ;;		line 177 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0
   933 ;;      Temps:          0       1       0       0       0
   934 ;;      Totals:         0       1       0       0       0
   935 ;;Total ram usage:        1 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; Hardware stack levels required when called: 5
   938 ;; This function calls:
   939 ;;		_Lcd_Set_Cursor
   940 ;;		_Lcd_Write_String
   941 ;;		_sprintf
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947  0523                     _setDQ:	
   948                           ;psect for function _setDQ
   949                           
   950  0523                     l1931:	
   951                           ;incstack = 0
   952                           ; Regs used in _setDQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   953                           
   954                           
   955                           ;main.c: 179:     sprintf(buffer,"Atleta Desclassificado");
   956  0523  3022               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   957  0524  1283               	bcf	3,5	;RP0=0, select bank0
   958  0525  1303               	bcf	3,6	;RP1=0, select bank0
   959  0526  00B9               	movwf	??_setDQ
   960  0527  0839               	movf	??_setDQ,w
   961  0528  00A6               	movwf	sprintf@f
   962  0529  3045               	movlw	(low (_buffer| 0))& (0+255)
   963  052A  120A  118A  201E  120A  118A  	fcall	_sprintf
   964  052F                     l1933:
   965                           
   966                           ;main.c: 180:     Lcd_Set_Cursor(2,1);
   967  052F  01F6               	clrf	Lcd_Set_Cursor@b
   968  0530  0AF6               	incf	Lcd_Set_Cursor@b,f
   969  0531  3002               	movlw	2
   970  0532  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
   971  0537                     l1935:
   972                           
   973                           ;main.c: 181:     Lcd_Write_String(buffer);
   974  0537  3045               	movlw	(low (_buffer| 0))& (0+255)
   975  0538  120A  118A  24DC  120A  118A  	fcall	_Lcd_Write_String
   976  053D                     l143:
   977  053D  0008               	return
   978  053E                     __end_of_setDQ:
   979                           
   980                           	psect	text2
   981  0490                     __ptext2:	
   982 ;; *************** function _setCronometro *****************
   983 ;; Defined at:
   984 ;;		line 170 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;		None
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   998 ;;      Params:         0       0       0       0       0
   999 ;;      Locals:         0       0       0       0       0
  1000 ;;      Temps:          0       1       0       0       0
  1001 ;;      Totals:         0       1       0       0       0
  1002 ;;Total ram usage:        1 bytes
  1003 ;; Hardware stack levels used: 1
  1004 ;; Hardware stack levels required when called: 5
  1005 ;; This function calls:
  1006 ;;		_Lcd_Set_Cursor
  1007 ;;		_Lcd_Write_String
  1008 ;;		_sprintf
  1009 ;; This function is called by:
  1010 ;;		_main
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014  0490                     _setCronometro:	
  1015                           ;psect for function _setCronometro
  1016                           
  1017  0490                     l1925:	
  1018                           ;incstack = 0
  1019                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1020                           
  1021                           
  1022                           ;main.c: 172:     sprintf(buffer,"1-      %02d:%02d:%02d", minutos, segundos, centesimos
      +                          );
  1023  0490  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1024  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0493  00B9               	movwf	??_setCronometro
  1027  0494  0839               	movf	??_setCronometro,w
  1028  0495  00A6               	movwf	sprintf@f
  1029  0496  0844               	movf	_minutos+1,w
  1030  0497  00A8               	movwf	?_sprintf+2
  1031  0498  0843               	movf	_minutos,w
  1032  0499  00A7               	movwf	?_sprintf+1
  1033  049A  0842               	movf	_segundos+1,w
  1034  049B  00AA               	movwf	?_sprintf+4
  1035  049C  0841               	movf	_segundos,w
  1036  049D  00A9               	movwf	?_sprintf+3
  1037  049E  0840               	movf	_centesimos+1,w
  1038  049F  00AC               	movwf	?_sprintf+6
  1039  04A0  083F               	movf	_centesimos,w
  1040  04A1  00AB               	movwf	?_sprintf+5
  1041  04A2  3045               	movlw	(low (_buffer| 0))& (0+255)
  1042  04A3  120A  118A  201E  120A  118A  	fcall	_sprintf
  1043  04A8                     l1927:
  1044                           
  1045                           ;main.c: 173:     Lcd_Set_Cursor(1,1);
  1046  04A8  01F6               	clrf	Lcd_Set_Cursor@b
  1047  04A9  0AF6               	incf	Lcd_Set_Cursor@b,f
  1048  04AA  3001               	movlw	1
  1049  04AB  120A  118A  22E6  120A  118A  	fcall	_Lcd_Set_Cursor
  1050  04B0                     l1929:
  1051                           
  1052                           ;main.c: 174:     Lcd_Write_String(buffer);
  1053  04B0  3045               	movlw	(low (_buffer| 0))& (0+255)
  1054  04B1  120A  118A  24DC  120A  118A  	fcall	_Lcd_Write_String
  1055  04B6                     l140:
  1056  04B6  0008               	return
  1057  04B7                     __end_of_setCronometro:
  1058                           
  1059                           	psect	text3
  1060  001E                     __ptext3:	
  1061 ;; *************** function _sprintf *****************
  1062 ;; Defined at:
  1063 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  sp              1    wreg     PTR unsigned char 
  1066 ;;		 -> buffer(10), 
  1067 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  1068 ;;		 -> STR_2(23), STR_1(23), 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1071 ;;		 -> buffer(10), 
  1072 ;;  tmpval          4    0        struct .
  1073 ;;  width           2   21[BANK0 ] int 
  1074 ;;  val             2   18[BANK0 ] unsigned int 
  1075 ;;  cp              2    0        PTR const unsigned char 
  1076 ;;  len             2    0        unsigned int 
  1077 ;;  c               1   24[BANK0 ] unsigned char 
  1078 ;;  flag            1   20[BANK0 ] unsigned char 
  1079 ;;  prec            1   17[BANK0 ] char 
  1080 ;;  ap              1   16[BANK0 ] PTR void [1]
  1081 ;;		 -> ?_sprintf(2), 
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  2    6[BANK0 ] int 
  1084 ;; Registers used:
  1085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1091 ;;      Params:         0       7       0       0       0
  1092 ;;      Locals:         0       9       0       0       0
  1093 ;;      Temps:          0       3       0       0       0
  1094 ;;      Totals:         0      19       0       0       0
  1095 ;;Total ram usage:       19 bytes
  1096 ;; Hardware stack levels used: 1
  1097 ;; Hardware stack levels required when called: 3
  1098 ;; This function calls:
  1099 ;;		___lwdiv
  1100 ;;		___lwmod
  1101 ;;		___wmul
  1102 ;;		_isdigit
  1103 ;; This function is called by:
  1104 ;;		_setCronometro
  1105 ;;		_setDQ
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109  001E                     _sprintf:	
  1110                           ;psect for function _sprintf
  1111                           
  1112                           
  1113                           ;incstack = 0
  1114                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1115                           ;sprintf@sp stored from wreg
  1116  001E  1283               	bcf	3,5	;RP0=0, select bank0
  1117  001F  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0020  00B7               	movwf	sprintf@sp
  1119  0021                     l1795:
  1120                           
  1121                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1122  0021  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1123  0022  00AD               	movwf	??_sprintf
  1124  0023  082D               	movf	??_sprintf,w
  1125  0024  00B0               	movwf	sprintf@ap
  1126                           
  1127                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1128  0025  29DB               	goto	l1899
  1129  0026                     l1797:
  1130                           
  1131                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1132  0026  3025               	movlw	37
  1133  0027  0638               	xorwf	sprintf@c,w
  1134  0028  1903               	btfsc	3,2
  1135  0029  282B               	goto	u1311
  1136  002A  282C               	goto	u1310
  1137  002B                     u1311:
  1138  002B  2838               	goto	l1803
  1139  002C                     u1310:
  1140  002C                     l1799:
  1141                           
  1142                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1143  002C  0838               	movf	sprintf@c,w
  1144  002D  00AD               	movwf	??_sprintf
  1145  002E  0837               	movf	sprintf@sp,w
  1146  002F  0084               	movwf	4
  1147  0030  082D               	movf	??_sprintf,w
  1148  0031  1383               	bcf	3,7	;select IRP bank0
  1149  0032  0080               	movwf	0
  1150  0033                     l1801:
  1151  0033  3001               	movlw	1
  1152  0034  00AD               	movwf	??_sprintf
  1153  0035  082D               	movf	??_sprintf,w
  1154  0036  07B7               	addwf	sprintf@sp,f
  1155                           
  1156                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  1157  0037  29DB               	goto	l1899
  1158  0038                     l1803:
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1161  0038  01B5               	clrf	sprintf@width
  1162  0039  01B6               	clrf	sprintf@width+1
  1163                           
  1164                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1165  003A  01B4               	clrf	sprintf@flag
  1166  003B  2841               	goto	l1809
  1167  003C                     l247:	
  1168                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1169                           
  1170                           
  1171                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1172  003C  1534               	bsf	sprintf@flag,2
  1173  003D                     l1805:
  1174                           
  1175                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  1176  003D  3001               	movlw	1
  1177  003E  00AD               	movwf	??_sprintf
  1178  003F  082D               	movf	??_sprintf,w
  1179  0040  07A6               	addwf	sprintf@f,f
  1180  0041                     l1809:	
  1181                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1182                           
  1183  0041  0826               	movf	sprintf@f,w
  1184  0042  0084               	movwf	4
  1185  0043  120A  118A  2382  120A  118A  	fcall	stringdir
  1186  0048  00AD               	movwf	??_sprintf
  1187  0049  01AE               	clrf	??_sprintf+1
  1188                           
  1189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1190                           ; Switch size 1, requested type "simple"
  1191                           ; Number of cases is 1, Range of values is 0 to 0
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte            4     3 (average)
  1195                           ; direct_byte           11     8 (fixed)
  1196                           ; jumptable            260     6 (fixed)
  1197                           ;	Chosen strategy is simple_byte
  1198  004A  082E               	movf	??_sprintf+1,w
  1199  004B  3A00               	xorlw	0	; case 0
  1200  004C  1903               	skipnz
  1201  004D  284F               	goto	l2073
  1202  004E  2854               	goto	l1811
  1203  004F                     l2073:
  1204                           
  1205                           ; Switch size 1, requested type "simple"
  1206                           ; Number of cases is 1, Range of values is 48 to 48
  1207                           ; switch strategies available:
  1208                           ; Name         Instructions Cycles
  1209                           ; simple_byte            4     3 (average)
  1210                           ; direct_byte           14    11 (fixed)
  1211                           ; jumptable            263     9 (fixed)
  1212                           ;	Chosen strategy is simple_byte
  1213  004F  082D               	movf	??_sprintf,w
  1214  0050  3A30               	xorlw	48	; case 48
  1215  0051  1903               	skipnz
  1216  0052  283C               	goto	l247
  1217  0053  2854               	goto	l1811
  1218  0054                     l1811:
  1219                           
  1220                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1221  0054  0826               	movf	sprintf@f,w
  1222  0055  0084               	movwf	4
  1223  0056  120A  118A  2382  120A  118A  	fcall	stringdir
  1224  005B  120A  118A  2558  120A  118A  	fcall	_isdigit
  1225  0060  1C03               	btfss	3,0
  1226  0061  2863               	goto	u1321
  1227  0062  2864               	goto	u1320
  1228  0063                     u1321:
  1229  0063  28A4               	goto	l1825
  1230  0064                     u1320:
  1231  0064                     l1813:
  1232                           
  1233                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1234  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0066  01B5               	clrf	sprintf@width
  1237  0067  01B6               	clrf	sprintf@width+1
  1238  0068                     l1815:
  1239                           
  1240                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1241  0068  300A               	movlw	10
  1242  0069  00F2               	movwf	___wmul@multiplier
  1243  006A  3000               	movlw	0
  1244  006B  00F3               	movwf	___wmul@multiplier+1
  1245  006C  1283               	bcf	3,5	;RP0=0, select bank0
  1246  006D  1303               	bcf	3,6	;RP1=0, select bank0
  1247  006E  0836               	movf	sprintf@width+1,w
  1248  006F  00F5               	movwf	___wmul@multiplicand+1
  1249  0070  0835               	movf	sprintf@width,w
  1250  0071  00F4               	movwf	___wmul@multiplicand
  1251  0072  120A  118A  24B7  120A  118A  	fcall	___wmul
  1252  0077  0873               	movf	?___wmul+1,w
  1253  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1254  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1255  007A  00B6               	movwf	sprintf@width+1
  1256  007B  0872               	movf	?___wmul,w
  1257  007C  00B5               	movwf	sprintf@width
  1258  007D                     l1817:
  1259                           
  1260                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1261  007D  0826               	movf	sprintf@f,w
  1262  007E  0084               	movwf	4
  1263  007F  120A  118A  2382  120A  118A  	fcall	stringdir
  1264  0084  3ED0               	addlw	208
  1265  0085  00AD               	movwf	??_sprintf
  1266  0086  30FF               	movlw	255
  1267  0087  1803               	skipnc
  1268  0088  3000               	movlw	0
  1269  0089  00AE               	movwf	??_sprintf+1
  1270  008A  082D               	movf	??_sprintf,w
  1271  008B  07B5               	addwf	sprintf@width,f
  1272  008C  1803               	skipnc
  1273  008D  0AB6               	incf	sprintf@width+1,f
  1274  008E  082E               	movf	??_sprintf+1,w
  1275  008F  07B6               	addwf	sprintf@width+1,f
  1276  0090                     l1819:
  1277  0090  3001               	movlw	1
  1278  0091  00AD               	movwf	??_sprintf
  1279  0092  082D               	movf	??_sprintf,w
  1280  0093  07A6               	addwf	sprintf@f,f
  1281  0094                     l1821:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1284  0094  0826               	movf	sprintf@f,w
  1285  0095  0084               	movwf	4
  1286  0096  120A  118A  2382  120A  118A  	fcall	stringdir
  1287  009B  120A  118A  2558  120A  118A  	fcall	_isdigit
  1288  00A0  1803               	btfsc	3,0
  1289  00A1  28A3               	goto	u1331
  1290  00A2  28A4               	goto	u1330
  1291  00A3                     u1331:
  1292  00A3  2868               	goto	l1815
  1293  00A4                     u1330:
  1294  00A4                     l1825:
  1295  00A4  3001               	movlw	1
  1296  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1297  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1298  00A7  07A6               	addwf	sprintf@f,f
  1299  00A8  30FF               	movlw	-1
  1300  00A9  0726               	addwf	sprintf@f,w
  1301  00AA  0084               	movwf	4
  1302  00AB  120A  118A  2382  120A  118A  	fcall	stringdir
  1303  00B0  00B8               	movwf	sprintf@c
  1304  00B1  00AD               	movwf	??_sprintf
  1305  00B2  01AE               	clrf	??_sprintf+1
  1306                           
  1307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1308                           ; Switch size 1, requested type "simple"
  1309                           ; Number of cases is 1, Range of values is 0 to 0
  1310                           ; switch strategies available:
  1311                           ; Name         Instructions Cycles
  1312                           ; simple_byte            4     3 (average)
  1313                           ; direct_byte           11     8 (fixed)
  1314                           ; jumptable            260     6 (fixed)
  1315                           ;	Chosen strategy is simple_byte
  1316  00B3  082E               	movf	??_sprintf+1,w
  1317  00B4  3A00               	xorlw	0	; case 0
  1318  00B5  1903               	skipnz
  1319  00B6  28B8               	goto	l2075
  1320  00B7  29DB               	goto	l1899
  1321  00B8                     l2075:
  1322                           
  1323                           ; Switch size 1, requested type "simple"
  1324                           ; Number of cases is 3, Range of values is 0 to 105
  1325                           ; switch strategies available:
  1326                           ; Name         Instructions Cycles
  1327                           ; simple_byte           10     6 (average)
  1328                           ; jumptable            260     6 (fixed)
  1329                           ;	Chosen strategy is simple_byte
  1330  00B8  082D               	movf	??_sprintf,w
  1331  00B9  3A00               	xorlw	0	; case 0
  1332  00BA  1903               	skipnz
  1333  00BB  29ED               	goto	l1901
  1334  00BC  3A64               	xorlw	100	; case 100
  1335  00BD  1903               	skipnz
  1336  00BE  28C3               	goto	l1827
  1337  00BF  3A0D               	xorlw	13	; case 105
  1338  00C0  1903               	skipnz
  1339  00C1  28C3               	goto	l1827
  1340  00C2  29DB               	goto	l1899
  1341  00C3                     l1827:
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1344  00C3  0830               	movf	sprintf@ap,w
  1345  00C4  0084               	movwf	4
  1346  00C5  1383               	bcf	3,7	;select IRP bank0
  1347  00C6  0800               	movf	0,w
  1348  00C7  00B2               	movwf	sprintf@val
  1349  00C8  0A84               	incf	4,f
  1350  00C9  0800               	movf	0,w
  1351  00CA  00B3               	movwf	sprintf@val+1
  1352  00CB                     l1829:
  1353  00CB  3002               	movlw	2
  1354  00CC  00AD               	movwf	??_sprintf
  1355  00CD  082D               	movf	??_sprintf,w
  1356  00CE  07B0               	addwf	sprintf@ap,f
  1357  00CF                     l1831:
  1358                           
  1359                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1360  00CF  1FB3               	btfss	sprintf@val+1,7
  1361  00D0  28D2               	goto	u1341
  1362  00D1  28D3               	goto	u1340
  1363  00D2                     u1341:
  1364  00D2  28DC               	goto	l1837
  1365  00D3                     u1340:
  1366  00D3                     l1833:
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1369  00D3  3003               	movlw	3
  1370  00D4  00AD               	movwf	??_sprintf
  1371  00D5  082D               	movf	??_sprintf,w
  1372  00D6  04B4               	iorwf	sprintf@flag,f
  1373  00D7                     l1835:
  1374                           
  1375                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1376  00D7  09B2               	comf	sprintf@val,f
  1377  00D8  09B3               	comf	sprintf@val+1,f
  1378  00D9  0AB2               	incf	sprintf@val,f
  1379  00DA  1903               	skipnz
  1380  00DB  0AB3               	incf	sprintf@val+1,f
  1381  00DC                     l1837:
  1382                           
  1383                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1384  00DC  01B8               	clrf	sprintf@c
  1385  00DD  0AB8               	incf	sprintf@c,f
  1386  00DE                     l1843:
  1387                           
  1388                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1389  00DE  0838               	movf	sprintf@c,w
  1390  00DF  00AD               	movwf	??_sprintf
  1391  00E0  072D               	addwf	??_sprintf,w
  1392  00E1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1393  00E2  0084               	movwf	4
  1394  00E3  120A  118A  2382  120A  118A  	fcall	stringdir
  1395  00E8  00AE               	movwf	??_sprintf+1
  1396  00E9  120A  118A  2382  120A  118A  	fcall	stringdir
  1397  00EE  00AF               	movwf	??_sprintf+2
  1398  00EF  082F               	movf	??_sprintf+2,w
  1399  00F0  0233               	subwf	sprintf@val+1,w
  1400  00F1  1D03               	skipz
  1401  00F2  28F5               	goto	u1355
  1402  00F3  082E               	movf	??_sprintf+1,w
  1403  00F4  0232               	subwf	sprintf@val,w
  1404  00F5                     u1355:
  1405  00F5  1803               	skipnc
  1406  00F6  28F8               	goto	u1351
  1407  00F7  28F9               	goto	u1350
  1408  00F8                     u1351:
  1409  00F8  28FA               	goto	l1847
  1410  00F9                     u1350:
  1411  00F9  2904               	goto	l1849
  1412  00FA                     l1847:
  1413  00FA  3001               	movlw	1
  1414  00FB  00AD               	movwf	??_sprintf
  1415  00FC  082D               	movf	??_sprintf,w
  1416  00FD  07B8               	addwf	sprintf@c,f
  1417  00FE  3005               	movlw	5
  1418  00FF  0638               	xorwf	sprintf@c,w
  1419  0100  1D03               	btfss	3,2
  1420  0101  2903               	goto	u1361
  1421  0102  2904               	goto	u1360
  1422  0103                     u1361:
  1423  0103  28DE               	goto	l1843
  1424  0104                     u1360:
  1425  0104                     l1849:
  1426                           
  1427                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1428  0104  0835               	movf	sprintf@width,w
  1429  0105  0436               	iorwf	sprintf@width+1,w
  1430  0106  1903               	btfsc	3,2
  1431  0107  2909               	goto	u1371
  1432  0108  290A               	goto	u1370
  1433  0109                     u1371:
  1434  0109  2916               	goto	l265
  1435  010A                     u1370:
  1436  010A                     l1851:
  1437  010A  0834               	movf	sprintf@flag,w
  1438  010B  3903               	andlw	3
  1439  010C  1903               	btfsc	3,2
  1440  010D  290F               	goto	u1381
  1441  010E  2910               	goto	u1380
  1442  010F                     u1381:
  1443  010F  2916               	goto	l265
  1444  0110                     u1380:
  1445  0110                     l1853:
  1446                           
  1447                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1448  0110  30FF               	movlw	255
  1449  0111  07B5               	addwf	sprintf@width,f
  1450  0112  1803               	skipnc
  1451  0113  0AB6               	incf	sprintf@width+1,f
  1452  0114  30FF               	movlw	255
  1453  0115  07B6               	addwf	sprintf@width+1,f
  1454  0116                     l265:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1457  0116  0836               	movf	sprintf@width+1,w
  1458  0117  3A80               	xorlw	128
  1459  0118  3C80               	sublw	128
  1460  0119  1D03               	skipz
  1461  011A  291D               	goto	u1395
  1462  011B  0835               	movf	sprintf@width,w
  1463  011C  0238               	subwf	sprintf@c,w
  1464  011D                     u1395:
  1465  011D  1803               	skipnc
  1466  011E  2920               	goto	u1391
  1467  011F  2921               	goto	u1390
  1468  0120                     u1391:
  1469  0120  292D               	goto	l1857
  1470  0121                     u1390:
  1471  0121                     l1855:
  1472                           
  1473                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1474  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1475  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0123  0838               	movf	sprintf@c,w
  1477  0124  00AD               	movwf	??_sprintf
  1478  0125  01AE               	clrf	??_sprintf+1
  1479  0126  082D               	movf	??_sprintf,w
  1480  0127  02B5               	subwf	sprintf@width,f
  1481  0128  082E               	movf	??_sprintf+1,w
  1482  0129  1C03               	skipc
  1483  012A  03B6               	decf	sprintf@width+1,f
  1484  012B  02B6               	subwf	sprintf@width+1,f
  1485  012C  2931               	goto	l1859
  1486  012D                     l1857:
  1487                           
  1488                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1489  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1490  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1491  012F  01B5               	clrf	sprintf@width
  1492  0130  01B6               	clrf	sprintf@width+1
  1493  0131                     l1859:
  1494                           
  1495                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1496  0131  1D34               	btfss	sprintf@flag,2
  1497  0132  2934               	goto	u1401
  1498  0133  2935               	goto	u1400
  1499  0134                     u1401:
  1500  0134  2964               	goto	l1875
  1501  0135                     u1400:
  1502  0135                     l1861:
  1503                           
  1504                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1505  0135  0834               	movf	sprintf@flag,w
  1506  0136  3903               	andlw	3
  1507  0137  1903               	btfsc	3,2
  1508  0138  293A               	goto	u1411
  1509  0139  293B               	goto	u1410
  1510  013A                     u1411:
  1511  013A  2946               	goto	l1867
  1512  013B                     u1410:
  1513  013B                     l1863:
  1514                           
  1515                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1516  013B  302D               	movlw	45
  1517  013C  00AD               	movwf	??_sprintf
  1518  013D  0837               	movf	sprintf@sp,w
  1519  013E  0084               	movwf	4
  1520  013F  082D               	movf	??_sprintf,w
  1521  0140  1383               	bcf	3,7	;select IRP bank0
  1522  0141  0080               	movwf	0
  1523  0142                     l1865:
  1524  0142  3001               	movlw	1
  1525  0143  00AD               	movwf	??_sprintf
  1526  0144  082D               	movf	??_sprintf,w
  1527  0145  07B7               	addwf	sprintf@sp,f
  1528  0146                     l1867:
  1529                           
  1530                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1531  0146  0835               	movf	sprintf@width,w
  1532  0147  0436               	iorwf	sprintf@width+1,w
  1533  0148  1903               	btfsc	3,2
  1534  0149  294B               	goto	u1421
  1535  014A  294C               	goto	u1420
  1536  014B                     u1421:
  1537  014B  2992               	goto	l1889
  1538  014C                     u1420:
  1539  014C                     l1869:
  1540                           
  1541                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1542  014C  3030               	movlw	48
  1543  014D  00AD               	movwf	??_sprintf
  1544  014E  0837               	movf	sprintf@sp,w
  1545  014F  0084               	movwf	4
  1546  0150  082D               	movf	??_sprintf,w
  1547  0151  1383               	bcf	3,7	;select IRP bank0
  1548  0152  0080               	movwf	0
  1549  0153                     l1871:
  1550  0153  3001               	movlw	1
  1551  0154  00AD               	movwf	??_sprintf
  1552  0155  082D               	movf	??_sprintf,w
  1553  0156  07B7               	addwf	sprintf@sp,f
  1554  0157                     l1873:
  1555  0157  30FF               	movlw	255
  1556  0158  07B5               	addwf	sprintf@width,f
  1557  0159  1803               	skipnc
  1558  015A  0AB6               	incf	sprintf@width+1,f
  1559  015B  30FF               	movlw	255
  1560  015C  07B6               	addwf	sprintf@width+1,f
  1561  015D  0835               	movf	sprintf@width,w
  1562  015E  0436               	iorwf	sprintf@width+1,w
  1563  015F  1D03               	btfss	3,2
  1564  0160  2962               	goto	u1431
  1565  0161  2963               	goto	u1430
  1566  0162                     u1431:
  1567  0162  294C               	goto	l1869
  1568  0163                     u1430:
  1569  0163  2992               	goto	l1889
  1570  0164                     l1875:
  1571                           
  1572                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1573  0164  0835               	movf	sprintf@width,w
  1574  0165  0436               	iorwf	sprintf@width+1,w
  1575  0166  1903               	btfsc	3,2
  1576  0167  2969               	goto	u1441
  1577  0168  296A               	goto	u1440
  1578  0169                     u1441:
  1579  0169  2981               	goto	l1883
  1580  016A                     u1440:
  1581  016A                     l1877:
  1582                           
  1583                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1584  016A  3020               	movlw	32
  1585  016B  00AD               	movwf	??_sprintf
  1586  016C  0837               	movf	sprintf@sp,w
  1587  016D  0084               	movwf	4
  1588  016E  082D               	movf	??_sprintf,w
  1589  016F  1383               	bcf	3,7	;select IRP bank0
  1590  0170  0080               	movwf	0
  1591  0171                     l1879:
  1592  0171  3001               	movlw	1
  1593  0172  00AD               	movwf	??_sprintf
  1594  0173  082D               	movf	??_sprintf,w
  1595  0174  07B7               	addwf	sprintf@sp,f
  1596  0175                     l1881:
  1597  0175  30FF               	movlw	255
  1598  0176  07B5               	addwf	sprintf@width,f
  1599  0177  1803               	skipnc
  1600  0178  0AB6               	incf	sprintf@width+1,f
  1601  0179  30FF               	movlw	255
  1602  017A  07B6               	addwf	sprintf@width+1,f
  1603  017B  0835               	movf	sprintf@width,w
  1604  017C  0436               	iorwf	sprintf@width+1,w
  1605  017D  1D03               	btfss	3,2
  1606  017E  2980               	goto	u1451
  1607  017F  2981               	goto	u1450
  1608  0180                     u1451:
  1609  0180  296A               	goto	l1877
  1610  0181                     u1450:
  1611  0181                     l1883:
  1612                           
  1613                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1614  0181  0834               	movf	sprintf@flag,w
  1615  0182  3903               	andlw	3
  1616  0183  1903               	btfsc	3,2
  1617  0184  2986               	goto	u1461
  1618  0185  2987               	goto	u1460
  1619  0186                     u1461:
  1620  0186  2992               	goto	l1889
  1621  0187                     u1460:
  1622  0187                     l1885:
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1625  0187  302D               	movlw	45
  1626  0188  00AD               	movwf	??_sprintf
  1627  0189  0837               	movf	sprintf@sp,w
  1628  018A  0084               	movwf	4
  1629  018B  082D               	movf	??_sprintf,w
  1630  018C  1383               	bcf	3,7	;select IRP bank0
  1631  018D  0080               	movwf	0
  1632  018E                     l1887:
  1633  018E  3001               	movlw	1
  1634  018F  00AD               	movwf	??_sprintf
  1635  0190  082D               	movf	??_sprintf,w
  1636  0191  07B7               	addwf	sprintf@sp,f
  1637  0192                     l1889:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1640  0192  0838               	movf	sprintf@c,w
  1641  0193  00AD               	movwf	??_sprintf
  1642  0194  082D               	movf	??_sprintf,w
  1643  0195  00B1               	movwf	sprintf@prec
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1646  0196  29D2               	goto	l1897
  1647  0197                     l1891:
  1648                           
  1649                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1650  0197  300A               	movlw	10
  1651  0198  00A0               	movwf	___lwmod@divisor
  1652  0199  3000               	movlw	0
  1653  019A  00A1               	movwf	___lwmod@divisor+1
  1654  019B  0831               	movf	sprintf@prec,w
  1655  019C  00AD               	movwf	??_sprintf
  1656  019D  072D               	addwf	??_sprintf,w
  1657  019E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1658  019F  0084               	movwf	4
  1659  01A0  120A  118A  2382  120A  118A  	fcall	stringdir
  1660  01A5  00F2               	movwf	___lwdiv@divisor
  1661  01A6  120A  118A  2382  120A  118A  	fcall	stringdir
  1662  01AB  00F3               	movwf	___lwdiv@divisor+1
  1663  01AC  0833               	movf	sprintf@val+1,w
  1664  01AD  00F5               	movwf	___lwdiv@dividend+1
  1665  01AE  0832               	movf	sprintf@val,w
  1666  01AF  00F4               	movwf	___lwdiv@dividend
  1667  01B0  120A  118A  233E  120A  118A  	fcall	___lwdiv
  1668  01B5  0873               	movf	?___lwdiv+1,w
  1669  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1670  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1671  01B8  00A3               	movwf	___lwmod@dividend+1
  1672  01B9  0872               	movf	?___lwdiv,w
  1673  01BA  00A2               	movwf	___lwmod@dividend
  1674  01BB  120A  118A  23C0  120A  118A  	fcall	___lwmod
  1675  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1676  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1677  01C2  0820               	movf	?___lwmod,w
  1678  01C3  3E30               	addlw	48
  1679  01C4  00AE               	movwf	??_sprintf+1
  1680  01C5  082E               	movf	??_sprintf+1,w
  1681  01C6  00B8               	movwf	sprintf@c
  1682  01C7                     l1893:
  1683                           
  1684                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1685  01C7  0838               	movf	sprintf@c,w
  1686  01C8  00AD               	movwf	??_sprintf
  1687  01C9  0837               	movf	sprintf@sp,w
  1688  01CA  0084               	movwf	4
  1689  01CB  082D               	movf	??_sprintf,w
  1690  01CC  1383               	bcf	3,7	;select IRP bank0
  1691  01CD  0080               	movwf	0
  1692  01CE                     l1895:
  1693  01CE  3001               	movlw	1
  1694  01CF  00AD               	movwf	??_sprintf
  1695  01D0  082D               	movf	??_sprintf,w
  1696  01D1  07B7               	addwf	sprintf@sp,f
  1697  01D2                     l1897:
  1698                           
  1699                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1700  01D2  30FF               	movlw	255
  1701  01D3  00AD               	movwf	??_sprintf
  1702  01D4  082D               	movf	??_sprintf,w
  1703  01D5  07B1               	addwf	sprintf@prec,f
  1704  01D6  0A31               	incf	sprintf@prec,w
  1705  01D7  1D03               	btfss	3,2
  1706  01D8  29DA               	goto	u1471
  1707  01D9  29DB               	goto	u1470
  1708  01DA                     u1471:
  1709  01DA  2997               	goto	l1891
  1710  01DB                     u1470:
  1711  01DB                     l1899:
  1712                           
  1713                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1714  01DB  3001               	movlw	1
  1715  01DC  07A6               	addwf	sprintf@f,f
  1716  01DD  30FF               	movlw	-1
  1717  01DE  0726               	addwf	sprintf@f,w
  1718  01DF  0084               	movwf	4
  1719  01E0  120A  118A  2382  120A  118A  	fcall	stringdir
  1720  01E5  00AD               	movwf	??_sprintf
  1721  01E6  082D               	movf	??_sprintf,w
  1722  01E7  00B8               	movwf	sprintf@c
  1723  01E8  0838               	movf	sprintf@c,w
  1724  01E9  1D03               	btfss	3,2
  1725  01EA  29EC               	goto	u1481
  1726  01EB  29ED               	goto	u1480
  1727  01EC                     u1481:
  1728  01EC  2826               	goto	l1797
  1729  01ED                     u1480:
  1730  01ED                     l1901:
  1731                           
  1732                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1733  01ED  0837               	movf	sprintf@sp,w
  1734  01EE  0084               	movwf	4
  1735  01EF  1383               	bcf	3,7	;select IRP bank0
  1736  01F0  0180               	clrf	0
  1737  01F1                     l282:
  1738  01F1  0008               	return
  1739  01F2                     __end_of_sprintf:
  1740                           
  1741                           	psect	text4
  1742  0558                     __ptext4:	
  1743 ;; *************** function _isdigit *****************
  1744 ;; Defined at:
  1745 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;  c               1    wreg     unsigned char 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  c               1    3[COMMON] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;		None               void
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1759 ;;      Params:         0       0       0       0       0
  1760 ;;      Locals:         2       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0
  1762 ;;      Totals:         2       0       0       0       0
  1763 ;;Total ram usage:        2 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; Hardware stack levels required when called: 2
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_sprintf
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773  0558                     _isdigit:	
  1774                           ;psect for function _isdigit
  1775                           
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1779                           ;isdigit@c stored from wreg
  1780  0558  00F3               	movwf	isdigit@c
  1781  0559                     l1291:
  1782  0559  01F2               	clrf	_isdigit$833
  1783  055A                     l1293:
  1784  055A  303A               	movlw	58
  1785  055B  0273               	subwf	isdigit@c,w
  1786  055C  1803               	skipnc
  1787  055D  2D5F               	goto	u631
  1788  055E  2D60               	goto	u630
  1789  055F                     u631:
  1790  055F  2D68               	goto	l1299
  1791  0560                     u630:
  1792  0560                     l1295:
  1793  0560  3030               	movlw	48
  1794  0561  0273               	subwf	isdigit@c,w
  1795  0562  1C03               	skipc
  1796  0563  2D65               	goto	u641
  1797  0564  2D66               	goto	u640
  1798  0565                     u641:
  1799  0565  2D68               	goto	l1299
  1800  0566                     u640:
  1801  0566                     l1297:
  1802  0566  01F2               	clrf	_isdigit$833
  1803  0567  0AF2               	incf	_isdigit$833,f
  1804  0568                     l1299:
  1805  0568  0C72               	rrf	_isdigit$833,w
  1806  0569                     l739:
  1807  0569  0008               	return
  1808  056A                     __end_of_isdigit:
  1809                           
  1810                           	psect	text5
  1811  04B7                     __ptext5:	
  1812 ;; *************** function ___wmul *****************
  1813 ;; Defined at:
  1814 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  multiplier      2    2[COMMON] unsigned int 
  1817 ;;  multiplicand    2    4[COMMON] unsigned int 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  product         2    6[COMMON] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    2[COMMON] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         4       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0
  1832 ;;      Totals:         6       0       0       0       0
  1833 ;;Total ram usage:        6 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 2
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_sprintf
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843  04B7                     ___wmul:	
  1844                           ;psect for function ___wmul
  1845                           
  1846  04B7                     l1303:	
  1847                           ;incstack = 0
  1848                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1849                           
  1850  04B7  01F6               	clrf	___wmul@product
  1851  04B8  01F7               	clrf	___wmul@product+1
  1852  04B9                     l1305:
  1853  04B9  1C72               	btfss	___wmul@multiplier,0
  1854  04BA  2CBC               	goto	u651
  1855  04BB  2CBD               	goto	u650
  1856  04BC                     u651:
  1857  04BC  2CC3               	goto	l286
  1858  04BD                     u650:
  1859  04BD                     l1307:
  1860  04BD  0874               	movf	___wmul@multiplicand,w
  1861  04BE  07F6               	addwf	___wmul@product,f
  1862  04BF  1803               	skipnc
  1863  04C0  0AF7               	incf	___wmul@product+1,f
  1864  04C1  0875               	movf	___wmul@multiplicand+1,w
  1865  04C2  07F7               	addwf	___wmul@product+1,f
  1866  04C3                     l286:
  1867  04C3  3001               	movlw	1
  1868  04C4                     u665:
  1869  04C4  1003               	clrc
  1870  04C5  0DF4               	rlf	___wmul@multiplicand,f
  1871  04C6  0DF5               	rlf	___wmul@multiplicand+1,f
  1872  04C7  3EFF               	addlw	-1
  1873  04C8  1D03               	skipz
  1874  04C9  2CC4               	goto	u665
  1875  04CA                     l1309:
  1876  04CA  3001               	movlw	1
  1877  04CB                     u675:
  1878  04CB  1003               	clrc
  1879  04CC  0CF3               	rrf	___wmul@multiplier+1,f
  1880  04CD  0CF2               	rrf	___wmul@multiplier,f
  1881  04CE  3EFF               	addlw	-1
  1882  04CF  1D03               	skipz
  1883  04D0  2CCB               	goto	u675
  1884  04D1                     l1311:
  1885  04D1  0872               	movf	___wmul@multiplier,w
  1886  04D2  0473               	iorwf	___wmul@multiplier+1,w
  1887  04D3  1D03               	btfss	3,2
  1888  04D4  2CD6               	goto	u681
  1889  04D5  2CD7               	goto	u680
  1890  04D6                     u681:
  1891  04D6  2CB9               	goto	l1305
  1892  04D7                     u680:
  1893  04D7                     l1313:
  1894  04D7  0877               	movf	___wmul@product+1,w
  1895  04D8  00F3               	movwf	?___wmul+1
  1896  04D9  0876               	movf	___wmul@product,w
  1897  04DA  00F2               	movwf	?___wmul
  1898  04DB                     l288:
  1899  04DB  0008               	return
  1900  04DC                     __end_of___wmul:
  1901                           
  1902                           	psect	text6
  1903  03C0                     __ptext6:	
  1904 ;; *************** function ___lwmod *****************
  1905 ;; Defined at:
  1906 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  divisor         2    0[BANK0 ] unsigned int 
  1909 ;;  dividend        2    2[BANK0 ] unsigned int 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  counter         1    5[BANK0 ] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  2    0[BANK0 ] unsigned int 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         0       4       0       0       0
  1922 ;;      Locals:         0       1       0       0       0
  1923 ;;      Temps:          0       1       0       0       0
  1924 ;;      Totals:         0       6       0       0       0
  1925 ;;Total ram usage:        6 bytes
  1926 ;; Hardware stack levels used: 1
  1927 ;; Hardware stack levels required when called: 2
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_sprintf
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935  03C0                     ___lwmod:	
  1936                           ;psect for function ___lwmod
  1937                           
  1938  03C0                     l1745:	
  1939                           ;incstack = 0
  1940                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1941                           
  1942  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1943  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  1944  03C2  0820               	movf	___lwmod@divisor,w
  1945  03C3  0421               	iorwf	___lwmod@divisor+1,w
  1946  03C4  1903               	btfsc	3,2
  1947  03C5  2BC7               	goto	u1201
  1948  03C6  2BC8               	goto	u1200
  1949  03C7                     u1201:
  1950  03C7  2BF7               	goto	l1763
  1951  03C8                     u1200:
  1952  03C8                     l1747:
  1953  03C8  01A5               	clrf	___lwmod@counter
  1954  03C9  0AA5               	incf	___lwmod@counter,f
  1955  03CA  2BD6               	goto	l1753
  1956  03CB                     l1749:
  1957  03CB  3001               	movlw	1
  1958  03CC                     u1215:
  1959  03CC  1003               	clrc
  1960  03CD  0DA0               	rlf	___lwmod@divisor,f
  1961  03CE  0DA1               	rlf	___lwmod@divisor+1,f
  1962  03CF  3EFF               	addlw	-1
  1963  03D0  1D03               	skipz
  1964  03D1  2BCC               	goto	u1215
  1965  03D2                     l1751:
  1966  03D2  3001               	movlw	1
  1967  03D3  00A4               	movwf	??___lwmod
  1968  03D4  0824               	movf	??___lwmod,w
  1969  03D5  07A5               	addwf	___lwmod@counter,f
  1970  03D6                     l1753:
  1971  03D6  1FA1               	btfss	___lwmod@divisor+1,7
  1972  03D7  2BD9               	goto	u1221
  1973  03D8  2BDA               	goto	u1220
  1974  03D9                     u1221:
  1975  03D9  2BCB               	goto	l1749
  1976  03DA                     u1220:
  1977  03DA                     l1755:
  1978  03DA  0821               	movf	___lwmod@divisor+1,w
  1979  03DB  0223               	subwf	___lwmod@dividend+1,w
  1980  03DC  1D03               	skipz
  1981  03DD  2BE0               	goto	u1235
  1982  03DE  0820               	movf	___lwmod@divisor,w
  1983  03DF  0222               	subwf	___lwmod@dividend,w
  1984  03E0                     u1235:
  1985  03E0  1C03               	skipc
  1986  03E1  2BE3               	goto	u1231
  1987  03E2  2BE4               	goto	u1230
  1988  03E3                     u1231:
  1989  03E3  2BEA               	goto	l1759
  1990  03E4                     u1230:
  1991  03E4                     l1757:
  1992  03E4  0820               	movf	___lwmod@divisor,w
  1993  03E5  02A2               	subwf	___lwmod@dividend,f
  1994  03E6  0821               	movf	___lwmod@divisor+1,w
  1995  03E7  1C03               	skipc
  1996  03E8  03A3               	decf	___lwmod@dividend+1,f
  1997  03E9  02A3               	subwf	___lwmod@dividend+1,f
  1998  03EA                     l1759:
  1999  03EA  3001               	movlw	1
  2000  03EB                     u1245:
  2001  03EB  1003               	clrc
  2002  03EC  0CA1               	rrf	___lwmod@divisor+1,f
  2003  03ED  0CA0               	rrf	___lwmod@divisor,f
  2004  03EE  3EFF               	addlw	-1
  2005  03EF  1D03               	skipz
  2006  03F0  2BEB               	goto	u1245
  2007  03F1                     l1761:
  2008  03F1  3001               	movlw	1
  2009  03F2  02A5               	subwf	___lwmod@counter,f
  2010  03F3  1D03               	btfss	3,2
  2011  03F4  2BF6               	goto	u1251
  2012  03F5  2BF7               	goto	u1250
  2013  03F6                     u1251:
  2014  03F6  2BDA               	goto	l1755
  2015  03F7                     u1250:
  2016  03F7                     l1763:
  2017  03F7  0823               	movf	___lwmod@dividend+1,w
  2018  03F8  00A1               	movwf	?___lwmod+1
  2019  03F9  0822               	movf	___lwmod@dividend,w
  2020  03FA  00A0               	movwf	?___lwmod
  2021  03FB                     l568:
  2022  03FB  0008               	return
  2023  03FC                     __end_of___lwmod:
  2024                           
  2025                           	psect	text7
  2026  033E                     __ptext7:	
  2027 ;; *************** function ___lwdiv *****************
  2028 ;; Defined at:
  2029 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;  divisor         2    2[COMMON] unsigned int 
  2032 ;;  dividend        2    4[COMMON] unsigned int 
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  quotient        2    7[COMMON] unsigned int 
  2035 ;;  counter         1    9[COMMON] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  2    2[COMMON] unsigned int 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2, status,0
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2045 ;;      Params:         4       0       0       0       0
  2046 ;;      Locals:         3       0       0       0       0
  2047 ;;      Temps:          1       0       0       0       0
  2048 ;;      Totals:         8       0       0       0       0
  2049 ;;Total ram usage:        8 bytes
  2050 ;; Hardware stack levels used: 1
  2051 ;; Hardware stack levels required when called: 2
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_sprintf
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059  033E                     ___lwdiv:	
  2060                           ;psect for function ___lwdiv
  2061                           
  2062  033E                     l1317:	
  2063                           ;incstack = 0
  2064                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2065                           
  2066  033E  01F7               	clrf	___lwdiv@quotient
  2067  033F  01F8               	clrf	___lwdiv@quotient+1
  2068  0340                     l1319:
  2069  0340  0872               	movf	___lwdiv@divisor,w
  2070  0341  0473               	iorwf	___lwdiv@divisor+1,w
  2071  0342  1903               	btfsc	3,2
  2072  0343  2B45               	goto	u691
  2073  0344  2B46               	goto	u690
  2074  0345                     u691:
  2075  0345  2B7D               	goto	l1339
  2076  0346                     u690:
  2077  0346                     l1321:
  2078  0346  01F9               	clrf	___lwdiv@counter
  2079  0347  0AF9               	incf	___lwdiv@counter,f
  2080  0348  2B54               	goto	l1327
  2081  0349                     l1323:
  2082  0349  3001               	movlw	1
  2083  034A                     u705:
  2084  034A  1003               	clrc
  2085  034B  0DF2               	rlf	___lwdiv@divisor,f
  2086  034C  0DF3               	rlf	___lwdiv@divisor+1,f
  2087  034D  3EFF               	addlw	-1
  2088  034E  1D03               	skipz
  2089  034F  2B4A               	goto	u705
  2090  0350                     l1325:
  2091  0350  3001               	movlw	1
  2092  0351  00F6               	movwf	??___lwdiv
  2093  0352  0876               	movf	??___lwdiv,w
  2094  0353  07F9               	addwf	___lwdiv@counter,f
  2095  0354                     l1327:
  2096  0354  1FF3               	btfss	___lwdiv@divisor+1,7
  2097  0355  2B57               	goto	u711
  2098  0356  2B58               	goto	u710
  2099  0357                     u711:
  2100  0357  2B49               	goto	l1323
  2101  0358                     u710:
  2102  0358                     l1329:
  2103  0358  3001               	movlw	1
  2104  0359                     u725:
  2105  0359  1003               	clrc
  2106  035A  0DF7               	rlf	___lwdiv@quotient,f
  2107  035B  0DF8               	rlf	___lwdiv@quotient+1,f
  2108  035C  3EFF               	addlw	-1
  2109  035D  1D03               	skipz
  2110  035E  2B59               	goto	u725
  2111  035F  0873               	movf	___lwdiv@divisor+1,w
  2112  0360  0275               	subwf	___lwdiv@dividend+1,w
  2113  0361  1D03               	skipz
  2114  0362  2B65               	goto	u735
  2115  0363  0872               	movf	___lwdiv@divisor,w
  2116  0364  0274               	subwf	___lwdiv@dividend,w
  2117  0365                     u735:
  2118  0365  1C03               	skipc
  2119  0366  2B68               	goto	u731
  2120  0367  2B69               	goto	u730
  2121  0368                     u731:
  2122  0368  2B70               	goto	l1335
  2123  0369                     u730:
  2124  0369                     l1331:
  2125  0369  0872               	movf	___lwdiv@divisor,w
  2126  036A  02F4               	subwf	___lwdiv@dividend,f
  2127  036B  0873               	movf	___lwdiv@divisor+1,w
  2128  036C  1C03               	skipc
  2129  036D  03F5               	decf	___lwdiv@dividend+1,f
  2130  036E  02F5               	subwf	___lwdiv@dividend+1,f
  2131  036F                     l1333:
  2132  036F  1477               	bsf	___lwdiv@quotient,0
  2133  0370                     l1335:
  2134  0370  3001               	movlw	1
  2135  0371                     u745:
  2136  0371  1003               	clrc
  2137  0372  0CF3               	rrf	___lwdiv@divisor+1,f
  2138  0373  0CF2               	rrf	___lwdiv@divisor,f
  2139  0374  3EFF               	addlw	-1
  2140  0375  1D03               	skipz
  2141  0376  2B71               	goto	u745
  2142  0377                     l1337:
  2143  0377  3001               	movlw	1
  2144  0378  02F9               	subwf	___lwdiv@counter,f
  2145  0379  1D03               	btfss	3,2
  2146  037A  2B7C               	goto	u751
  2147  037B  2B7D               	goto	u750
  2148  037C                     u751:
  2149  037C  2B58               	goto	l1329
  2150  037D                     u750:
  2151  037D                     l1339:
  2152  037D  0878               	movf	___lwdiv@quotient+1,w
  2153  037E  00F3               	movwf	?___lwdiv+1
  2154  037F  0877               	movf	___lwdiv@quotient,w
  2155  0380  00F2               	movwf	?___lwdiv
  2156  0381                     l558:
  2157  0381  0008               	return
  2158  0382                     __end_of___lwdiv:
  2159                           
  2160                           	psect	text8
  2161  04DC                     __ptext8:	
  2162 ;; *************** function _Lcd_Write_String *****************
  2163 ;; Defined at:
  2164 ;;		line 96 in file "./lcd.h"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  a               1    wreg     PTR unsigned char 
  2167 ;;		 -> buffer(10), 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  a               1    2[BANK0 ] PTR unsigned char 
  2170 ;;		 -> buffer(10), 
  2171 ;;  i               2    0[BANK0 ] int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         0       0       0       0       0
  2182 ;;      Locals:         0       3       0       0       0
  2183 ;;      Temps:          1       0       0       0       0
  2184 ;;      Totals:         1       3       0       0       0
  2185 ;;Total ram usage:        4 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 4
  2188 ;; This function calls:
  2189 ;;		_Lcd_Write_Char
  2190 ;; This function is called by:
  2191 ;;		_setCronometro
  2192 ;;		_setDQ
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196  04DC                     _Lcd_Write_String:	
  2197                           ;psect for function _Lcd_Write_String
  2198                           
  2199                           
  2200                           ;incstack = 0
  2201                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2202                           ;Lcd_Write_String@a stored from wreg
  2203  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2204  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2205  04DE  00A2               	movwf	Lcd_Write_String@a
  2206  04DF                     l1787:
  2207                           
  2208                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  2209  04DF  01A0               	clrf	Lcd_Write_String@i
  2210  04E0  01A1               	clrf	Lcd_Write_String@i+1
  2211  04E1  2CF5               	goto	l1793
  2212  04E2                     l1789:
  2213                           
  2214                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  2215  04E2  0820               	movf	Lcd_Write_String@i,w
  2216  04E3  0722               	addwf	Lcd_Write_String@a,w
  2217  04E4  00F7               	movwf	??_Lcd_Write_String
  2218  04E5  0877               	movf	??_Lcd_Write_String,w
  2219  04E6  0084               	movwf	4
  2220  04E7  0800               	movf	0,w
  2221  04E8  120A  118A  23FC  120A  118A  	fcall	_Lcd_Write_Char
  2222  04ED                     l1791:
  2223  04ED  3001               	movlw	1
  2224  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2225  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  2226  04F0  07A0               	addwf	Lcd_Write_String@i,f
  2227  04F1  1803               	skipnc
  2228  04F2  0AA1               	incf	Lcd_Write_String@i+1,f
  2229  04F3  3000               	movlw	0
  2230  04F4  07A1               	addwf	Lcd_Write_String@i+1,f
  2231  04F5                     l1793:
  2232  04F5  0820               	movf	Lcd_Write_String@i,w
  2233  04F6  0722               	addwf	Lcd_Write_String@a,w
  2234  04F7  00F7               	movwf	??_Lcd_Write_String
  2235  04F8  0877               	movf	??_Lcd_Write_String,w
  2236  04F9  0084               	movwf	4
  2237  04FA  1383               	bcf	3,7	;select IRP bank0
  2238  04FB  0800               	movf	0,w
  2239  04FC  1D03               	btfss	3,2
  2240  04FD  2CFF               	goto	u1301
  2241  04FE  2D00               	goto	u1300
  2242  04FF                     u1301:
  2243  04FF  2CE2               	goto	l1789
  2244  0500                     u1300:
  2245  0500                     l99:
  2246  0500  0008               	return
  2247  0501                     __end_of_Lcd_Write_String:
  2248                           
  2249                           	psect	text9
  2250  03FC                     __ptext9:	
  2251 ;; *************** function _Lcd_Write_Char *****************
  2252 ;; Defined at:
  2253 ;;		line 80 in file "./lcd.h"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  a               1    wreg     unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  a               1    6[COMMON] unsigned char 
  2258 ;;  y               1    5[COMMON] unsigned char 
  2259 ;;  temp            1    4[COMMON] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, pclath, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         0       0       0       0       0
  2270 ;;      Locals:         3       0       0       0       0
  2271 ;;      Temps:          1       0       0       0       0
  2272 ;;      Totals:         4       0       0       0       0
  2273 ;;Total ram usage:        4 bytes
  2274 ;; Hardware stack levels used: 1
  2275 ;; Hardware stack levels required when called: 3
  2276 ;; This function calls:
  2277 ;;		_Lcd_Port
  2278 ;; This function is called by:
  2279 ;;		_Lcd_Write_String
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283  03FC                     _Lcd_Write_Char:	
  2284                           ;psect for function _Lcd_Write_Char
  2285                           
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2289                           ;Lcd_Write_Char@a stored from wreg
  2290  03FC  00F6               	movwf	Lcd_Write_Char@a
  2291  03FD                     l1725:
  2292                           
  2293                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2294  03FD  0876               	movf	Lcd_Write_Char@a,w
  2295  03FE  390F               	andlw	15
  2296  03FF  00F3               	movwf	??_Lcd_Write_Char
  2297  0400  0873               	movf	??_Lcd_Write_Char,w
  2298  0401  00F4               	movwf	Lcd_Write_Char@temp
  2299                           
  2300                           ;./lcd.h: 84:    y = a&0xF0;
  2301  0402  0876               	movf	Lcd_Write_Char@a,w
  2302  0403  39F0               	andlw	240
  2303  0404  00F3               	movwf	??_Lcd_Write_Char
  2304  0405  0873               	movf	??_Lcd_Write_Char,w
  2305  0406  00F5               	movwf	Lcd_Write_Char@y
  2306  0407                     l1727:
  2307                           
  2308                           ;./lcd.h: 85:    RD2 = 1;
  2309  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0409  1508               	bsf	8,2	;volatile
  2312  040A                     l1729:
  2313                           
  2314                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2315  040A  0875               	movf	Lcd_Write_Char@y,w
  2316  040B  00F3               	movwf	??_Lcd_Write_Char
  2317  040C  3004               	movlw	4
  2318  040D                     u1195:
  2319  040D  1003               	clrc
  2320  040E  0CF3               	rrf	??_Lcd_Write_Char,f
  2321  040F  3EFF               	addlw	-1
  2322  0410  1D03               	skipz
  2323  0411  2C0D               	goto	u1195
  2324  0412  0873               	movf	??_Lcd_Write_Char,w
  2325  0413  120A  118A  2501  120A  118A  	fcall	_Lcd_Port
  2326  0418                     l1731:
  2327                           
  2328                           ;./lcd.h: 87:    RD3 = 1;
  2329  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2331  041A  1588               	bsf	8,3	;volatile
  2332  041B                     l1733:
  2333                           
  2334                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2335  041B  3042               	movlw	66
  2336  041C  00F3               	movwf	??_Lcd_Write_Char
  2337  041D                     u1567:
  2338  041D  0BF3               	decfsz	??_Lcd_Write_Char,f
  2339  041E  2C1D               	goto	u1567
  2340  041F  0000               	nop
  2341  0420                     l1735:
  2342                           
  2343                           ;./lcd.h: 89:    RD3 = 0;
  2344  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0422  1188               	bcf	8,3	;volatile
  2347  0423                     l1737:
  2348                           
  2349                           ;./lcd.h: 90:    Lcd_Port(temp);
  2350  0423  0874               	movf	Lcd_Write_Char@temp,w
  2351  0424  120A  118A  2501  120A  118A  	fcall	_Lcd_Port
  2352  0429                     l1739:
  2353                           
  2354                           ;./lcd.h: 91:    RD3 = 1;
  2355  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2356  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2357  042B  1588               	bsf	8,3	;volatile
  2358  042C                     l1741:
  2359                           
  2360                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2361  042C  3042               	movlw	66
  2362  042D  00F3               	movwf	??_Lcd_Write_Char
  2363  042E                     u1577:
  2364  042E  0BF3               	decfsz	??_Lcd_Write_Char,f
  2365  042F  2C2E               	goto	u1577
  2366  0430  0000               	nop
  2367  0431                     l1743:
  2368                           
  2369                           ;./lcd.h: 93:    RD3 = 0;
  2370  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2372  0433  1188               	bcf	8,3	;volatile
  2373  0434                     l93:
  2374  0434  0008               	return
  2375  0435                     __end_of_Lcd_Write_Char:
  2376                           
  2377                           	psect	text10
  2378  02E6                     __ptext10:	
  2379 ;; *************** function _Lcd_Set_Cursor *****************
  2380 ;; Defined at:
  2381 ;;		line 40 in file "./lcd.h"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  a               1    wreg     unsigned char 
  2384 ;;  b               1    6[COMMON] unsigned char 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  a               1    0[BANK0 ] unsigned char 
  2387 ;;  temp            1    3[BANK0 ] unsigned char 
  2388 ;;  y               1    2[BANK0 ] unsigned char 
  2389 ;;  z               1    1[BANK0 ] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2399 ;;      Params:         1       0       0       0       0
  2400 ;;      Locals:         0       4       0       0       0
  2401 ;;      Temps:          2       0       0       0       0
  2402 ;;      Totals:         3       4       0       0       0
  2403 ;;Total ram usage:        7 bytes
  2404 ;; Hardware stack levels used: 1
  2405 ;; Hardware stack levels required when called: 4
  2406 ;; This function calls:
  2407 ;;		_Lcd_Cmd
  2408 ;; This function is called by:
  2409 ;;		_setCronometro
  2410 ;;		_setDQ
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414  02E6                     _Lcd_Set_Cursor:	
  2415                           ;psect for function _Lcd_Set_Cursor
  2416                           
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2420                           ;Lcd_Set_Cursor@a stored from wreg
  2421  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2422  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  2423  02E8  00A0               	movwf	Lcd_Set_Cursor@a
  2424  02E9                     l1767:
  2425                           
  2426                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2427  02E9  0320               	decf	Lcd_Set_Cursor@a,w
  2428  02EA  1D03               	btfss	3,2
  2429  02EB  2AED               	goto	u1261
  2430  02EC  2AEE               	goto	u1260
  2431  02ED                     u1261:
  2432  02ED  2B13               	goto	l1777
  2433  02EE                     u1260:
  2434  02EE                     l1769:
  2435                           
  2436                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2437  02EE  0876               	movf	Lcd_Set_Cursor@b,w
  2438  02EF  3E7F               	addlw	127
  2439  02F0  00F7               	movwf	??_Lcd_Set_Cursor
  2440  02F1  0877               	movf	??_Lcd_Set_Cursor,w
  2441  02F2  00A3               	movwf	Lcd_Set_Cursor@temp
  2442                           
  2443                           ;./lcd.h: 46:   z = temp>>4;
  2444  02F3  0823               	movf	Lcd_Set_Cursor@temp,w
  2445  02F4  00F7               	movwf	??_Lcd_Set_Cursor
  2446  02F5  3004               	movlw	4
  2447  02F6                     u1275:
  2448  02F6  1003               	clrc
  2449  02F7  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2450  02F8  3EFF               	addlw	-1
  2451  02F9  1D03               	skipz
  2452  02FA  2AF6               	goto	u1275
  2453  02FB  0877               	movf	??_Lcd_Set_Cursor,w
  2454  02FC  00F8               	movwf	??_Lcd_Set_Cursor+1
  2455  02FD  0878               	movf	??_Lcd_Set_Cursor+1,w
  2456  02FE  00A1               	movwf	Lcd_Set_Cursor@z
  2457  02FF                     l1771:
  2458                           
  2459                           ;./lcd.h: 47:   y = temp & 0x0F;
  2460  02FF  0823               	movf	Lcd_Set_Cursor@temp,w
  2461  0300  390F               	andlw	15
  2462  0301  00F7               	movwf	??_Lcd_Set_Cursor
  2463  0302  0877               	movf	??_Lcd_Set_Cursor,w
  2464  0303  00A2               	movwf	Lcd_Set_Cursor@y
  2465  0304                     l1773:
  2466                           
  2467                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2468  0304  0821               	movf	Lcd_Set_Cursor@z,w
  2469  0305  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2470  030A                     l1775:
  2471                           
  2472                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2473  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2474  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2475  030C  0822               	movf	Lcd_Set_Cursor@y,w
  2476  030D  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2477                           
  2478                           ;./lcd.h: 50:  }
  2479  0312  2B3D               	goto	l87
  2480  0313                     l1777:
  2481  0313  3002               	movlw	2
  2482  0314  0620               	xorwf	Lcd_Set_Cursor@a,w
  2483  0315  1D03               	btfss	3,2
  2484  0316  2B18               	goto	u1281
  2485  0317  2B19               	goto	u1280
  2486  0318                     u1281:
  2487  0318  2B3D               	goto	l87
  2488  0319                     u1280:
  2489  0319                     l1779:
  2490                           
  2491                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2492  0319  0876               	movf	Lcd_Set_Cursor@b,w
  2493  031A  3EBF               	addlw	191
  2494  031B  00F7               	movwf	??_Lcd_Set_Cursor
  2495  031C  0877               	movf	??_Lcd_Set_Cursor,w
  2496  031D  00A3               	movwf	Lcd_Set_Cursor@temp
  2497                           
  2498                           ;./lcd.h: 54:   z = temp>>4;
  2499  031E  0823               	movf	Lcd_Set_Cursor@temp,w
  2500  031F  00F7               	movwf	??_Lcd_Set_Cursor
  2501  0320  3004               	movlw	4
  2502  0321                     u1295:
  2503  0321  1003               	clrc
  2504  0322  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2505  0323  3EFF               	addlw	-1
  2506  0324  1D03               	skipz
  2507  0325  2B21               	goto	u1295
  2508  0326  0877               	movf	??_Lcd_Set_Cursor,w
  2509  0327  00F8               	movwf	??_Lcd_Set_Cursor+1
  2510  0328  0878               	movf	??_Lcd_Set_Cursor+1,w
  2511  0329  00A1               	movwf	Lcd_Set_Cursor@z
  2512  032A                     l1781:
  2513                           
  2514                           ;./lcd.h: 55:   y = temp & 0x0F;
  2515  032A  0823               	movf	Lcd_Set_Cursor@temp,w
  2516  032B  390F               	andlw	15
  2517  032C  00F7               	movwf	??_Lcd_Set_Cursor
  2518  032D  0877               	movf	??_Lcd_Set_Cursor,w
  2519  032E  00A2               	movwf	Lcd_Set_Cursor@y
  2520  032F                     l1783:
  2521                           
  2522                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2523  032F  0821               	movf	Lcd_Set_Cursor@z,w
  2524  0330  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2525  0335                     l1785:
  2526                           
  2527                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2528  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0337  0822               	movf	Lcd_Set_Cursor@y,w
  2531  0338  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2532  033D                     l87:
  2533  033D  0008               	return
  2534  033E                     __end_of_Lcd_Set_Cursor:
  2535                           
  2536                           	psect	text11
  2537  0288                     __ptext11:	
  2538 ;; *************** function _Lcd_Init *****************
  2539 ;; Defined at:
  2540 ;;		line 61 in file "./lcd.h"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0, pclath, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2554 ;;      Params:         0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0
  2556 ;;      Temps:          2       0       0       0       0
  2557 ;;      Totals:         2       0       0       0       0
  2558 ;;Total ram usage:        2 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; Hardware stack levels required when called: 4
  2561 ;; This function calls:
  2562 ;;		_Lcd_Cmd
  2563 ;;		_Lcd_Port
  2564 ;; This function is called by:
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569  0288                     _Lcd_Init:	
  2570                           ;psect for function _Lcd_Init
  2571                           
  2572  0288                     l1915:	
  2573                           ;incstack = 0
  2574                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2575                           
  2576                           
  2577                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2578  0288  3000               	movlw	0
  2579  0289  120A  118A  2501  120A  118A  	fcall	_Lcd_Port
  2580  028E                     l1917:
  2581                           
  2582                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2583  028E  3082               	movlw	130
  2584  028F  00F7               	movwf	??_Lcd_Init+1
  2585  0290  30DD               	movlw	221
  2586  0291  00F6               	movwf	??_Lcd_Init
  2587  0292                     u1587:
  2588  0292  0BF6               	decfsz	??_Lcd_Init,f
  2589  0293  2A92               	goto	u1587
  2590  0294  0BF7               	decfsz	??_Lcd_Init+1,f
  2591  0295  2A92               	goto	u1587
  2592  0296  2A97               	nop2
  2593  0297                     l1919:
  2594                           
  2595                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2596  0297  3003               	movlw	3
  2597  0298  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2598                           
  2599                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2600  029D  3021               	movlw	33
  2601  029E  00F7               	movwf	??_Lcd_Init+1
  2602  029F  3076               	movlw	118
  2603  02A0  00F6               	movwf	??_Lcd_Init
  2604  02A1                     u1597:
  2605  02A1  0BF6               	decfsz	??_Lcd_Init,f
  2606  02A2  2AA1               	goto	u1597
  2607  02A3  0BF7               	decfsz	??_Lcd_Init+1,f
  2608  02A4  2AA1               	goto	u1597
  2609  02A5  0000               	nop
  2610  02A6                     l1921:
  2611                           
  2612                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2613  02A6  3003               	movlw	3
  2614  02A7  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2615  02AC                     l1923:
  2616                           
  2617                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2618  02AC  3048               	movlw	72
  2619  02AD  00F7               	movwf	??_Lcd_Init+1
  2620  02AE  306C               	movlw	108
  2621  02AF  00F6               	movwf	??_Lcd_Init
  2622  02B0                     u1607:
  2623  02B0  0BF6               	decfsz	??_Lcd_Init,f
  2624  02B1  2AB0               	goto	u1607
  2625  02B2  0BF7               	decfsz	??_Lcd_Init+1,f
  2626  02B3  2AB0               	goto	u1607
  2627  02B4  0000               	nop
  2628                           
  2629                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2630  02B5  3003               	movlw	3
  2631  02B6  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2632                           
  2633                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2634  02BB  3002               	movlw	2
  2635  02BC  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2636                           
  2637                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2638  02C1  3002               	movlw	2
  2639  02C2  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2640                           
  2641                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2642  02C7  3008               	movlw	8
  2643  02C8  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2644                           
  2645                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2646  02CD  3000               	movlw	0
  2647  02CE  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2648                           
  2649                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2650  02D3  300C               	movlw	12
  2651  02D4  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2652                           
  2653                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2654  02D9  3000               	movlw	0
  2655  02DA  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2656                           
  2657                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2658  02DF  3006               	movlw	6
  2659  02E0  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2660  02E5                     l90:
  2661  02E5  0008               	return
  2662  02E6                     __end_of_Lcd_Init:
  2663                           
  2664                           	psect	text12
  2665  056A                     __ptext12:	
  2666 ;; *************** function _Lcd_Clear *****************
  2667 ;; Defined at:
  2668 ;;		line 34 in file "./lcd.h"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  2   80[None  ] int 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2682 ;;      Params:         0       0       0       0       0
  2683 ;;      Locals:         0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0
  2685 ;;      Totals:         0       0       0       0       0
  2686 ;;Total ram usage:        0 bytes
  2687 ;; Hardware stack levels used: 1
  2688 ;; Hardware stack levels required when called: 4
  2689 ;; This function calls:
  2690 ;;		_Lcd_Cmd
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696  056A                     _Lcd_Clear:	
  2697                           ;psect for function _Lcd_Clear
  2698                           
  2699  056A                     l1913:	
  2700                           ;incstack = 0
  2701                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2702                           
  2703                           
  2704                           ;./lcd.h: 36:  Lcd_Cmd(0);
  2705  056A  3000               	movlw	0
  2706  056B  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2707                           
  2708                           ;./lcd.h: 37:  Lcd_Cmd(1);
  2709  0570  3001               	movlw	1
  2710  0571  120A  118A  253E  120A  118A  	fcall	_Lcd_Cmd
  2711  0576                     l81:
  2712  0576  0008               	return
  2713  0577                     __end_of_Lcd_Clear:
  2714                           
  2715                           	psect	text13
  2716  053E                     __ptext13:	
  2717 ;; *************** function _Lcd_Cmd *****************
  2718 ;; Defined at:
  2719 ;;		line 25 in file "./lcd.h"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  a               1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  a               1    5[COMMON] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, pclath, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2733 ;;      Params:         0       0       0       0       0
  2734 ;;      Locals:         1       0       0       0       0
  2735 ;;      Temps:          2       0       0       0       0
  2736 ;;      Totals:         3       0       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 3
  2740 ;; This function calls:
  2741 ;;		_Lcd_Port
  2742 ;; This function is called by:
  2743 ;;		_Lcd_Clear
  2744 ;;		_Lcd_Set_Cursor
  2745 ;;		_Lcd_Init
  2746 ;;		_Lcd_Shift_Right
  2747 ;;		_Lcd_Shift_Left
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751  053E                     _Lcd_Cmd:	
  2752                           ;psect for function _Lcd_Cmd
  2753                           
  2754                           
  2755                           ;incstack = 0
  2756                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2757                           ;Lcd_Cmd@a stored from wreg
  2758  053E  00F5               	movwf	Lcd_Cmd@a
  2759  053F                     l1715:
  2760                           
  2761                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2762  053F  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0540  1303               	bcf	3,6	;RP1=0, select bank0
  2764  0541  1108               	bcf	8,2	;volatile
  2765  0542                     l1717:
  2766                           
  2767                           ;./lcd.h: 28:  Lcd_Port(a);
  2768  0542  0875               	movf	Lcd_Cmd@a,w
  2769  0543  120A  118A  2501  120A  118A  	fcall	_Lcd_Port
  2770  0548                     l1719:
  2771                           
  2772                           ;./lcd.h: 29:  RD3 = 1;
  2773  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2775  054A  1588               	bsf	8,3	;volatile
  2776  054B                     l1721:
  2777                           
  2778                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2779  054B  301A               	movlw	26
  2780  054C  00F4               	movwf	??_Lcd_Cmd+1
  2781  054D  30F8               	movlw	248
  2782  054E  00F3               	movwf	??_Lcd_Cmd
  2783  054F                     u1617:
  2784  054F  0BF3               	decfsz	??_Lcd_Cmd,f
  2785  0550  2D4F               	goto	u1617
  2786  0551  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2787  0552  2D4F               	goto	u1617
  2788  0553  0000               	nop
  2789  0554                     l1723:
  2790                           
  2791                           ;./lcd.h: 31:         RD3 = 0;
  2792  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2793  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2794  0556  1188               	bcf	8,3	;volatile
  2795  0557                     l78:
  2796  0557  0008               	return
  2797  0558                     __end_of_Lcd_Cmd:
  2798                           
  2799                           	psect	text14
  2800  0501                     __ptext14:	
  2801 ;; *************** function _Lcd_Port *****************
  2802 ;; Defined at:
  2803 ;;		line 3 in file "./lcd.h"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  a               1    wreg     unsigned char 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  a               1    2[COMMON] unsigned char 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2817 ;;      Params:         0       0       0       0       0
  2818 ;;      Locals:         1       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0
  2820 ;;      Totals:         1       0       0       0       0
  2821 ;;Total ram usage:        1 bytes
  2822 ;; Hardware stack levels used: 1
  2823 ;; Hardware stack levels required when called: 2
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_Lcd_Cmd
  2828 ;;		_Lcd_Init
  2829 ;;		_Lcd_Write_Char
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833  0501                     _Lcd_Port:	
  2834                           ;psect for function _Lcd_Port
  2835                           
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in _Lcd_Port: [wreg]
  2839                           ;Lcd_Port@a stored from wreg
  2840  0501  00F2               	movwf	Lcd_Port@a
  2841  0502                     l1705:
  2842                           
  2843                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2844  0502  1C72               	btfss	Lcd_Port@a,0
  2845  0503  2D05               	goto	u1151
  2846  0504  2D06               	goto	u1150
  2847  0505                     u1151:
  2848  0505  2D0A               	goto	l67
  2849  0506                     u1150:
  2850  0506                     l1707:
  2851                           
  2852                           ;./lcd.h: 6:   RD4 = 1;
  2853  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0508  1608               	bsf	8,4	;volatile
  2856  0509  2D0D               	goto	l68
  2857  050A                     l67:	
  2858                           ;./lcd.h: 7:  else
  2859                           
  2860                           
  2861                           ;./lcd.h: 8:   RD4 = 0;
  2862  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2863  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2864  050C  1208               	bcf	8,4	;volatile
  2865  050D                     l68:
  2866                           
  2867                           ;./lcd.h: 10:  if(a & 2)
  2868  050D  1CF2               	btfss	Lcd_Port@a,1
  2869  050E  2D10               	goto	u1161
  2870  050F  2D11               	goto	u1160
  2871  0510                     u1161:
  2872  0510  2D13               	goto	l69
  2873  0511                     u1160:
  2874  0511                     l1709:
  2875                           
  2876                           ;./lcd.h: 11:   RD5 = 1;
  2877  0511  1688               	bsf	8,5	;volatile
  2878  0512  2D14               	goto	l70
  2879  0513                     l69:	
  2880                           ;./lcd.h: 12:  else
  2881                           
  2882                           
  2883                           ;./lcd.h: 13:   RD5 = 0;
  2884  0513  1288               	bcf	8,5	;volatile
  2885  0514                     l70:
  2886                           
  2887                           ;./lcd.h: 15:  if(a & 4)
  2888  0514  1D72               	btfss	Lcd_Port@a,2
  2889  0515  2D17               	goto	u1171
  2890  0516  2D18               	goto	u1170
  2891  0517                     u1171:
  2892  0517  2D1A               	goto	l71
  2893  0518                     u1170:
  2894  0518                     l1711:
  2895                           
  2896                           ;./lcd.h: 16:   RD6 = 1;
  2897  0518  1708               	bsf	8,6	;volatile
  2898  0519  2D1B               	goto	l72
  2899  051A                     l71:	
  2900                           ;./lcd.h: 17:  else
  2901                           
  2902                           
  2903                           ;./lcd.h: 18:   RD6 = 0;
  2904  051A  1308               	bcf	8,6	;volatile
  2905  051B                     l72:
  2906                           
  2907                           ;./lcd.h: 20:  if(a & 8)
  2908  051B  1DF2               	btfss	Lcd_Port@a,3
  2909  051C  2D1E               	goto	u1181
  2910  051D  2D1F               	goto	u1180
  2911  051E                     u1181:
  2912  051E  2D21               	goto	l73
  2913  051F                     u1180:
  2914  051F                     l1713:
  2915                           
  2916                           ;./lcd.h: 21:   RD7 = 1;
  2917  051F  1788               	bsf	8,7	;volatile
  2918  0520  2D22               	goto	l75
  2919  0521                     l73:	
  2920                           ;./lcd.h: 22:  else
  2921                           
  2922                           
  2923                           ;./lcd.h: 23:   RD7 = 0;
  2924  0521  1388               	bcf	8,7	;volatile
  2925  0522                     l75:
  2926  0522  0008               	return
  2927  0523                     __end_of_Lcd_Port:
  2928                           
  2929                           	psect	text15
  2930  0465                     __ptext15:	
  2931 ;; *************** function _ContaSegundos *****************
  2932 ;; Defined at:
  2933 ;;		line 150 in file "main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2, status,0, pclath, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2947 ;;      Params:         0       0       0       0       0
  2948 ;;      Locals:         0       0       0       0       0
  2949 ;;      Temps:          2       0       0       0       0
  2950 ;;      Totals:         2       0       0       0       0
  2951 ;;Total ram usage:        2 bytes
  2952 ;; Hardware stack levels used: 1
  2953 ;; Hardware stack levels required when called: 1
  2954 ;; This function calls:
  2955 ;;		_cronometro
  2956 ;; This function is called by:
  2957 ;;		Interrupt level 1
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961  0465                     _ContaSegundos:	
  2962                           ;psect for function _ContaSegundos
  2963                           
  2964  0465                     i1l1649:
  2965                           
  2966                           ;main.c: 152:     if(TMR1IF)
  2967  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0466  1303               	bcf	3,6	;RP1=0, select bank0
  2969  0467  1C0C               	btfss	12,0	;volatile
  2970  0468  2C6A               	goto	u113_21
  2971  0469  2C6B               	goto	u113_20
  2972  046A                     u113_21:
  2973  046A  2C89               	goto	i1l137
  2974  046B                     u113_20:
  2975  046B                     i1l1651:
  2976                           
  2977                           ;main.c: 153:     {;main.c: 154:         PIR1bits.TMR1IF = 0;
  2978  046B  100C               	bcf	12,0	;volatile
  2979  046C                     i1l1653:
  2980                           
  2981                           ;main.c: 155:         TMR1L = 0x95;
  2982  046C  3095               	movlw	149
  2983  046D  008E               	movwf	14	;volatile
  2984                           
  2985                           ;main.c: 156:         TMR1H = 0xE7;
  2986  046E  30E7               	movlw	231
  2987  046F  008F               	movwf	15	;volatile
  2988  0470                     i1l1655:
  2989                           
  2990                           ;main.c: 159:         cronometro();
  2991  0470  120A  118A  2435  120A  118A  	fcall	_cronometro
  2992  0475                     i1l1657:
  2993                           
  2994                           ;main.c: 161:         contador++;
  2995  0475  3001               	movlw	1
  2996  0476  07FA               	addwf	_contador,f
  2997  0477  1803               	skipnc
  2998  0478  0AFB               	incf	_contador+1,f
  2999  0479  3000               	movlw	0
  3000  047A  07FB               	addwf	_contador+1,f
  3001  047B                     i1l1659:
  3002                           
  3003                           ;main.c: 162:         if(contador == 100)
  3004  047B  3064               	movlw	100
  3005  047C  067A               	xorwf	_contador,w
  3006  047D  047B               	iorwf	_contador+1,w
  3007  047E  1D03               	btfss	3,2
  3008  047F  2C81               	goto	u114_21
  3009  0480  2C82               	goto	u114_20
  3010  0481                     u114_21:
  3011  0481  2C89               	goto	i1l137
  3012  0482                     u114_20:
  3013  0482                     i1l1661:
  3014                           
  3015                           ;main.c: 163:         {;main.c: 164:             cronometro();
  3016  0482  120A  118A  2435  120A  118A  	fcall	_cronometro
  3017  0487                     i1l1663:
  3018                           
  3019                           ;main.c: 165:             contador = 0;
  3020  0487  01FA               	clrf	_contador
  3021  0488  01FB               	clrf	_contador+1
  3022  0489                     i1l137:
  3023  0489  0871               	movf	??_ContaSegundos+1,w
  3024  048A  008A               	movwf	10
  3025  048B  0E70               	swapf	??_ContaSegundos,w
  3026  048C  0083               	movwf	3
  3027  048D  0EFE               	swapf	btemp,f
  3028  048E  0E7E               	swapf	btemp,w
  3029  048F  0009               	retfie
  3030  0490                     __end_of_ContaSegundos:
  3031                           
  3032                           	psect	intentry
  3033  0004                     __pintentry:	
  3034                           ;incstack = 0
  3035                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  3036                           
  3037  0004                     interrupt_function:
  3038  007E                     saved_w	set	btemp
  3039  0004  00FE               	movwf	btemp
  3040  0005  0E03               	swapf	3,w
  3041  0006  00F0               	movwf	??_ContaSegundos
  3042  0007  080A               	movf	10,w
  3043  0008  00F1               	movwf	??_ContaSegundos+1
  3044  0009  120A  118A  2C65   	ljmp	_ContaSegundos
  3045                           
  3046                           	psect	text16
  3047  0435                     __ptext16:	
  3048 ;; *************** function _cronometro *****************
  3049 ;; Defined at:
  3050 ;;		line 184 in file "main.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3064 ;;      Params:         0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used: 1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_ContaSegundos
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077  0435                     _cronometro:	
  3078                           ;psect for function _cronometro
  3079                           
  3080  0435                     i1l1535:	
  3081                           ;incstack = 0
  3082                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  3083                           
  3084                           
  3085                           ;main.c: 186:     centesimos++;
  3086  0435  3001               	movlw	1
  3087  0436  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0437  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0438  07BF               	addwf	_centesimos,f
  3090  0439  1803               	skipnc
  3091  043A  0AC0               	incf	_centesimos+1,f
  3092  043B  3000               	movlw	0
  3093  043C  07C0               	addwf	_centesimos+1,f
  3094  043D                     i1l1537:
  3095                           
  3096                           ;main.c: 188:     if(centesimos == 100)
  3097  043D  3064               	movlw	100
  3098  043E  063F               	xorwf	_centesimos,w
  3099  043F  0440               	iorwf	_centesimos+1,w
  3100  0440  1D03               	btfss	3,2
  3101  0441  2C43               	goto	u105_21
  3102  0442  2C44               	goto	u105_20
  3103  0443                     u105_21:
  3104  0443  2C64               	goto	i1l149
  3105  0444                     u105_20:
  3106  0444                     i1l1539:
  3107                           
  3108                           ;main.c: 189:     {;main.c: 190:         centesimos = 0;
  3109  0444  01BF               	clrf	_centesimos
  3110  0445  01C0               	clrf	_centesimos+1
  3111  0446                     i1l1541:
  3112                           
  3113                           ;main.c: 191:         segundos++;
  3114  0446  3001               	movlw	1
  3115  0447  07C1               	addwf	_segundos,f
  3116  0448  1803               	skipnc
  3117  0449  0AC2               	incf	_segundos+1,f
  3118  044A  3000               	movlw	0
  3119  044B  07C2               	addwf	_segundos+1,f
  3120  044C                     i1l1543:
  3121                           
  3122                           ;main.c: 193:         if(segundos == 60)
  3123  044C  303C               	movlw	60
  3124  044D  0641               	xorwf	_segundos,w
  3125  044E  0442               	iorwf	_segundos+1,w
  3126  044F  1D03               	btfss	3,2
  3127  0450  2C52               	goto	u106_21
  3128  0451  2C53               	goto	u106_20
  3129  0452                     u106_21:
  3130  0452  2C64               	goto	i1l149
  3131  0453                     u106_20:
  3132  0453                     i1l1545:
  3133                           
  3134                           ;main.c: 194:         {;main.c: 195:            segundos = 0;
  3135  0453  01C1               	clrf	_segundos
  3136  0454  01C2               	clrf	_segundos+1
  3137  0455                     i1l1547:
  3138                           
  3139                           ;main.c: 196:            minutos++;
  3140  0455  3001               	movlw	1
  3141  0456  07C3               	addwf	_minutos,f
  3142  0457  1803               	skipnc
  3143  0458  0AC4               	incf	_minutos+1,f
  3144  0459  3000               	movlw	0
  3145  045A  07C4               	addwf	_minutos+1,f
  3146  045B                     i1l1549:
  3147                           
  3148                           ;main.c: 198:            if(minutos == 60) minutos = 0;
  3149  045B  303C               	movlw	60
  3150  045C  0643               	xorwf	_minutos,w
  3151  045D  0444               	iorwf	_minutos+1,w
  3152  045E  1D03               	btfss	3,2
  3153  045F  2C61               	goto	u107_21
  3154  0460  2C62               	goto	u107_20
  3155  0461                     u107_21:
  3156  0461  2C64               	goto	i1l149
  3157  0462                     u107_20:
  3158  0462                     i1l1551:
  3159  0462  01C3               	clrf	_minutos
  3160  0463  01C4               	clrf	_minutos+1
  3161  0464                     i1l149:
  3162  0464  0008               	return
  3163  0465                     __end_of_cronometro:
  3164  007E                     btemp	set	126	;btemp
  3165  007E                     wtemp0	set	126
  3166                           
  3167                           	psect	config
  3168                           
  3169                           ;Config register CONFIG @ 0x2007
  3170                           ;	Oscillator Selection bits
  3171                           ;	FOSC = HS, HS oscillator
  3172                           ;	Watchdog Timer Enable bit
  3173                           ;	WDTE = ON, WDT enabled
  3174                           ;	Power-up Timer Enable bit
  3175                           ;	PWRTE = ON, PWRT enabled
  3176                           ;	Brown-out Reset Enable bit
  3177                           ;	BOREN = ON, BOR enabled
  3178                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3179                           ;	LVP = 0x1, unprogrammed default
  3180                           ;	Data EEPROM Memory Code Protection bit
  3181                           ;	CPD = 0x1, unprogrammed default
  3182                           ;	Flash Program Memory Write Enable bits
  3183                           ;	WRT = 0x3, unprogrammed default
  3184                           ;	In-Circuit Debugger Mode bit
  3185                           ;	DEBUG = 0x1, unprogrammed default
  3186                           ;	Flash Program Memory Code Protection bit
  3187                           ;	CP = 0x1, unprogrammed default
  3188  2007                     	org	8199
  3189  2007  3FF6               	dw	16374

Data Sizes:
    Strings     46
    Constant    10
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     29      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _main->_setDQ
    _setDQ->_sprintf
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8024
                                             26 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                      _setCronometro
                              _setDQ
 ---------------------------------------------------------------------------------
 (1) _setDQ                                                1     1      0    3795
                                             25 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3795
                                             25 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2614
                                              6 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     456
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     254
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     725
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     155
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setDQ
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _sprintf

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3B      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Mar 08 18:41:19 2022

                       pc 0002                        l70 0514                        l71 051A  
                      l72 051B                        l73 0521                        l81 0576  
                      l90 02E5                        l75 0522                        l67 050A  
                      l68 050D                        l69 0513                        l93 0434  
                      l78 0557                        l87 033D                        l99 0500  
                      fsr 0004       ___wmul@multiplicand 0074                       l122 0225  
                     l140 04B6                       l143 053D                       l247 003C  
                     l265 0116                       l282 01F1                       l286 04C3  
                     l288 04DB                       l558 0381                       l568 03FB  
                     l739 0569                       _RB0 0030                       _RB1 0031  
                     _RC0 0038                       _RC2 003A                       _RC3 003B  
                     _RD2 0042                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u710 0358                       u630 0560                       u711 0357  
                     u631 055F                       u640 0566                       u705 034A  
                     u641 0565                       u730 0369                       u650 04BD  
                     u731 0368                       u651 04BC                       u725 0359  
                     u750 037D                       u751 037C                       u735 0365  
                     u680 04D7                       u745 0371                       u681 04D6  
                     u665 04C4                       u690 0346                       u691 0345  
                     u675 04CB                       fsr0 0004                       indf 0000  
                    l2001 0240                      l2011 024E                      l2003 0241  
                    l2021 0261                      l2013 024F                      l2005 0245  
                    l1311 04D1                      l1303 04B7                      l2031 027F  
                    l2023 0267                      l2015 0250                      l2007 0246  
                    l1321 0346                      l1313 04D7                      l1305 04B9  
                    l2025 0269                      l2017 0251                      l2009 024B  
                    l1331 0369                      l1323 0349                      l1307 04BD  
                    l2027 026F                      l2019 0258                      l1333 036F  
                    l1325 0350                      l1317 033E                      l1309 04CA  
                    l2029 027C                      l1335 0370                      l1327 0354  
                    l1319 0340                      l1337 0377                      l1329 0358  
                    l2073 004F                      l1339 037D                      l1291 0559  
                    l2075 00B8                      l1293 055A                      l1711 0518  
                    l1295 0560                      l1713 051F                      l1705 0502  
                    l1721 054B                      l1297 0566                      l1801 0033  
                    l1707 0506                      l1723 0554                      l1715 053F  
                    l1731 0418                      l1299 0568                      l1811 0054  
                    l1803 0038                      l1709 0511                      l1717 0542  
                    l1741 042C                      l1733 041B                      l1725 03FD  
                    l1901 01ED                      l1821 0094                      l1813 0064  
                    l1805 003D                      l1719 0548                      l1743 0431  
                    l1735 0420                      l1727 0407                      l1751 03D2  
                    l1831 00CF                      l1815 0068                      l1913 056A  
                    l1921 02A6                      l1737 0423                      l1729 040A  
                    l1761 03F1                      l1753 03D6                      l1745 03C0  
                    l1833 00D3                      l1817 007D                      l1825 00A4  
                    l1809 0041                      l1923 02AC                      l1915 0288  
                    l1771 02FF                      l1739 0429                      l1755 03DA  
                    l1747 03C8                      l1763 03F7                      l1851 010A  
                    l1843 00DE                      l1835 00D7                      l1827 00C3  
                    l1819 0090                      l1931 0523                      l1917 028E  
                    l1781 032A                      l1773 0304                      l1757 03E4  
                    l1749 03CB                      l1861 0135                      l1853 0110  
                    l1837 00DC                      l1829 00CB                      l1925 0490  
                    l1933 052F                      l1941 01F2                      l1919 0297  
                    l1783 032F                      l1775 030A                      l1767 02E9  
                    l1791 04ED                      l1759 03EA                      l1871 0153  
                    l1863 013B                      l1855 0121                      l1847 00FA  
                    l1927 04A8                      l1935 0537                      l1951 01FA  
                    l1943 01F6                      l1785 0335                      l1769 02EE  
                    l1777 0313                      l1793 04F5                      l1881 0175  
                    l1873 0157                      l1865 0142                      l1857 012D  
                    l1849 0104                      l1929 04B0                      l1961 0205  
                    l1953 01FB                      l1945 01F7                      l1779 0319  
                    l1787 04DF                      l1891 0197                      l1883 0181  
                    l1867 0146                      l1875 0164                      l1859 0131  
                    l1795 0021                      l1971 020C                      l1963 0206  
                    l1955 01FC                      l1947 01F8                      l1789 04E2  
                    l1893 01C7                      l1885 0187                      l1877 016A  
                    l1869 014C                      l1797 0026                      l1981 0217  
                    l1973 020F                      l1965 0209                      l1957 01FF  
                    l1949 01F9                      l1895 01CE                      l1887 018E  
                    l1879 0171                      l1799 002C                      l1991 0220  
                    l1983 0218                      l1975 0210                      l1967 020A  
                    l1959 0200                      l1897 01D2                      l1889 0192  
                    l1993 0226                      l1985 0219                      l1977 0213  
                    l1969 020B                      l1899 01DB                      l1995 022C  
                    l1987 021A                      l1979 0214                      l1997 022F  
                    l1989 021B                      l1999 023D                      STR_1 0392  
                    STR_2 03A9                      u1200 03C8                      u1201 03C7  
                    u1300 0500                      u1220 03DA                      u1301 04FF  
                    u1221 03D9                      u1150 0506                      u1230 03E4  
                    u1310 002C                      u1151 0505                      u1231 03E3  
                    u1215 03CC                      u1311 002B                      u1160 0511  
                    u1400 0135                      u1320 0064                      u1161 0510  
                    u1401 0134                      u1321 0063                      u1170 0518  
                    u1250 03F7                      u1410 013B                      u1330 00A4  
                    u1171 0517                      u1251 03F6                      u1235 03E0  
                    u1411 013A                      u1331 00A3                      u1180 051F  
                    u1260 02EE                      u1420 014C                      u1340 00D3  
                    u1500 0245                      u1181 051E                      u1261 02ED  
                    u1245 03EB                      u1421 014B                      u1341 00D2  
                    u1501 0244                      u1430 0163                      u1350 00F9  
                    u1510 0267                      u1431 0162                      u1351 00F8  
                    u1511 0266                      u1280 0319                      u1440 016A  
                    u1360 0104                      u1520 026F                      u1281 0318  
                    u1441 0169                      u1361 0103                      u1521 026E  
                    u1450 0181                      u1370 010A                      u1530 027C  
                    u1275 02F6                      u1195 040D                      u1451 0180  
                    u1371 0109                      u1355 00F5                      u1531 027B  
                    u1460 0187                      u1380 0110                      u1461 0186  
                    u1381 010F                      u1470 01DB                      u1390 0121  
                    u1607 02B0                      u1295 0321                      u1471 01DA  
                    u1391 0120                      u1535 0278                      u1480 01ED  
                    u1617 054F                      u1481 01EC                      u1490 022C  
                    u1395 011D                      u1547 0237                      u1491 022B  
                    u1557 0255                      u1567 041D                      u1577 042E  
                    u1587 0292                      u1597 02A1         ?_Lcd_Write_String 0070  
                    _main 01F2                      btemp 007E                      start 000C  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 0558     __end_of_setCronometro 04B7  
                   ?_main 0070           __end_of___lwdiv 0382                     i1l137 0489  
                   i1l149 0464           __end_of___lwmod 03FC                     _TMR1H 000F  
                   _TMR1L 000E                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088           __end_of_dpowers 0392                     _setDQ 0523  
         __end_of_isdigit 056A                     _valor 003D                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 01F2  
        __end_of_Lcd_Init 02E6          __end_of_Lcd_Port 0523           __initialization 000F  
            __end_of_main 0288                    ??_main 003A                    ?_setDQ 0070  
                  _ADRESH 001E                    _ADRESL 009E                    i1l1541 0446  
                  i1l1551 0462                    i1l1543 044C                    i1l1535 0435  
                  u105_20 0444                    u113_20 046B                    i1l1545 0453  
                  u105_21 0443                    i1l1537 043D                    u113_21 046A  
                  i1l1547 0455                    i1l1539 0444                    i1l1651 046B  
                  i1l1549 045B                    i1l1661 0482                    i1l1653 046C  
                  i1l1663 0487                    i1l1655 0470                    u106_20 0453  
                  u114_20 0482                    u106_21 0452                    u114_21 0481  
                  i1l1657 0475                    i1l1649 0465                    i1l1659 047B  
                  u107_20 0462                    u107_21 0461                 ??_Lcd_Cmd 0073  
                  _TMR1IF 0060                    _TMR1ON 0080                    ___wmul 04B7  
               ??___lwdiv 0076                 ??___lwmod 0024                    _buffer 0045  
               ??_isdigit 0072                    saved_w 007E                 ??_sprintf 002D  
         Lcd_Set_Cursor@a 0020           Lcd_Set_Cursor@b 0076           Lcd_Set_Cursor@y 0022  
         Lcd_Set_Cursor@z 0021   __end_of__initialization 001A         __end_of_Lcd_Clear 0577  
          __pcstackCOMMON 0070             __end_of_setDQ 053E            _Lcd_Set_Cursor 02E6  
          _OPTION_REGbits 0081                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
                 ??_setDQ 0039              sprintf@width 0035                __pbssBANK0 003D  
              __pmaintext 01F2     __end_of_ContaSegundos 0490                   ?___wmul 0072  
              _centesimos 003F                __pintentry 0004    __end_of_Lcd_Set_Cursor 033E  
              ??_Lcd_Init 0076                ??_Lcd_Port 0072                __stringtab 0382  
          _Lcd_Write_Char 03FC                   _Lcd_Cmd 053E                _cronometro 0435  
                 ___lwdiv 033E                   ___lwmod 03C0           ?_Lcd_Set_Cursor 0076  
                 __ptext1 0523                   __ptext2 0490                   __ptext3 001E  
                 __ptext4 0558                   __ptext5 04B7                   __ptext6 03C0  
                 __ptext7 033E                   __ptext8 04DC                   __ptext9 03FC  
               _T1CONbits 0010                   _dpowers 0388                   _isdigit 0558  
                 _minutos 0043                   _sprintf 001E                   clrloop0 0578  
  __end_of_Lcd_Write_Char 0435      end_of_initialization 001A                 Lcd_Port@a 0072  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0022         Lcd_Write_String@i 0020  
             ?_cronometro 0070                 _Lcd_Clear 056A            __end_of___wmul 04DC  
        _Lcd_Write_String 04DC             _setCronometro 0490       start_initialization 000F  
              ?_Lcd_Clear 0070                  ??___wmul 0076           Lcd_Write_Char@a 0076  
         Lcd_Write_Char@y 0075            ?_setCronometro 0070               __pbssCOMMON 007A  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0034               sprintf@prec 0031          ___lwdiv@dividend 0074  
        ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072                  ?___lwmod 0020  
               __pstrings 0382                  ?_isdigit 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0026         interrupt_function 0004            ___wmul@product 0076  
               clear_ram0 0577                  _PIE1bits 008C                  Lcd_Cmd@a 0075  
                _PIR1bits 000C               ??_Lcd_Clear 0076           ??_setCronometro 0039  
              _ADCON0bits 001F               __stringbase 0387                _ADCON1bits 009F  
       ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073                  _Lcd_Init 0288  
                _Lcd_Port 0501  __end_of_Lcd_Write_String 0501              ??_cronometro 0070  
           _ContaSegundos 0465        __end_of__stringtab 0388               _isdigit$833 0072  
              sprintf@val 0032           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
      __end_of_cronometro 0465                  __ptext10 02E6                  __ptext11 0288  
                __ptext12 056A                  __ptext13 053E                  __ptext14 0501  
                __ptext15 0465                  __ptext16 0435                  _contador 007A  
                _segundos 0041            ?_ContaSegundos 0070                _INTCONbits 000B  
                isdigit@c 0073        Lcd_Write_Char@temp 0074                  intlevel1 0000  
               sprintf@ap 0030                 sprintf@sp 0037          ___lwmod@dividend 0022  
               stringcode 0382        Lcd_Set_Cursor@temp 0023                  sprintf@c 0038  
                sprintf@f 0026           ___lwmod@divisor 0020           ___lwmod@counter 0025  
                stringdir 0382                  stringtab 0382           ??_ContaSegundos 0070  
