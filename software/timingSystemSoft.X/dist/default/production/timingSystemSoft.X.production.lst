

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Mon Mar 07 17:47:26 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	strings
   186  049C                     __pstrings:
   187  049C                     stringtab:
   188  049C                     __stringtab:
   189  049C                     stringcode:	
   190                           ;	String table - string pointers are 1 byte each
   191                           
   192  049C                     stringdir:
   193  049C  3004               	movlw	high stringdir
   194  049D  008A               	movwf	10
   195  049E  0804               	movf	4,w
   196  049F  0A84               	incf	4,f
   197  04A0  0782               	addwf	2,f
   198  04A1                     __stringbase:
   199  04A1  3400               	retlw	0
   200  04A2                     __end_of__stringtab:
   201  04A2                     _dpowers:
   202  04A2  3401               	retlw	1
   203  04A3  3400               	retlw	0
   204  04A4  340A               	retlw	10
   205  04A5  3400               	retlw	0
   206  04A6  3464               	retlw	100
   207  04A7  3400               	retlw	0
   208  04A8  34E8               	retlw	232
   209  04A9  3403               	retlw	3
   210  04AA  3410               	retlw	16
   211  04AB  3427               	retlw	39
   212  04AC                     __end_of_dpowers:
   213  000C                     _PIR1bits	set	12
   214  000F                     _TMR1H	set	15
   215  000E                     _TMR1L	set	14
   216  0010                     _T1CONbits	set	16
   217  000B                     _INTCONbits	set	11
   218  0060                     _TMR1IF	set	96
   219  0030                     _RB0	set	48
   220  003B                     _RC3	set	59
   221  003A                     _RC2	set	58
   222  0038                     _RC0	set	56
   223  0043                     _RD3	set	67
   224  0042                     _RD2	set	66
   225  0047                     _RD7	set	71
   226  0046                     _RD6	set	70
   227  0045                     _RD5	set	69
   228  0044                     _RD4	set	68
   229  008C                     _PIE1bits	set	140
   230  0081                     _OPTION_REGbits	set	129
   231  0088                     _TRISD	set	136
   232  0087                     _TRISC	set	135
   233  0086                     _TRISB	set	134
   234  04AC                     STR_1:
   235  04AC  3425               	retlw	37	;'%'
   236  04AD  3430               	retlw	48	;'0'
   237  04AE  3432               	retlw	50	;'2'
   238  04AF  3464               	retlw	100	;'d'
   239  04B0  343A               	retlw	58	;':'
   240  04B1  3425               	retlw	37	;'%'
   241  04B2  3430               	retlw	48	;'0'
   242  04B3  3432               	retlw	50	;'2'
   243  04B4  3464               	retlw	100	;'d'
   244  04B5  343A               	retlw	58	;':'
   245  04B6  3425               	retlw	37	;'%'
   246  04B7  3430               	retlw	48	;'0'
   247  04B8  3432               	retlw	50	;'2'
   248  04B9  3464               	retlw	100	;'d'
   249  04BA  3400               	retlw	0
   250                           
   251                           	psect	cinit
   252  000F                     start_initialization:	
   253                           ; #config settings
   254                           
   255  000F                     __initialization:
   256                           
   257                           ; Clear objects allocated to BITCOMMON
   258  000F  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   259                           
   260                           ; Clear objects allocated to BANK0
   261  0010  1383               	bcf	3,7	;select IRP bank0
   262  0011  303C               	movlw	low __pbssBANK0
   263  0012  0084               	movwf	4
   264  0013  304E               	movlw	low (__pbssBANK0+18)
   265  0014  120A  118A  24E7  120A  118A  	fcall	clear_ram0
   266  0019                     end_of_initialization:	
   267                           ;End of C runtime variable initialization code
   268                           
   269  0019                     __end_of__initialization:
   270  0019  0183               	clrf	3
   271  001A  120A  118A  2AEB   	ljmp	_main	;jump to C main() function
   272                           
   273                           	psect	bitbssCOMMON
   274  03D8                     __pbitbssCOMMON:
   275  03D8                     _inverte:
   276  03D8                     	ds	1
   277                           
   278                           	psect	bssBANK0
   279  003C                     __pbssBANK0:
   280  003C                     _contador:
   281  003C                     	ds	2
   282  003E                     _centesimos:
   283  003E                     	ds	2
   284  0040                     _segundos:
   285  0040                     	ds	2
   286  0042                     _minutos:
   287  0042                     	ds	2
   288  0044                     _buffer:
   289  0044                     	ds	10
   290                           
   291                           	psect	clrtext
   292  04E7                     clear_ram0:	
   293                           ;	Called with FSR containing the base address, and
   294                           ;	W with the last address+1
   295                           
   296  04E7  0064               	clrwdt	;clear the watchdog before getting into this loop
   297  04E8                     clrloop0:
   298  04E8  0180               	clrf	0	;clear RAM location pointed to by FSR
   299  04E9  0A84               	incf	4,f	;increment pointer
   300  04EA  0604               	xorwf	4,w	;XOR with final address
   301  04EB  1903               	btfsc	3,2	;have we reached the end yet?
   302  04EC  3400               	retlw	0	;all done for this memory range, return
   303  04ED  0604               	xorwf	4,w	;XOR again to restore value
   304  04EE  2CE8               	goto	clrloop0	;do the next byte
   305                           
   306                           	psect	cstackCOMMON
   307  0070                     __pcstackCOMMON:
   308  0070                     ?_isdigit:
   309  0070                     ?_setCronometro:	
   310                           ; 1 bit 
   311                           
   312  0070                     ?_cronometro:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ??_cronometro:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_Lcd_Port:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_Lcd_Cmd:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_Lcd_Init:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_Lcd_Write_Char:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Lcd_Write_String:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_main:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_ContaSegundos:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ??_ContaSegundos:	
   340                           ; 1 bytes @ 0x0
   341                           
   342                           
   343                           ; 1 bytes @ 0x0
   344  0070                     	ds	2
   345  0072                     ??_isdigit:
   346  0072                     ??_Lcd_Port:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ?___wmul:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ?___lwdiv:	
   353                           ; 2 bytes @ 0x2
   354                           
   355  0072                     Lcd_Port@a:	
   356                           ; 2 bytes @ 0x2
   357                           
   358  0072                     _isdigit$732:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ___wmul@multiplier:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ___lwdiv@divisor:	
   365                           ; 2 bytes @ 0x2
   366                           
   367                           
   368                           ; 2 bytes @ 0x2
   369  0072                     	ds	1
   370  0073                     ??_Lcd_Cmd:
   371  0073                     ??_Lcd_Write_Char:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     isdigit@c:	
   375                           ; 1 bytes @ 0x3
   376                           
   377                           
   378                           ; 1 bytes @ 0x3
   379  0073                     	ds	1
   380  0074                     Lcd_Write_Char@temp:
   381  0074                     ___wmul@multiplicand:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ___lwdiv@dividend:	
   385                           ; 2 bytes @ 0x4
   386                           
   387                           
   388                           ; 2 bytes @ 0x4
   389  0074                     	ds	1
   390  0075                     Lcd_Cmd@a:
   391  0075                     Lcd_Write_Char@y:	
   392                           ; 1 bytes @ 0x5
   393                           
   394                           
   395                           ; 1 bytes @ 0x5
   396  0075                     	ds	1
   397  0076                     ?_Lcd_Set_Cursor:
   398  0076                     ??_Lcd_Init:	
   399                           ; 1 bytes @ 0x6
   400                           
   401  0076                     ??___wmul:	
   402                           ; 1 bytes @ 0x6
   403                           
   404  0076                     ??___lwdiv:	
   405                           ; 1 bytes @ 0x6
   406                           
   407  0076                     Lcd_Set_Cursor@b:	
   408                           ; 1 bytes @ 0x6
   409                           
   410  0076                     Lcd_Write_Char@a:	
   411                           ; 1 bytes @ 0x6
   412                           
   413  0076                     ___wmul@product:	
   414                           ; 1 bytes @ 0x6
   415                           
   416                           
   417                           ; 2 bytes @ 0x6
   418  0076                     	ds	1
   419  0077                     ??_Lcd_Set_Cursor:
   420  0077                     ??_Lcd_Write_String:	
   421                           ; 1 bytes @ 0x7
   422                           
   423  0077                     ___lwdiv@quotient:	
   424                           ; 1 bytes @ 0x7
   425                           
   426                           
   427                           ; 2 bytes @ 0x7
   428  0077                     	ds	1
   429  0078                     Lcd_Write_String@i:
   430                           
   431                           ; 2 bytes @ 0x8
   432  0078                     	ds	1
   433  0079                     ___lwdiv@counter:
   434                           
   435                           ; 1 bytes @ 0x9
   436  0079                     	ds	1
   437  007A                     ??___lwmod:
   438  007A                     Lcd_Write_String@a:	
   439                           ; 1 bytes @ 0xA
   440                           
   441                           
   442                           ; 1 bytes @ 0xA
   443  007A                     	ds	1
   444                           
   445                           	psect	cstackBANK0
   446  0020                     __pcstackBANK0:
   447  0020                     ?___lwmod:
   448  0020                     Lcd_Set_Cursor@a:	
   449                           ; 2 bytes @ 0x0
   450                           
   451  0020                     ___lwmod@divisor:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 2 bytes @ 0x0
   456  0020                     	ds	1
   457  0021                     Lcd_Set_Cursor@z:
   458                           
   459                           ; 1 bytes @ 0x1
   460  0021                     	ds	1
   461  0022                     Lcd_Set_Cursor@y:
   462  0022                     ___lwmod@dividend:	
   463                           ; 1 bytes @ 0x2
   464                           
   465                           
   466                           ; 2 bytes @ 0x2
   467  0022                     	ds	1
   468  0023                     Lcd_Set_Cursor@temp:
   469                           
   470                           ; 1 bytes @ 0x3
   471  0023                     	ds	1
   472  0024                     ___lwmod@counter:
   473                           
   474                           ; 1 bytes @ 0x4
   475  0024                     	ds	1
   476  0025                     ?_sprintf:
   477  0025                     sprintf@f:	
   478                           ; 2 bytes @ 0x5
   479                           
   480                           
   481                           ; 1 bytes @ 0x5
   482  0025                     	ds	7
   483  002C                     ??_sprintf:
   484                           
   485                           ; 1 bytes @ 0xC
   486  002C                     	ds	3
   487  002F                     sprintf@ap:
   488                           
   489                           ; 1 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     sprintf@prec:
   492                           
   493                           ; 1 bytes @ 0x10
   494  0030                     	ds	1
   495  0031                     sprintf@val:
   496                           
   497                           ; 2 bytes @ 0x11
   498  0031                     	ds	2
   499  0033                     sprintf@flag:
   500                           
   501                           ; 1 bytes @ 0x13
   502  0033                     	ds	1
   503  0034                     sprintf@width:
   504                           
   505                           ; 2 bytes @ 0x14
   506  0034                     	ds	2
   507  0036                     sprintf@sp:
   508                           
   509                           ; 1 bytes @ 0x16
   510  0036                     	ds	1
   511  0037                     sprintf@c:
   512                           
   513                           ; 1 bytes @ 0x17
   514  0037                     	ds	1
   515  0038                     ??_setCronometro:
   516                           
   517                           ; 1 bytes @ 0x18
   518  0038                     	ds	1
   519  0039                     ??_main:
   520                           
   521                           ; 1 bytes @ 0x19
   522  0039                     	ds	3
   523                           
   524                           	psect	maintext
   525  02EB                     __pmaintext:	
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 48 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : B00/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   545 ;;      Params:         0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0
   547 ;;      Temps:          0       3       0       0       0
   548 ;;      Totals:         0       3       0       0       0
   549 ;;Total ram usage:        3 bytes
   550 ;; Hardware stack levels required when called: 6
   551 ;; This function calls:
   552 ;;		_Lcd_Init
   553 ;;		_setCronometro
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559  02EB                     _main:	
   560                           ;psect for function _main
   561                           
   562  02EB                     l1726:	
   563                           ;incstack = 0
   564                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   565                           
   566                           
   567                           ;main.c: 51:     TRISB = 0b11111111;
   568  02EB  30FF               	movlw	255
   569  02EC  1683               	bsf	3,5	;RP0=1, select bank1
   570  02ED  1303               	bcf	3,6	;RP1=0, select bank1
   571  02EE  0086               	movwf	6	;volatile
   572  02EF                     l1728:
   573                           
   574                           ;main.c: 52:     TRISC = 0b00000000;
   575  02EF  0187               	clrf	7	;volatile
   576  02F0                     l1730:
   577                           
   578                           ;main.c: 53:     TRISD = 0b00000000;
   579  02F0  0188               	clrf	8	;volatile
   580  02F1                     l1732:
   581                           
   582                           ;main.c: 56:     OPTION_REGbits.nRBPU = 0;
   583  02F1  1381               	bcf	1,7	;volatile
   584  02F2                     l1734:
   585                           
   586                           ;main.c: 60:     INTCONbits.GIE = 1;
   587  02F2  178B               	bsf	11,7	;volatile
   588  02F3                     l1736:
   589                           
   590                           ;main.c: 61:     INTCONbits.PEIE = 1;
   591  02F3  170B               	bsf	11,6	;volatile
   592  02F4                     l1738:
   593                           
   594                           ;main.c: 62:     PIE1bits.TMR1IE = 1;
   595  02F4  140C               	bsf	12,0	;volatile
   596  02F5                     l1740:
   597                           
   598                           ;main.c: 65:     T1CONbits.TMR1CS = 0;
   599  02F5  1283               	bcf	3,5	;RP0=0, select bank0
   600  02F6  1303               	bcf	3,6	;RP1=0, select bank0
   601  02F7  1090               	bcf	16,1	;volatile
   602  02F8                     l1742:
   603                           
   604                           ;main.c: 66:     T1CONbits.T1CKPS0 = 1;
   605  02F8  1610               	bsf	16,4	;volatile
   606  02F9                     l1744:
   607                           
   608                           ;main.c: 67:     T1CONbits.T1CKPS1 = 1;
   609  02F9  1690               	bsf	16,5	;volatile
   610                           
   611                           ;main.c: 70:     TMR1L = 0x95;
   612  02FA  3095               	movlw	149
   613  02FB  008E               	movwf	14	;volatile
   614                           
   615                           ;main.c: 71:     TMR1H = 0xE7;
   616  02FC  30E7               	movlw	231
   617  02FD  008F               	movwf	15	;volatile
   618  02FE                     l1746:
   619                           
   620                           ;main.c: 73:     T1CONbits.TMR1ON = 1;
   621  02FE  1410               	bsf	16,0	;volatile
   622  02FF                     l1748:
   623                           
   624                           ;main.c: 76:     RC0 = 0;
   625  02FF  1007               	bcf	7,0	;volatile
   626  0300                     l1750:
   627                           
   628                           ;main.c: 77:     RC2 = 0;
   629  0300  1107               	bcf	7,2	;volatile
   630  0301                     l1752:
   631                           
   632                           ;main.c: 78:     RC3 = 0;
   633  0301  1187               	bcf	7,3	;volatile
   634  0302                     l1754:
   635                           
   636                           ;main.c: 80:     Lcd_Init();
   637  0302  120A  118A  21F1  120A  118A  	fcall	_Lcd_Init
   638  0307                     l108:	
   639                           ;main.c: 83:     while(1)
   640                           
   641  0307  0064               	clrwdt	;# 
   642  0308                     l1756:
   643                           
   644                           ;main.c: 86:         if (RB0 == 0)
   645  0308  1283               	bcf	3,5	;RP0=0, select bank0
   646  0309  1303               	bcf	3,6	;RP1=0, select bank0
   647  030A  1806               	btfsc	6,0	;volatile
   648  030B  2B0D               	goto	u1351
   649  030C  2B0E               	goto	u1350
   650  030D                     u1351:
   651  030D  2B22               	goto	l1766
   652  030E                     u1350:
   653  030E                     l1758:
   654                           
   655                           ;main.c: 87:         {;main.c: 88:             RC0 = 1;
   656  030E  1407               	bsf	7,0	;volatile
   657                           
   658                           ;main.c: 89:             RC2 = 1;
   659  030F  1507               	bsf	7,2	;volatile
   660  0310                     l1760:
   661                           
   662                           ;main.c: 91:             _delay((unsigned long)((150)*(20000000/4000.0)));
   663  0310  3004               	movlw	4
   664  0311  1283               	bcf	3,5	;RP0=0, select bank0
   665  0312  1303               	bcf	3,6	;RP1=0, select bank0
   666  0313  00BB               	movwf	??_main+2
   667  0314  30CF               	movlw	207
   668  0315  00BA               	movwf	??_main+1
   669  0316  3001               	movlw	1
   670  0317  00B9               	movwf	??_main
   671  0318                     u1367:
   672  0318  0BB9               	decfsz	??_main,f
   673  0319  2B18               	goto	u1367
   674  031A  0BBA               	decfsz	??_main+1,f
   675  031B  2B18               	goto	u1367
   676  031C  0BBB               	decfsz	??_main+2,f
   677  031D  2B18               	goto	u1367
   678  031E                     l1762:
   679                           
   680                           ;main.c: 92:             RC0 = 0;
   681  031E  1283               	bcf	3,5	;RP0=0, select bank0
   682  031F  1303               	bcf	3,6	;RP1=0, select bank0
   683  0320  1007               	bcf	7,0	;volatile
   684  0321                     l1764:
   685                           
   686                           ;main.c: 93:             RC2 = 0;
   687  0321  1107               	bcf	7,2	;volatile
   688  0322                     l1766:
   689                           
   690                           ;main.c: 97:         setCronometro();
   691  0322  120A  118A  2409  120A  118A  	fcall	_setCronometro
   692  0327  2B07               	goto	l108
   693  0328  120A  118A  280C   	ljmp	start
   694  032B                     __end_of_main:
   695                           
   696                           	psect	text1
   697  0409                     __ptext1:	
   698 ;; *************** function _setCronometro *****************
   699 ;; Defined at:
   700 ;;		line 126 in file "main.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;		None
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   714 ;;      Params:         0       0       0       0       0
   715 ;;      Locals:         0       0       0       0       0
   716 ;;      Temps:          0       1       0       0       0
   717 ;;      Totals:         0       1       0       0       0
   718 ;;Total ram usage:        1 bytes
   719 ;; Hardware stack levels used: 1
   720 ;; Hardware stack levels required when called: 5
   721 ;; This function calls:
   722 ;;		_Lcd_Set_Cursor
   723 ;;		_Lcd_Write_String
   724 ;;		_sprintf
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730  0409                     _setCronometro:	
   731                           ;psect for function _setCronometro
   732                           
   733  0409                     l1720:	
   734                           ;incstack = 0
   735                           ; Regs used in _setCronometro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   736                           
   737                           
   738                           ;main.c: 128:     sprintf(buffer,"%02d:%02d:%02d", minutos, segundos, centesimos);
   739  0409  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   740  040A  1283               	bcf	3,5	;RP0=0, select bank0
   741  040B  1303               	bcf	3,6	;RP1=0, select bank0
   742  040C  00B8               	movwf	??_setCronometro
   743  040D  0838               	movf	??_setCronometro,w
   744  040E  00A5               	movwf	sprintf@f
   745  040F  0843               	movf	_minutos+1,w
   746  0410  00A7               	movwf	?_sprintf+2
   747  0411  0842               	movf	_minutos,w
   748  0412  00A6               	movwf	?_sprintf+1
   749  0413  0841               	movf	_segundos+1,w
   750  0414  00A9               	movwf	?_sprintf+4
   751  0415  0840               	movf	_segundos,w
   752  0416  00A8               	movwf	?_sprintf+3
   753  0417  083F               	movf	_centesimos+1,w
   754  0418  00AB               	movwf	?_sprintf+6
   755  0419  083E               	movf	_centesimos,w
   756  041A  00AA               	movwf	?_sprintf+5
   757  041B  3044               	movlw	(low (_buffer| 0))& (0+255)
   758  041C  120A  118A  201D  120A  118A  	fcall	_sprintf
   759  0421                     l1722:
   760                           
   761                           ;main.c: 129:     Lcd_Set_Cursor(1,5);
   762  0421  3005               	movlw	5
   763  0422  1283               	bcf	3,5	;RP0=0, select bank0
   764  0423  1303               	bcf	3,6	;RP1=0, select bank0
   765  0424  00B8               	movwf	??_setCronometro
   766  0425  0838               	movf	??_setCronometro,w
   767  0426  00F6               	movwf	Lcd_Set_Cursor@b
   768  0427  3001               	movlw	1
   769  0428  120A  118A  224F  120A  118A  	fcall	_Lcd_Set_Cursor
   770  042D                     l1724:
   771                           
   772                           ;main.c: 130:     Lcd_Write_String(buffer);
   773  042D  3044               	movlw	(low (_buffer| 0))& (0+255)
   774  042E  120A  118A  247B  120A  118A  	fcall	_Lcd_Write_String
   775  0433                     l122:
   776  0433  0008               	return
   777  0434                     __end_of_setCronometro:
   778                           
   779                           	psect	text2
   780  001D                     __ptext2:	
   781 ;; *************** function _sprintf *****************
   782 ;; Defined at:
   783 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  sp              1    wreg     PTR unsigned char 
   786 ;;		 -> buffer(10), 
   787 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   788 ;;		 -> STR_1(15), 
   789 ;; Auto vars:     Size  Location     Type
   790 ;;  sp              1   22[BANK0 ] PTR unsigned char 
   791 ;;		 -> buffer(10), 
   792 ;;  tmpval          4    0        struct .
   793 ;;  width           2   20[BANK0 ] int 
   794 ;;  val             2   17[BANK0 ] unsigned int 
   795 ;;  cp              2    0        PTR const unsigned char 
   796 ;;  len             2    0        unsigned int 
   797 ;;  c               1   23[BANK0 ] unsigned char 
   798 ;;  flag            1   19[BANK0 ] unsigned char 
   799 ;;  prec            1   16[BANK0 ] char 
   800 ;;  ap              1   15[BANK0 ] PTR void [1]
   801 ;;		 -> ?_sprintf(2), 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  2    5[BANK0 ] int 
   804 ;; Registers used:
   805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   811 ;;      Params:         0       7       0       0       0
   812 ;;      Locals:         0       9       0       0       0
   813 ;;      Temps:          0       3       0       0       0
   814 ;;      Totals:         0      19       0       0       0
   815 ;;Total ram usage:       19 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 3
   818 ;; This function calls:
   819 ;;		___lwdiv
   820 ;;		___lwmod
   821 ;;		___wmul
   822 ;;		_isdigit
   823 ;; This function is called by:
   824 ;;		_setCronometro
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828  001D                     _sprintf:	
   829                           ;psect for function _sprintf
   830                           
   831                           
   832                           ;incstack = 0
   833                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   834                           ;sprintf@sp stored from wreg
   835  001D  1283               	bcf	3,5	;RP0=0, select bank0
   836  001E  1303               	bcf	3,6	;RP1=0, select bank0
   837  001F  00B6               	movwf	sprintf@sp
   838  0020                     l1602:
   839                           
   840                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   841  0020  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   842  0021  00AC               	movwf	??_sprintf
   843  0022  082C               	movf	??_sprintf,w
   844  0023  00AF               	movwf	sprintf@ap
   845                           
   846                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   847  0024  29DA               	goto	l1706
   848  0025                     l1604:
   849                           
   850                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   851  0025  3025               	movlw	37
   852  0026  0637               	xorwf	sprintf@c,w
   853  0027  1903               	btfsc	3,2
   854  0028  282A               	goto	u1171
   855  0029  282B               	goto	u1170
   856  002A                     u1171:
   857  002A  2837               	goto	l1610
   858  002B                     u1170:
   859  002B                     l1606:
   860                           
   861                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   862  002B  0837               	movf	sprintf@c,w
   863  002C  00AC               	movwf	??_sprintf
   864  002D  0836               	movf	sprintf@sp,w
   865  002E  0084               	movwf	4
   866  002F  082C               	movf	??_sprintf,w
   867  0030  1383               	bcf	3,7	;select IRP bank0
   868  0031  0080               	movwf	0
   869  0032                     l1608:
   870  0032  3001               	movlw	1
   871  0033  00AC               	movwf	??_sprintf
   872  0034  082C               	movf	??_sprintf,w
   873  0035  07B6               	addwf	sprintf@sp,f
   874                           
   875                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
   876  0036  29DA               	goto	l1706
   877  0037                     l1610:
   878                           
   879                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   880  0037  01B4               	clrf	sprintf@width
   881  0038  01B5               	clrf	sprintf@width+1
   882                           
   883                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   884  0039  01B3               	clrf	sprintf@flag
   885  003A  2840               	goto	l1616
   886  003B                     l226:	
   887                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
   888                           
   889                           
   890                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
   891  003B  1533               	bsf	sprintf@flag,2
   892  003C                     l1612:
   893                           
   894                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
   895  003C  3001               	movlw	1
   896  003D  00AC               	movwf	??_sprintf
   897  003E  082C               	movf	??_sprintf,w
   898  003F  07A5               	addwf	sprintf@f,f
   899  0040                     l1616:	
   900                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
   901                           
   902  0040  0825               	movf	sprintf@f,w
   903  0041  0084               	movwf	4
   904  0042  120A  118A  249C  120A  118A  	fcall	stringdir
   905  0047  00AC               	movwf	??_sprintf
   906  0048  01AD               	clrf	??_sprintf+1
   907                           
   908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   909                           ; Switch size 1, requested type "simple"
   910                           ; Number of cases is 1, Range of values is 0 to 0
   911                           ; switch strategies available:
   912                           ; Name         Instructions Cycles
   913                           ; simple_byte            4     3 (average)
   914                           ; direct_byte           11     8 (fixed)
   915                           ; jumptable            260     6 (fixed)
   916                           ;	Chosen strategy is simple_byte
   917  0049  082D               	movf	??_sprintf+1,w
   918  004A  3A00               	xorlw	0	; case 0
   919  004B  1903               	skipnz
   920  004C  284E               	goto	l1808
   921  004D  2853               	goto	l1618
   922  004E                     l1808:
   923                           
   924                           ; Switch size 1, requested type "simple"
   925                           ; Number of cases is 1, Range of values is 48 to 48
   926                           ; switch strategies available:
   927                           ; Name         Instructions Cycles
   928                           ; simple_byte            4     3 (average)
   929                           ; direct_byte           14    11 (fixed)
   930                           ; jumptable            263     9 (fixed)
   931                           ;	Chosen strategy is simple_byte
   932  004E  082C               	movf	??_sprintf,w
   933  004F  3A30               	xorlw	48	; case 48
   934  0050  1903               	skipnz
   935  0051  283B               	goto	l226
   936  0052  2853               	goto	l1618
   937  0053                     l1618:
   938                           
   939                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
   940  0053  0825               	movf	sprintf@f,w
   941  0054  0084               	movwf	4
   942  0055  120A  118A  249C  120A  118A  	fcall	stringdir
   943  005A  120A  118A  24D5  120A  118A  	fcall	_isdigit
   944  005F  1C03               	btfss	3,0
   945  0060  2862               	goto	u1181
   946  0061  2863               	goto	u1180
   947  0062                     u1181:
   948  0062  28A3               	goto	l1632
   949  0063                     u1180:
   950  0063                     l1620:
   951                           
   952                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
   953  0063  1283               	bcf	3,5	;RP0=0, select bank0
   954  0064  1303               	bcf	3,6	;RP1=0, select bank0
   955  0065  01B4               	clrf	sprintf@width
   956  0066  01B5               	clrf	sprintf@width+1
   957  0067                     l1622:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
   960  0067  300A               	movlw	10
   961  0068  00F2               	movwf	___wmul@multiplier
   962  0069  3000               	movlw	0
   963  006A  00F3               	movwf	___wmul@multiplier+1
   964  006B  1283               	bcf	3,5	;RP0=0, select bank0
   965  006C  1303               	bcf	3,6	;RP1=0, select bank0
   966  006D  0835               	movf	sprintf@width+1,w
   967  006E  00F5               	movwf	___wmul@multiplicand+1
   968  006F  0834               	movf	sprintf@width,w
   969  0070  00F4               	movwf	___wmul@multiplicand
   970  0071  120A  118A  2434  120A  118A  	fcall	___wmul
   971  0076  0873               	movf	?___wmul+1,w
   972  0077  1283               	bcf	3,5	;RP0=0, select bank0
   973  0078  1303               	bcf	3,6	;RP1=0, select bank0
   974  0079  00B5               	movwf	sprintf@width+1
   975  007A  0872               	movf	?___wmul,w
   976  007B  00B4               	movwf	sprintf@width
   977  007C                     l1624:
   978                           
   979                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
   980  007C  0825               	movf	sprintf@f,w
   981  007D  0084               	movwf	4
   982  007E  120A  118A  249C  120A  118A  	fcall	stringdir
   983  0083  3ED0               	addlw	208
   984  0084  00AC               	movwf	??_sprintf
   985  0085  30FF               	movlw	255
   986  0086  1803               	skipnc
   987  0087  3000               	movlw	0
   988  0088  00AD               	movwf	??_sprintf+1
   989  0089  082C               	movf	??_sprintf,w
   990  008A  07B4               	addwf	sprintf@width,f
   991  008B  1803               	skipnc
   992  008C  0AB5               	incf	sprintf@width+1,f
   993  008D  082D               	movf	??_sprintf+1,w
   994  008E  07B5               	addwf	sprintf@width+1,f
   995  008F                     l1626:
   996  008F  3001               	movlw	1
   997  0090  00AC               	movwf	??_sprintf
   998  0091  082C               	movf	??_sprintf,w
   999  0092  07A5               	addwf	sprintf@f,f
  1000  0093                     l1628:
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1003  0093  0825               	movf	sprintf@f,w
  1004  0094  0084               	movwf	4
  1005  0095  120A  118A  249C  120A  118A  	fcall	stringdir
  1006  009A  120A  118A  24D5  120A  118A  	fcall	_isdigit
  1007  009F  1803               	btfsc	3,0
  1008  00A0  28A2               	goto	u1191
  1009  00A1  28A3               	goto	u1190
  1010  00A2                     u1191:
  1011  00A2  2867               	goto	l1622
  1012  00A3                     u1190:
  1013  00A3                     l1632:
  1014  00A3  3001               	movlw	1
  1015  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1016  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1017  00A6  07A5               	addwf	sprintf@f,f
  1018  00A7  30FF               	movlw	-1
  1019  00A8  0725               	addwf	sprintf@f,w
  1020  00A9  0084               	movwf	4
  1021  00AA  120A  118A  249C  120A  118A  	fcall	stringdir
  1022  00AF  00B7               	movwf	sprintf@c
  1023  00B0  00AC               	movwf	??_sprintf
  1024  00B1  01AD               	clrf	??_sprintf+1
  1025                           
  1026                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1027                           ; Switch size 1, requested type "simple"
  1028                           ; Number of cases is 1, Range of values is 0 to 0
  1029                           ; switch strategies available:
  1030                           ; Name         Instructions Cycles
  1031                           ; simple_byte            4     3 (average)
  1032                           ; direct_byte           11     8 (fixed)
  1033                           ; jumptable            260     6 (fixed)
  1034                           ;	Chosen strategy is simple_byte
  1035  00B2  082D               	movf	??_sprintf+1,w
  1036  00B3  3A00               	xorlw	0	; case 0
  1037  00B4  1903               	skipnz
  1038  00B5  28B7               	goto	l1810
  1039  00B6  29DA               	goto	l1706
  1040  00B7                     l1810:
  1041                           
  1042                           ; Switch size 1, requested type "simple"
  1043                           ; Number of cases is 3, Range of values is 0 to 105
  1044                           ; switch strategies available:
  1045                           ; Name         Instructions Cycles
  1046                           ; simple_byte           10     6 (average)
  1047                           ; jumptable            260     6 (fixed)
  1048                           ;	Chosen strategy is simple_byte
  1049  00B7  082C               	movf	??_sprintf,w
  1050  00B8  3A00               	xorlw	0	; case 0
  1051  00B9  1903               	skipnz
  1052  00BA  29EC               	goto	l1708
  1053  00BB  3A64               	xorlw	100	; case 100
  1054  00BC  1903               	skipnz
  1055  00BD  28C2               	goto	l1634
  1056  00BE  3A0D               	xorlw	13	; case 105
  1057  00BF  1903               	skipnz
  1058  00C0  28C2               	goto	l1634
  1059  00C1  29DA               	goto	l1706
  1060  00C2                     l1634:
  1061                           
  1062                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1063  00C2  082F               	movf	sprintf@ap,w
  1064  00C3  0084               	movwf	4
  1065  00C4  1383               	bcf	3,7	;select IRP bank0
  1066  00C5  0800               	movf	0,w
  1067  00C6  00B1               	movwf	sprintf@val
  1068  00C7  0A84               	incf	4,f
  1069  00C8  0800               	movf	0,w
  1070  00C9  00B2               	movwf	sprintf@val+1
  1071  00CA                     l1636:
  1072  00CA  3002               	movlw	2
  1073  00CB  00AC               	movwf	??_sprintf
  1074  00CC  082C               	movf	??_sprintf,w
  1075  00CD  07AF               	addwf	sprintf@ap,f
  1076  00CE                     l1638:
  1077                           
  1078                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1079  00CE  1FB2               	btfss	sprintf@val+1,7
  1080  00CF  28D1               	goto	u1201
  1081  00D0  28D2               	goto	u1200
  1082  00D1                     u1201:
  1083  00D1  28DB               	goto	l1644
  1084  00D2                     u1200:
  1085  00D2                     l1640:
  1086                           
  1087                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1088  00D2  3003               	movlw	3
  1089  00D3  00AC               	movwf	??_sprintf
  1090  00D4  082C               	movf	??_sprintf,w
  1091  00D5  04B3               	iorwf	sprintf@flag,f
  1092  00D6                     l1642:
  1093                           
  1094                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1095  00D6  09B1               	comf	sprintf@val,f
  1096  00D7  09B2               	comf	sprintf@val+1,f
  1097  00D8  0AB1               	incf	sprintf@val,f
  1098  00D9  1903               	skipnz
  1099  00DA  0AB2               	incf	sprintf@val+1,f
  1100  00DB                     l1644:
  1101                           
  1102                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1103  00DB  01B7               	clrf	sprintf@c
  1104  00DC  0AB7               	incf	sprintf@c,f
  1105  00DD                     l1650:
  1106                           
  1107                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1108  00DD  0837               	movf	sprintf@c,w
  1109  00DE  00AC               	movwf	??_sprintf
  1110  00DF  072C               	addwf	??_sprintf,w
  1111  00E0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1112  00E1  0084               	movwf	4
  1113  00E2  120A  118A  249C  120A  118A  	fcall	stringdir
  1114  00E7  00AD               	movwf	??_sprintf+1
  1115  00E8  120A  118A  249C  120A  118A  	fcall	stringdir
  1116  00ED  00AE               	movwf	??_sprintf+2
  1117  00EE  082E               	movf	??_sprintf+2,w
  1118  00EF  0232               	subwf	sprintf@val+1,w
  1119  00F0  1D03               	skipz
  1120  00F1  28F4               	goto	u1215
  1121  00F2  082D               	movf	??_sprintf+1,w
  1122  00F3  0231               	subwf	sprintf@val,w
  1123  00F4                     u1215:
  1124  00F4  1803               	skipnc
  1125  00F5  28F7               	goto	u1211
  1126  00F6  28F8               	goto	u1210
  1127  00F7                     u1211:
  1128  00F7  28F9               	goto	l1654
  1129  00F8                     u1210:
  1130  00F8  2903               	goto	l1656
  1131  00F9                     l1654:
  1132  00F9  3001               	movlw	1
  1133  00FA  00AC               	movwf	??_sprintf
  1134  00FB  082C               	movf	??_sprintf,w
  1135  00FC  07B7               	addwf	sprintf@c,f
  1136  00FD  3005               	movlw	5
  1137  00FE  0637               	xorwf	sprintf@c,w
  1138  00FF  1D03               	btfss	3,2
  1139  0100  2902               	goto	u1221
  1140  0101  2903               	goto	u1220
  1141  0102                     u1221:
  1142  0102  28DD               	goto	l1650
  1143  0103                     u1220:
  1144  0103                     l1656:
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1147  0103  0834               	movf	sprintf@width,w
  1148  0104  0435               	iorwf	sprintf@width+1,w
  1149  0105  1903               	btfsc	3,2
  1150  0106  2908               	goto	u1231
  1151  0107  2909               	goto	u1230
  1152  0108                     u1231:
  1153  0108  2915               	goto	l244
  1154  0109                     u1230:
  1155  0109                     l1658:
  1156  0109  0833               	movf	sprintf@flag,w
  1157  010A  3903               	andlw	3
  1158  010B  1903               	btfsc	3,2
  1159  010C  290E               	goto	u1241
  1160  010D  290F               	goto	u1240
  1161  010E                     u1241:
  1162  010E  2915               	goto	l244
  1163  010F                     u1240:
  1164  010F                     l1660:
  1165                           
  1166                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1167  010F  30FF               	movlw	255
  1168  0110  07B4               	addwf	sprintf@width,f
  1169  0111  1803               	skipnc
  1170  0112  0AB5               	incf	sprintf@width+1,f
  1171  0113  30FF               	movlw	255
  1172  0114  07B5               	addwf	sprintf@width+1,f
  1173  0115                     l244:
  1174                           
  1175                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1176  0115  0835               	movf	sprintf@width+1,w
  1177  0116  3A80               	xorlw	128
  1178  0117  3C80               	sublw	128
  1179  0118  1D03               	skipz
  1180  0119  291C               	goto	u1255
  1181  011A  0834               	movf	sprintf@width,w
  1182  011B  0237               	subwf	sprintf@c,w
  1183  011C                     u1255:
  1184  011C  1803               	skipnc
  1185  011D  291F               	goto	u1251
  1186  011E  2920               	goto	u1250
  1187  011F                     u1251:
  1188  011F  292C               	goto	l1664
  1189  0120                     u1250:
  1190  0120                     l1662:
  1191                           
  1192                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1193  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1195  0122  0837               	movf	sprintf@c,w
  1196  0123  00AC               	movwf	??_sprintf
  1197  0124  01AD               	clrf	??_sprintf+1
  1198  0125  082C               	movf	??_sprintf,w
  1199  0126  02B4               	subwf	sprintf@width,f
  1200  0127  082D               	movf	??_sprintf+1,w
  1201  0128  1C03               	skipc
  1202  0129  03B5               	decf	sprintf@width+1,f
  1203  012A  02B5               	subwf	sprintf@width+1,f
  1204  012B  2930               	goto	l1666
  1205  012C                     l1664:
  1206                           
  1207                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1208  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1209  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1210  012E  01B4               	clrf	sprintf@width
  1211  012F  01B5               	clrf	sprintf@width+1
  1212  0130                     l1666:
  1213                           
  1214                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1215  0130  1D33               	btfss	sprintf@flag,2
  1216  0131  2933               	goto	u1261
  1217  0132  2934               	goto	u1260
  1218  0133                     u1261:
  1219  0133  2963               	goto	l1682
  1220  0134                     u1260:
  1221  0134                     l1668:
  1222                           
  1223                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1224  0134  0833               	movf	sprintf@flag,w
  1225  0135  3903               	andlw	3
  1226  0136  1903               	btfsc	3,2
  1227  0137  2939               	goto	u1271
  1228  0138  293A               	goto	u1270
  1229  0139                     u1271:
  1230  0139  2945               	goto	l1674
  1231  013A                     u1270:
  1232  013A                     l1670:
  1233                           
  1234                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1235  013A  302D               	movlw	45
  1236  013B  00AC               	movwf	??_sprintf
  1237  013C  0836               	movf	sprintf@sp,w
  1238  013D  0084               	movwf	4
  1239  013E  082C               	movf	??_sprintf,w
  1240  013F  1383               	bcf	3,7	;select IRP bank0
  1241  0140  0080               	movwf	0
  1242  0141                     l1672:
  1243  0141  3001               	movlw	1
  1244  0142  00AC               	movwf	??_sprintf
  1245  0143  082C               	movf	??_sprintf,w
  1246  0144  07B6               	addwf	sprintf@sp,f
  1247  0145                     l1674:
  1248                           
  1249                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1250  0145  0834               	movf	sprintf@width,w
  1251  0146  0435               	iorwf	sprintf@width+1,w
  1252  0147  1903               	btfsc	3,2
  1253  0148  294A               	goto	u1281
  1254  0149  294B               	goto	u1280
  1255  014A                     u1281:
  1256  014A  2991               	goto	l1696
  1257  014B                     u1280:
  1258  014B                     l1676:
  1259                           
  1260                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1261  014B  3030               	movlw	48
  1262  014C  00AC               	movwf	??_sprintf
  1263  014D  0836               	movf	sprintf@sp,w
  1264  014E  0084               	movwf	4
  1265  014F  082C               	movf	??_sprintf,w
  1266  0150  1383               	bcf	3,7	;select IRP bank0
  1267  0151  0080               	movwf	0
  1268  0152                     l1678:
  1269  0152  3001               	movlw	1
  1270  0153  00AC               	movwf	??_sprintf
  1271  0154  082C               	movf	??_sprintf,w
  1272  0155  07B6               	addwf	sprintf@sp,f
  1273  0156                     l1680:
  1274  0156  30FF               	movlw	255
  1275  0157  07B4               	addwf	sprintf@width,f
  1276  0158  1803               	skipnc
  1277  0159  0AB5               	incf	sprintf@width+1,f
  1278  015A  30FF               	movlw	255
  1279  015B  07B5               	addwf	sprintf@width+1,f
  1280  015C  0834               	movf	sprintf@width,w
  1281  015D  0435               	iorwf	sprintf@width+1,w
  1282  015E  1D03               	btfss	3,2
  1283  015F  2961               	goto	u1291
  1284  0160  2962               	goto	u1290
  1285  0161                     u1291:
  1286  0161  294B               	goto	l1676
  1287  0162                     u1290:
  1288  0162  2991               	goto	l1696
  1289  0163                     l1682:
  1290                           
  1291                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1292  0163  0834               	movf	sprintf@width,w
  1293  0164  0435               	iorwf	sprintf@width+1,w
  1294  0165  1903               	btfsc	3,2
  1295  0166  2968               	goto	u1301
  1296  0167  2969               	goto	u1300
  1297  0168                     u1301:
  1298  0168  2980               	goto	l1690
  1299  0169                     u1300:
  1300  0169                     l1684:
  1301                           
  1302                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1303  0169  3020               	movlw	32
  1304  016A  00AC               	movwf	??_sprintf
  1305  016B  0836               	movf	sprintf@sp,w
  1306  016C  0084               	movwf	4
  1307  016D  082C               	movf	??_sprintf,w
  1308  016E  1383               	bcf	3,7	;select IRP bank0
  1309  016F  0080               	movwf	0
  1310  0170                     l1686:
  1311  0170  3001               	movlw	1
  1312  0171  00AC               	movwf	??_sprintf
  1313  0172  082C               	movf	??_sprintf,w
  1314  0173  07B6               	addwf	sprintf@sp,f
  1315  0174                     l1688:
  1316  0174  30FF               	movlw	255
  1317  0175  07B4               	addwf	sprintf@width,f
  1318  0176  1803               	skipnc
  1319  0177  0AB5               	incf	sprintf@width+1,f
  1320  0178  30FF               	movlw	255
  1321  0179  07B5               	addwf	sprintf@width+1,f
  1322  017A  0834               	movf	sprintf@width,w
  1323  017B  0435               	iorwf	sprintf@width+1,w
  1324  017C  1D03               	btfss	3,2
  1325  017D  297F               	goto	u1311
  1326  017E  2980               	goto	u1310
  1327  017F                     u1311:
  1328  017F  2969               	goto	l1684
  1329  0180                     u1310:
  1330  0180                     l1690:
  1331                           
  1332                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1333  0180  0833               	movf	sprintf@flag,w
  1334  0181  3903               	andlw	3
  1335  0182  1903               	btfsc	3,2
  1336  0183  2985               	goto	u1321
  1337  0184  2986               	goto	u1320
  1338  0185                     u1321:
  1339  0185  2991               	goto	l1696
  1340  0186                     u1320:
  1341  0186                     l1692:
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1344  0186  302D               	movlw	45
  1345  0187  00AC               	movwf	??_sprintf
  1346  0188  0836               	movf	sprintf@sp,w
  1347  0189  0084               	movwf	4
  1348  018A  082C               	movf	??_sprintf,w
  1349  018B  1383               	bcf	3,7	;select IRP bank0
  1350  018C  0080               	movwf	0
  1351  018D                     l1694:
  1352  018D  3001               	movlw	1
  1353  018E  00AC               	movwf	??_sprintf
  1354  018F  082C               	movf	??_sprintf,w
  1355  0190  07B6               	addwf	sprintf@sp,f
  1356  0191                     l1696:
  1357                           
  1358                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1359  0191  0837               	movf	sprintf@c,w
  1360  0192  00AC               	movwf	??_sprintf
  1361  0193  082C               	movf	??_sprintf,w
  1362  0194  00B0               	movwf	sprintf@prec
  1363                           
  1364                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1365  0195  29D1               	goto	l1704
  1366  0196                     l1698:
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1369  0196  300A               	movlw	10
  1370  0197  00A0               	movwf	___lwmod@divisor
  1371  0198  3000               	movlw	0
  1372  0199  00A1               	movwf	___lwmod@divisor+1
  1373  019A  0830               	movf	sprintf@prec,w
  1374  019B  00AC               	movwf	??_sprintf
  1375  019C  072C               	addwf	??_sprintf,w
  1376  019D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1377  019E  0084               	movwf	4
  1378  019F  120A  118A  249C  120A  118A  	fcall	stringdir
  1379  01A4  00F2               	movwf	___lwdiv@divisor
  1380  01A5  120A  118A  249C  120A  118A  	fcall	stringdir
  1381  01AA  00F3               	movwf	___lwdiv@divisor+1
  1382  01AB  0832               	movf	sprintf@val+1,w
  1383  01AC  00F5               	movwf	___lwdiv@dividend+1
  1384  01AD  0831               	movf	sprintf@val,w
  1385  01AE  00F4               	movwf	___lwdiv@dividend
  1386  01AF  120A  118A  22A7  120A  118A  	fcall	___lwdiv
  1387  01B4  0873               	movf	?___lwdiv+1,w
  1388  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1389  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1390  01B7  00A3               	movwf	___lwmod@dividend+1
  1391  01B8  0872               	movf	?___lwdiv,w
  1392  01B9  00A2               	movwf	___lwmod@dividend
  1393  01BA  120A  118A  232B  120A  118A  	fcall	___lwmod
  1394  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1395  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1396  01C1  0820               	movf	?___lwmod,w
  1397  01C2  3E30               	addlw	48
  1398  01C3  00AD               	movwf	??_sprintf+1
  1399  01C4  082D               	movf	??_sprintf+1,w
  1400  01C5  00B7               	movwf	sprintf@c
  1401  01C6                     l1700:
  1402                           
  1403                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1404  01C6  0837               	movf	sprintf@c,w
  1405  01C7  00AC               	movwf	??_sprintf
  1406  01C8  0836               	movf	sprintf@sp,w
  1407  01C9  0084               	movwf	4
  1408  01CA  082C               	movf	??_sprintf,w
  1409  01CB  1383               	bcf	3,7	;select IRP bank0
  1410  01CC  0080               	movwf	0
  1411  01CD                     l1702:
  1412  01CD  3001               	movlw	1
  1413  01CE  00AC               	movwf	??_sprintf
  1414  01CF  082C               	movf	??_sprintf,w
  1415  01D0  07B6               	addwf	sprintf@sp,f
  1416  01D1                     l1704:
  1417                           
  1418                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1419  01D1  30FF               	movlw	255
  1420  01D2  00AC               	movwf	??_sprintf
  1421  01D3  082C               	movf	??_sprintf,w
  1422  01D4  07B0               	addwf	sprintf@prec,f
  1423  01D5  0A30               	incf	sprintf@prec,w
  1424  01D6  1D03               	btfss	3,2
  1425  01D7  29D9               	goto	u1331
  1426  01D8  29DA               	goto	u1330
  1427  01D9                     u1331:
  1428  01D9  2996               	goto	l1698
  1429  01DA                     u1330:
  1430  01DA                     l1706:
  1431                           
  1432                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1433  01DA  3001               	movlw	1
  1434  01DB  07A5               	addwf	sprintf@f,f
  1435  01DC  30FF               	movlw	-1
  1436  01DD  0725               	addwf	sprintf@f,w
  1437  01DE  0084               	movwf	4
  1438  01DF  120A  118A  249C  120A  118A  	fcall	stringdir
  1439  01E4  00AC               	movwf	??_sprintf
  1440  01E5  082C               	movf	??_sprintf,w
  1441  01E6  00B7               	movwf	sprintf@c
  1442  01E7  0837               	movf	sprintf@c,w
  1443  01E8  1D03               	btfss	3,2
  1444  01E9  29EB               	goto	u1341
  1445  01EA  29EC               	goto	u1340
  1446  01EB                     u1341:
  1447  01EB  2825               	goto	l1604
  1448  01EC                     u1340:
  1449  01EC                     l1708:
  1450                           
  1451                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1452  01EC  0836               	movf	sprintf@sp,w
  1453  01ED  0084               	movwf	4
  1454  01EE  1383               	bcf	3,7	;select IRP bank0
  1455  01EF  0180               	clrf	0
  1456  01F0                     l261:
  1457  01F0  0008               	return
  1458  01F1                     __end_of_sprintf:
  1459                           
  1460                           	psect	text3
  1461  04D5                     __ptext3:	
  1462 ;; *************** function _isdigit *****************
  1463 ;; Defined at:
  1464 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  c               1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  c               1    3[COMMON] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1478 ;;      Params:         0       0       0       0       0
  1479 ;;      Locals:         2       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0
  1481 ;;      Totals:         2       0       0       0       0
  1482 ;;Total ram usage:        2 bytes
  1483 ;; Hardware stack levels used: 1
  1484 ;; Hardware stack levels required when called: 2
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_sprintf
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492  04D5                     _isdigit:	
  1493                           ;psect for function _isdigit
  1494                           
  1495                           
  1496                           ;incstack = 0
  1497                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1498                           ;isdigit@c stored from wreg
  1499  04D5  00F3               	movwf	isdigit@c
  1500  04D6                     l1218:
  1501  04D6  01F2               	clrf	_isdigit$732
  1502  04D7                     l1220:
  1503  04D7  303A               	movlw	58
  1504  04D8  0273               	subwf	isdigit@c,w
  1505  04D9  1803               	skipnc
  1506  04DA  2CDC               	goto	u611
  1507  04DB  2CDD               	goto	u610
  1508  04DC                     u611:
  1509  04DC  2CE5               	goto	l1226
  1510  04DD                     u610:
  1511  04DD                     l1222:
  1512  04DD  3030               	movlw	48
  1513  04DE  0273               	subwf	isdigit@c,w
  1514  04DF  1C03               	skipc
  1515  04E0  2CE2               	goto	u621
  1516  04E1  2CE3               	goto	u620
  1517  04E2                     u621:
  1518  04E2  2CE5               	goto	l1226
  1519  04E3                     u620:
  1520  04E3                     l1224:
  1521  04E3  01F2               	clrf	_isdigit$732
  1522  04E4  0AF2               	incf	_isdigit$732,f
  1523  04E5                     l1226:
  1524  04E5  0C72               	rrf	_isdigit$732,w
  1525  04E6                     l718:
  1526  04E6  0008               	return
  1527  04E7                     __end_of_isdigit:
  1528                           
  1529                           	psect	text4
  1530  0434                     __ptext4:	
  1531 ;; *************** function ___wmul *****************
  1532 ;; Defined at:
  1533 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  multiplier      2    2[COMMON] unsigned int 
  1536 ;;  multiplicand    2    4[COMMON] unsigned int 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  product         2    6[COMMON] unsigned int 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  2    2[COMMON] unsigned int 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1548 ;;      Params:         4       0       0       0       0
  1549 ;;      Locals:         2       0       0       0       0
  1550 ;;      Temps:          0       0       0       0       0
  1551 ;;      Totals:         6       0       0       0       0
  1552 ;;Total ram usage:        6 bytes
  1553 ;; Hardware stack levels used: 1
  1554 ;; Hardware stack levels required when called: 2
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_sprintf
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562  0434                     ___wmul:	
  1563                           ;psect for function ___wmul
  1564                           
  1565  0434                     l1230:	
  1566                           ;incstack = 0
  1567                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1568                           
  1569  0434  01F6               	clrf	___wmul@product
  1570  0435  01F7               	clrf	___wmul@product+1
  1571  0436                     l1232:
  1572  0436  1C72               	btfss	___wmul@multiplier,0
  1573  0437  2C39               	goto	u631
  1574  0438  2C3A               	goto	u630
  1575  0439                     u631:
  1576  0439  2C40               	goto	l265
  1577  043A                     u630:
  1578  043A                     l1234:
  1579  043A  0874               	movf	___wmul@multiplicand,w
  1580  043B  07F6               	addwf	___wmul@product,f
  1581  043C  1803               	skipnc
  1582  043D  0AF7               	incf	___wmul@product+1,f
  1583  043E  0875               	movf	___wmul@multiplicand+1,w
  1584  043F  07F7               	addwf	___wmul@product+1,f
  1585  0440                     l265:
  1586  0440  3001               	movlw	1
  1587  0441                     u645:
  1588  0441  1003               	clrc
  1589  0442  0DF4               	rlf	___wmul@multiplicand,f
  1590  0443  0DF5               	rlf	___wmul@multiplicand+1,f
  1591  0444  3EFF               	addlw	-1
  1592  0445  1D03               	skipz
  1593  0446  2C41               	goto	u645
  1594  0447                     l1236:
  1595  0447  3001               	movlw	1
  1596  0448                     u655:
  1597  0448  1003               	clrc
  1598  0449  0CF3               	rrf	___wmul@multiplier+1,f
  1599  044A  0CF2               	rrf	___wmul@multiplier,f
  1600  044B  3EFF               	addlw	-1
  1601  044C  1D03               	skipz
  1602  044D  2C48               	goto	u655
  1603  044E                     l1238:
  1604  044E  0872               	movf	___wmul@multiplier,w
  1605  044F  0473               	iorwf	___wmul@multiplier+1,w
  1606  0450  1D03               	btfss	3,2
  1607  0451  2C53               	goto	u661
  1608  0452  2C54               	goto	u660
  1609  0453                     u661:
  1610  0453  2C36               	goto	l1232
  1611  0454                     u660:
  1612  0454                     l1240:
  1613  0454  0877               	movf	___wmul@product+1,w
  1614  0455  00F3               	movwf	?___wmul+1
  1615  0456  0876               	movf	___wmul@product,w
  1616  0457  00F2               	movwf	?___wmul
  1617  0458                     l267:
  1618  0458  0008               	return
  1619  0459                     __end_of___wmul:
  1620                           
  1621                           	psect	text5
  1622  032B                     __ptext5:	
  1623 ;; *************** function ___lwmod *****************
  1624 ;; Defined at:
  1625 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  divisor         2    0[BANK0 ] unsigned int 
  1628 ;;  dividend        2    2[BANK0 ] unsigned int 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  counter         1    4[BANK0 ] unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  2    0[BANK0 ] unsigned int 
  1633 ;; Registers used:
  1634 ;;		wreg, status,2, status,0
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1640 ;;      Params:         0       4       0       0       0
  1641 ;;      Locals:         0       1       0       0       0
  1642 ;;      Temps:          1       0       0       0       0
  1643 ;;      Totals:         1       5       0       0       0
  1644 ;;Total ram usage:        6 bytes
  1645 ;; Hardware stack levels used: 1
  1646 ;; Hardware stack levels required when called: 2
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_sprintf
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654  032B                     ___lwmod:	
  1655                           ;psect for function ___lwmod
  1656                           
  1657  032B                     l1580:	
  1658                           ;incstack = 0
  1659                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1660                           
  1661  032B  1283               	bcf	3,5	;RP0=0, select bank0
  1662  032C  1303               	bcf	3,6	;RP1=0, select bank0
  1663  032D  0820               	movf	___lwmod@divisor,w
  1664  032E  0421               	iorwf	___lwmod@divisor+1,w
  1665  032F  1903               	btfsc	3,2
  1666  0330  2B32               	goto	u1111
  1667  0331  2B33               	goto	u1110
  1668  0332                     u1111:
  1669  0332  2B62               	goto	l1598
  1670  0333                     u1110:
  1671  0333                     l1582:
  1672  0333  01A4               	clrf	___lwmod@counter
  1673  0334  0AA4               	incf	___lwmod@counter,f
  1674  0335  2B41               	goto	l1588
  1675  0336                     l1584:
  1676  0336  3001               	movlw	1
  1677  0337                     u1125:
  1678  0337  1003               	clrc
  1679  0338  0DA0               	rlf	___lwmod@divisor,f
  1680  0339  0DA1               	rlf	___lwmod@divisor+1,f
  1681  033A  3EFF               	addlw	-1
  1682  033B  1D03               	skipz
  1683  033C  2B37               	goto	u1125
  1684  033D                     l1586:
  1685  033D  3001               	movlw	1
  1686  033E  00FA               	movwf	??___lwmod
  1687  033F  087A               	movf	??___lwmod,w
  1688  0340  07A4               	addwf	___lwmod@counter,f
  1689  0341                     l1588:
  1690  0341  1FA1               	btfss	___lwmod@divisor+1,7
  1691  0342  2B44               	goto	u1131
  1692  0343  2B45               	goto	u1130
  1693  0344                     u1131:
  1694  0344  2B36               	goto	l1584
  1695  0345                     u1130:
  1696  0345                     l1590:
  1697  0345  0821               	movf	___lwmod@divisor+1,w
  1698  0346  0223               	subwf	___lwmod@dividend+1,w
  1699  0347  1D03               	skipz
  1700  0348  2B4B               	goto	u1145
  1701  0349  0820               	movf	___lwmod@divisor,w
  1702  034A  0222               	subwf	___lwmod@dividend,w
  1703  034B                     u1145:
  1704  034B  1C03               	skipc
  1705  034C  2B4E               	goto	u1141
  1706  034D  2B4F               	goto	u1140
  1707  034E                     u1141:
  1708  034E  2B55               	goto	l1594
  1709  034F                     u1140:
  1710  034F                     l1592:
  1711  034F  0820               	movf	___lwmod@divisor,w
  1712  0350  02A2               	subwf	___lwmod@dividend,f
  1713  0351  0821               	movf	___lwmod@divisor+1,w
  1714  0352  1C03               	skipc
  1715  0353  03A3               	decf	___lwmod@dividend+1,f
  1716  0354  02A3               	subwf	___lwmod@dividend+1,f
  1717  0355                     l1594:
  1718  0355  3001               	movlw	1
  1719  0356                     u1155:
  1720  0356  1003               	clrc
  1721  0357  0CA1               	rrf	___lwmod@divisor+1,f
  1722  0358  0CA0               	rrf	___lwmod@divisor,f
  1723  0359  3EFF               	addlw	-1
  1724  035A  1D03               	skipz
  1725  035B  2B56               	goto	u1155
  1726  035C                     l1596:
  1727  035C  3001               	movlw	1
  1728  035D  02A4               	subwf	___lwmod@counter,f
  1729  035E  1D03               	btfss	3,2
  1730  035F  2B61               	goto	u1161
  1731  0360  2B62               	goto	u1160
  1732  0361                     u1161:
  1733  0361  2B45               	goto	l1590
  1734  0362                     u1160:
  1735  0362                     l1598:
  1736  0362  0823               	movf	___lwmod@dividend+1,w
  1737  0363  00A1               	movwf	?___lwmod+1
  1738  0364  0822               	movf	___lwmod@dividend,w
  1739  0365  00A0               	movwf	?___lwmod
  1740  0366                     l547:
  1741  0366  0008               	return
  1742  0367                     __end_of___lwmod:
  1743                           
  1744                           	psect	text6
  1745  02A7                     __ptext6:	
  1746 ;; *************** function ___lwdiv *****************
  1747 ;; Defined at:
  1748 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  divisor         2    2[COMMON] unsigned int 
  1751 ;;  dividend        2    4[COMMON] unsigned int 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  quotient        2    7[COMMON] unsigned int 
  1754 ;;  counter         1    9[COMMON] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  2    2[COMMON] unsigned int 
  1757 ;; Registers used:
  1758 ;;		wreg, status,2, status,0
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1764 ;;      Params:         4       0       0       0       0
  1765 ;;      Locals:         3       0       0       0       0
  1766 ;;      Temps:          1       0       0       0       0
  1767 ;;      Totals:         8       0       0       0       0
  1768 ;;Total ram usage:        8 bytes
  1769 ;; Hardware stack levels used: 1
  1770 ;; Hardware stack levels required when called: 2
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_sprintf
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778  02A7                     ___lwdiv:	
  1779                           ;psect for function ___lwdiv
  1780                           
  1781  02A7                     l1244:	
  1782                           ;incstack = 0
  1783                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1784                           
  1785  02A7  01F7               	clrf	___lwdiv@quotient
  1786  02A8  01F8               	clrf	___lwdiv@quotient+1
  1787  02A9                     l1246:
  1788  02A9  0872               	movf	___lwdiv@divisor,w
  1789  02AA  0473               	iorwf	___lwdiv@divisor+1,w
  1790  02AB  1903               	btfsc	3,2
  1791  02AC  2AAE               	goto	u671
  1792  02AD  2AAF               	goto	u670
  1793  02AE                     u671:
  1794  02AE  2AE6               	goto	l1266
  1795  02AF                     u670:
  1796  02AF                     l1248:
  1797  02AF  01F9               	clrf	___lwdiv@counter
  1798  02B0  0AF9               	incf	___lwdiv@counter,f
  1799  02B1  2ABD               	goto	l1254
  1800  02B2                     l1250:
  1801  02B2  3001               	movlw	1
  1802  02B3                     u685:
  1803  02B3  1003               	clrc
  1804  02B4  0DF2               	rlf	___lwdiv@divisor,f
  1805  02B5  0DF3               	rlf	___lwdiv@divisor+1,f
  1806  02B6  3EFF               	addlw	-1
  1807  02B7  1D03               	skipz
  1808  02B8  2AB3               	goto	u685
  1809  02B9                     l1252:
  1810  02B9  3001               	movlw	1
  1811  02BA  00F6               	movwf	??___lwdiv
  1812  02BB  0876               	movf	??___lwdiv,w
  1813  02BC  07F9               	addwf	___lwdiv@counter,f
  1814  02BD                     l1254:
  1815  02BD  1FF3               	btfss	___lwdiv@divisor+1,7
  1816  02BE  2AC0               	goto	u691
  1817  02BF  2AC1               	goto	u690
  1818  02C0                     u691:
  1819  02C0  2AB2               	goto	l1250
  1820  02C1                     u690:
  1821  02C1                     l1256:
  1822  02C1  3001               	movlw	1
  1823  02C2                     u705:
  1824  02C2  1003               	clrc
  1825  02C3  0DF7               	rlf	___lwdiv@quotient,f
  1826  02C4  0DF8               	rlf	___lwdiv@quotient+1,f
  1827  02C5  3EFF               	addlw	-1
  1828  02C6  1D03               	skipz
  1829  02C7  2AC2               	goto	u705
  1830  02C8  0873               	movf	___lwdiv@divisor+1,w
  1831  02C9  0275               	subwf	___lwdiv@dividend+1,w
  1832  02CA  1D03               	skipz
  1833  02CB  2ACE               	goto	u715
  1834  02CC  0872               	movf	___lwdiv@divisor,w
  1835  02CD  0274               	subwf	___lwdiv@dividend,w
  1836  02CE                     u715:
  1837  02CE  1C03               	skipc
  1838  02CF  2AD1               	goto	u711
  1839  02D0  2AD2               	goto	u710
  1840  02D1                     u711:
  1841  02D1  2AD9               	goto	l1262
  1842  02D2                     u710:
  1843  02D2                     l1258:
  1844  02D2  0872               	movf	___lwdiv@divisor,w
  1845  02D3  02F4               	subwf	___lwdiv@dividend,f
  1846  02D4  0873               	movf	___lwdiv@divisor+1,w
  1847  02D5  1C03               	skipc
  1848  02D6  03F5               	decf	___lwdiv@dividend+1,f
  1849  02D7  02F5               	subwf	___lwdiv@dividend+1,f
  1850  02D8                     l1260:
  1851  02D8  1477               	bsf	___lwdiv@quotient,0
  1852  02D9                     l1262:
  1853  02D9  3001               	movlw	1
  1854  02DA                     u725:
  1855  02DA  1003               	clrc
  1856  02DB  0CF3               	rrf	___lwdiv@divisor+1,f
  1857  02DC  0CF2               	rrf	___lwdiv@divisor,f
  1858  02DD  3EFF               	addlw	-1
  1859  02DE  1D03               	skipz
  1860  02DF  2ADA               	goto	u725
  1861  02E0                     l1264:
  1862  02E0  3001               	movlw	1
  1863  02E1  02F9               	subwf	___lwdiv@counter,f
  1864  02E2  1D03               	btfss	3,2
  1865  02E3  2AE5               	goto	u731
  1866  02E4  2AE6               	goto	u730
  1867  02E5                     u731:
  1868  02E5  2AC1               	goto	l1256
  1869  02E6                     u730:
  1870  02E6                     l1266:
  1871  02E6  0878               	movf	___lwdiv@quotient+1,w
  1872  02E7  00F3               	movwf	?___lwdiv+1
  1873  02E8  0877               	movf	___lwdiv@quotient,w
  1874  02E9  00F2               	movwf	?___lwdiv
  1875  02EA                     l537:
  1876  02EA  0008               	return
  1877  02EB                     __end_of___lwdiv:
  1878                           
  1879                           	psect	text7
  1880  047B                     __ptext7:	
  1881 ;; *************** function _Lcd_Write_String *****************
  1882 ;; Defined at:
  1883 ;;		line 96 in file "./lcd.h"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  a               1    wreg     PTR unsigned char 
  1886 ;;		 -> buffer(10), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  a               1   10[COMMON] PTR unsigned char 
  1889 ;;		 -> buffer(10), 
  1890 ;;  i               2    8[COMMON] int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1900 ;;      Params:         0       0       0       0       0
  1901 ;;      Locals:         3       0       0       0       0
  1902 ;;      Temps:          1       0       0       0       0
  1903 ;;      Totals:         4       0       0       0       0
  1904 ;;Total ram usage:        4 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 4
  1907 ;; This function calls:
  1908 ;;		_Lcd_Write_Char
  1909 ;; This function is called by:
  1910 ;;		_setCronometro
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914  047B                     _Lcd_Write_String:	
  1915                           ;psect for function _Lcd_Write_String
  1916                           
  1917                           
  1918                           ;incstack = 0
  1919                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1920                           ;Lcd_Write_String@a stored from wreg
  1921  047B  00FA               	movwf	Lcd_Write_String@a
  1922  047C                     l1312:
  1923                           
  1924                           ;./lcd.h: 96: void Lcd_Write_String(char *a);./lcd.h: 97: {;./lcd.h: 98:  int i;;./lcd.h
      +                          : 99:  for(i=0;a[i]!='\0';i++)
  1925  047C  01F8               	clrf	Lcd_Write_String@i
  1926  047D  01F9               	clrf	Lcd_Write_String@i+1
  1927  047E  2C90               	goto	l1318
  1928  047F                     l1314:
  1929                           
  1930                           ;./lcd.h: 100:     Lcd_Write_Char(a[i]);
  1931  047F  0878               	movf	Lcd_Write_String@i,w
  1932  0480  077A               	addwf	Lcd_Write_String@a,w
  1933  0481  00F7               	movwf	??_Lcd_Write_String
  1934  0482  0877               	movf	??_Lcd_Write_String,w
  1935  0483  0084               	movwf	4
  1936  0484  0800               	movf	0,w
  1937  0485  120A  118A  2367  120A  118A  	fcall	_Lcd_Write_Char
  1938  048A                     l1316:
  1939  048A  3001               	movlw	1
  1940  048B  07F8               	addwf	Lcd_Write_String@i,f
  1941  048C  1803               	skipnc
  1942  048D  0AF9               	incf	Lcd_Write_String@i+1,f
  1943  048E  3000               	movlw	0
  1944  048F  07F9               	addwf	Lcd_Write_String@i+1,f
  1945  0490                     l1318:
  1946  0490  0878               	movf	Lcd_Write_String@i,w
  1947  0491  077A               	addwf	Lcd_Write_String@a,w
  1948  0492  00F7               	movwf	??_Lcd_Write_String
  1949  0493  0877               	movf	??_Lcd_Write_String,w
  1950  0494  0084               	movwf	4
  1951  0495  1383               	bcf	3,7	;select IRP bank0
  1952  0496  0800               	movf	0,w
  1953  0497  1D03               	btfss	3,2
  1954  0498  2C9A               	goto	u841
  1955  0499  2C9B               	goto	u840
  1956  049A                     u841:
  1957  049A  2C7F               	goto	l1314
  1958  049B                     u840:
  1959  049B                     l85:
  1960  049B  0008               	return
  1961  049C                     __end_of_Lcd_Write_String:
  1962                           
  1963                           	psect	text8
  1964  0367                     __ptext8:	
  1965 ;; *************** function _Lcd_Write_Char *****************
  1966 ;; Defined at:
  1967 ;;		line 80 in file "./lcd.h"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  a               1    wreg     unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  a               1    6[COMMON] unsigned char 
  1972 ;;  y               1    5[COMMON] unsigned char 
  1973 ;;  temp            1    4[COMMON] unsigned char 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg, status,2, status,0, pclath, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1983 ;;      Params:         0       0       0       0       0
  1984 ;;      Locals:         3       0       0       0       0
  1985 ;;      Temps:          1       0       0       0       0
  1986 ;;      Totals:         4       0       0       0       0
  1987 ;;Total ram usage:        4 bytes
  1988 ;; Hardware stack levels used: 1
  1989 ;; Hardware stack levels required when called: 3
  1990 ;; This function calls:
  1991 ;;		_Lcd_Port
  1992 ;; This function is called by:
  1993 ;;		_Lcd_Write_String
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997  0367                     _Lcd_Write_Char:	
  1998                           ;psect for function _Lcd_Write_Char
  1999                           
  2000                           
  2001                           ;incstack = 0
  2002                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2003                           ;Lcd_Write_Char@a stored from wreg
  2004  0367  00F6               	movwf	Lcd_Write_Char@a
  2005  0368                     l1198:
  2006                           
  2007                           ;./lcd.h: 80: void Lcd_Write_Char(char a);./lcd.h: 81: {;./lcd.h: 82:    char temp,y;;./
      +                          lcd.h: 83:    temp = a&0x0F;
  2008  0368  0876               	movf	Lcd_Write_Char@a,w
  2009  0369  390F               	andlw	15
  2010  036A  00F3               	movwf	??_Lcd_Write_Char
  2011  036B  0873               	movf	??_Lcd_Write_Char,w
  2012  036C  00F4               	movwf	Lcd_Write_Char@temp
  2013                           
  2014                           ;./lcd.h: 84:    y = a&0xF0;
  2015  036D  0876               	movf	Lcd_Write_Char@a,w
  2016  036E  39F0               	andlw	240
  2017  036F  00F3               	movwf	??_Lcd_Write_Char
  2018  0370  0873               	movf	??_Lcd_Write_Char,w
  2019  0371  00F5               	movwf	Lcd_Write_Char@y
  2020  0372                     l1200:
  2021                           
  2022                           ;./lcd.h: 85:    RD2 = 1;
  2023  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0374  1508               	bsf	8,2	;volatile
  2026  0375                     l1202:
  2027                           
  2028                           ;./lcd.h: 86:    Lcd_Port(y>>4);
  2029  0375  0875               	movf	Lcd_Write_Char@y,w
  2030  0376  00F3               	movwf	??_Lcd_Write_Char
  2031  0377  3004               	movlw	4
  2032  0378                     u605:
  2033  0378  1003               	clrc
  2034  0379  0CF3               	rrf	??_Lcd_Write_Char,f
  2035  037A  3EFF               	addlw	-1
  2036  037B  1D03               	skipz
  2037  037C  2B78               	goto	u605
  2038  037D  0873               	movf	??_Lcd_Write_Char,w
  2039  037E  120A  118A  2459  120A  118A  	fcall	_Lcd_Port
  2040  0383                     l1204:
  2041                           
  2042                           ;./lcd.h: 87:    RD3 = 1;
  2043  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0385  1588               	bsf	8,3	;volatile
  2046  0386                     l1206:
  2047                           
  2048                           ;./lcd.h: 88:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2049  0386  3042               	movlw	66
  2050  0387  00F3               	movwf	??_Lcd_Write_Char
  2051  0388                     u1377:
  2052  0388  0BF3               	decfsz	??_Lcd_Write_Char,f
  2053  0389  2B88               	goto	u1377
  2054  038A  0000               	nop
  2055  038B                     l1208:
  2056                           
  2057                           ;./lcd.h: 89:    RD3 = 0;
  2058  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2059  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2060  038D  1188               	bcf	8,3	;volatile
  2061  038E                     l1210:
  2062                           
  2063                           ;./lcd.h: 90:    Lcd_Port(temp);
  2064  038E  0874               	movf	Lcd_Write_Char@temp,w
  2065  038F  120A  118A  2459  120A  118A  	fcall	_Lcd_Port
  2066  0394                     l1212:
  2067                           
  2068                           ;./lcd.h: 91:    RD3 = 1;
  2069  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2070  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2071  0396  1588               	bsf	8,3	;volatile
  2072  0397                     l1214:
  2073                           
  2074                           ;./lcd.h: 92:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2075  0397  3042               	movlw	66
  2076  0398  00F3               	movwf	??_Lcd_Write_Char
  2077  0399                     u1387:
  2078  0399  0BF3               	decfsz	??_Lcd_Write_Char,f
  2079  039A  2B99               	goto	u1387
  2080  039B  0000               	nop
  2081  039C                     l1216:
  2082                           
  2083                           ;./lcd.h: 93:    RD3 = 0;
  2084  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2085  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2086  039E  1188               	bcf	8,3	;volatile
  2087  039F                     l79:
  2088  039F  0008               	return
  2089  03A0                     __end_of_Lcd_Write_Char:
  2090                           
  2091                           	psect	text9
  2092  024F                     __ptext9:	
  2093 ;; *************** function _Lcd_Set_Cursor *****************
  2094 ;; Defined at:
  2095 ;;		line 40 in file "./lcd.h"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  a               1    wreg     unsigned char 
  2098 ;;  b               1    6[COMMON] unsigned char 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  a               1    0[BANK0 ] unsigned char 
  2101 ;;  temp            1    3[BANK0 ] unsigned char 
  2102 ;;  y               1    2[BANK0 ] unsigned char 
  2103 ;;  z               1    1[BANK0 ] unsigned char 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         1       0       0       0       0
  2114 ;;      Locals:         0       4       0       0       0
  2115 ;;      Temps:          2       0       0       0       0
  2116 ;;      Totals:         3       4       0       0       0
  2117 ;;Total ram usage:        7 bytes
  2118 ;; Hardware stack levels used: 1
  2119 ;; Hardware stack levels required when called: 4
  2120 ;; This function calls:
  2121 ;;		_Lcd_Cmd
  2122 ;; This function is called by:
  2123 ;;		_setCronometro
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127  024F                     _Lcd_Set_Cursor:	
  2128                           ;psect for function _Lcd_Set_Cursor
  2129                           
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2133                           ;Lcd_Set_Cursor@a stored from wreg
  2134  024F  1283               	bcf	3,5	;RP0=0, select bank0
  2135  0250  1303               	bcf	3,6	;RP1=0, select bank0
  2136  0251  00A0               	movwf	Lcd_Set_Cursor@a
  2137  0252                     l1292:
  2138                           
  2139                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:  char temp
      +                          ,z,y;;./lcd.h: 43:  if(a == 1)
  2140  0252  0320               	decf	Lcd_Set_Cursor@a,w
  2141  0253  1D03               	btfss	3,2
  2142  0254  2A56               	goto	u801
  2143  0255  2A57               	goto	u800
  2144  0256                     u801:
  2145  0256  2A7C               	goto	l1302
  2146  0257                     u800:
  2147  0257                     l1294:
  2148                           
  2149                           ;./lcd.h: 44:  {;./lcd.h: 45:    temp = 0x80 + b - 1;
  2150  0257  0876               	movf	Lcd_Set_Cursor@b,w
  2151  0258  3E7F               	addlw	127
  2152  0259  00F7               	movwf	??_Lcd_Set_Cursor
  2153  025A  0877               	movf	??_Lcd_Set_Cursor,w
  2154  025B  00A3               	movwf	Lcd_Set_Cursor@temp
  2155                           
  2156                           ;./lcd.h: 46:   z = temp>>4;
  2157  025C  0823               	movf	Lcd_Set_Cursor@temp,w
  2158  025D  00F7               	movwf	??_Lcd_Set_Cursor
  2159  025E  3004               	movlw	4
  2160  025F                     u815:
  2161  025F  1003               	clrc
  2162  0260  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2163  0261  3EFF               	addlw	-1
  2164  0262  1D03               	skipz
  2165  0263  2A5F               	goto	u815
  2166  0264  0877               	movf	??_Lcd_Set_Cursor,w
  2167  0265  00F8               	movwf	??_Lcd_Set_Cursor+1
  2168  0266  0878               	movf	??_Lcd_Set_Cursor+1,w
  2169  0267  00A1               	movwf	Lcd_Set_Cursor@z
  2170  0268                     l1296:
  2171                           
  2172                           ;./lcd.h: 47:   y = temp & 0x0F;
  2173  0268  0823               	movf	Lcd_Set_Cursor@temp,w
  2174  0269  390F               	andlw	15
  2175  026A  00F7               	movwf	??_Lcd_Set_Cursor
  2176  026B  0877               	movf	??_Lcd_Set_Cursor,w
  2177  026C  00A2               	movwf	Lcd_Set_Cursor@y
  2178  026D                     l1298:
  2179                           
  2180                           ;./lcd.h: 48:   Lcd_Cmd(z);
  2181  026D  0821               	movf	Lcd_Set_Cursor@z,w
  2182  026E  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2183  0273                     l1300:
  2184                           
  2185                           ;./lcd.h: 49:   Lcd_Cmd(y);
  2186  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0275  0822               	movf	Lcd_Set_Cursor@y,w
  2189  0276  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2190                           
  2191                           ;./lcd.h: 50:  }
  2192  027B  2AA6               	goto	l73
  2193  027C                     l1302:
  2194  027C  3002               	movlw	2
  2195  027D  0620               	xorwf	Lcd_Set_Cursor@a,w
  2196  027E  1D03               	btfss	3,2
  2197  027F  2A81               	goto	u821
  2198  0280  2A82               	goto	u820
  2199  0281                     u821:
  2200  0281  2AA6               	goto	l73
  2201  0282                     u820:
  2202  0282                     l1304:
  2203                           
  2204                           ;./lcd.h: 52:  {;./lcd.h: 53:   temp = 0xC0 + b - 1;
  2205  0282  0876               	movf	Lcd_Set_Cursor@b,w
  2206  0283  3EBF               	addlw	191
  2207  0284  00F7               	movwf	??_Lcd_Set_Cursor
  2208  0285  0877               	movf	??_Lcd_Set_Cursor,w
  2209  0286  00A3               	movwf	Lcd_Set_Cursor@temp
  2210                           
  2211                           ;./lcd.h: 54:   z = temp>>4;
  2212  0287  0823               	movf	Lcd_Set_Cursor@temp,w
  2213  0288  00F7               	movwf	??_Lcd_Set_Cursor
  2214  0289  3004               	movlw	4
  2215  028A                     u835:
  2216  028A  1003               	clrc
  2217  028B  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2218  028C  3EFF               	addlw	-1
  2219  028D  1D03               	skipz
  2220  028E  2A8A               	goto	u835
  2221  028F  0877               	movf	??_Lcd_Set_Cursor,w
  2222  0290  00F8               	movwf	??_Lcd_Set_Cursor+1
  2223  0291  0878               	movf	??_Lcd_Set_Cursor+1,w
  2224  0292  00A1               	movwf	Lcd_Set_Cursor@z
  2225  0293                     l1306:
  2226                           
  2227                           ;./lcd.h: 55:   y = temp & 0x0F;
  2228  0293  0823               	movf	Lcd_Set_Cursor@temp,w
  2229  0294  390F               	andlw	15
  2230  0295  00F7               	movwf	??_Lcd_Set_Cursor
  2231  0296  0877               	movf	??_Lcd_Set_Cursor,w
  2232  0297  00A2               	movwf	Lcd_Set_Cursor@y
  2233  0298                     l1308:
  2234                           
  2235                           ;./lcd.h: 56:   Lcd_Cmd(z);
  2236  0298  0821               	movf	Lcd_Set_Cursor@z,w
  2237  0299  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2238  029E                     l1310:
  2239                           
  2240                           ;./lcd.h: 57:   Lcd_Cmd(y);
  2241  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2242  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2243  02A0  0822               	movf	Lcd_Set_Cursor@y,w
  2244  02A1  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2245  02A6                     l73:
  2246  02A6  0008               	return
  2247  02A7                     __end_of_Lcd_Set_Cursor:
  2248                           
  2249                           	psect	text10
  2250  01F1                     __ptext10:	
  2251 ;; *************** function _Lcd_Init *****************
  2252 ;; Defined at:
  2253 ;;		line 61 in file "./lcd.h"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, pclath, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2267 ;;      Params:         0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0
  2269 ;;      Temps:          2       0       0       0       0
  2270 ;;      Totals:         2       0       0       0       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used: 1
  2273 ;; Hardware stack levels required when called: 4
  2274 ;; This function calls:
  2275 ;;		_Lcd_Cmd
  2276 ;;		_Lcd_Port
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282  01F1                     _Lcd_Init:	
  2283                           ;psect for function _Lcd_Init
  2284                           
  2285  01F1                     l1438:	
  2286                           ;incstack = 0
  2287                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2288                           
  2289                           
  2290                           ;./lcd.h: 63:   Lcd_Port(0x00);
  2291  01F1  3000               	movlw	0
  2292  01F2  120A  118A  2459  120A  118A  	fcall	_Lcd_Port
  2293  01F7                     l1440:
  2294                           
  2295                           ;./lcd.h: 64:    _delay((unsigned long)((20)*(20000000/4000.0)));
  2296  01F7  3082               	movlw	130
  2297  01F8  00F7               	movwf	??_Lcd_Init+1
  2298  01F9  30DD               	movlw	221
  2299  01FA  00F6               	movwf	??_Lcd_Init
  2300  01FB                     u1397:
  2301  01FB  0BF6               	decfsz	??_Lcd_Init,f
  2302  01FC  29FB               	goto	u1397
  2303  01FD  0BF7               	decfsz	??_Lcd_Init+1,f
  2304  01FE  29FB               	goto	u1397
  2305  01FF  2A00               	nop2
  2306  0200                     l1442:
  2307                           
  2308                           ;./lcd.h: 65:   Lcd_Cmd(0x03);
  2309  0200  3003               	movlw	3
  2310  0201  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2311                           
  2312                           ;./lcd.h: 66:  _delay((unsigned long)((5)*(20000000/4000.0)));
  2313  0206  3021               	movlw	33
  2314  0207  00F7               	movwf	??_Lcd_Init+1
  2315  0208  3076               	movlw	118
  2316  0209  00F6               	movwf	??_Lcd_Init
  2317  020A                     u1407:
  2318  020A  0BF6               	decfsz	??_Lcd_Init,f
  2319  020B  2A0A               	goto	u1407
  2320  020C  0BF7               	decfsz	??_Lcd_Init+1,f
  2321  020D  2A0A               	goto	u1407
  2322  020E  0000               	nop
  2323  020F                     l1444:
  2324                           
  2325                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2326  020F  3003               	movlw	3
  2327  0210  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2328  0215                     l1446:
  2329                           
  2330                           ;./lcd.h: 68:  _delay((unsigned long)((11)*(20000000/4000.0)));
  2331  0215  3048               	movlw	72
  2332  0216  00F7               	movwf	??_Lcd_Init+1
  2333  0217  306C               	movlw	108
  2334  0218  00F6               	movwf	??_Lcd_Init
  2335  0219                     u1417:
  2336  0219  0BF6               	decfsz	??_Lcd_Init,f
  2337  021A  2A19               	goto	u1417
  2338  021B  0BF7               	decfsz	??_Lcd_Init+1,f
  2339  021C  2A19               	goto	u1417
  2340  021D  0000               	nop
  2341                           
  2342                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2343  021E  3003               	movlw	3
  2344  021F  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2345                           
  2346                           ;./lcd.h: 71:   Lcd_Cmd(0x02);
  2347  0224  3002               	movlw	2
  2348  0225  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2349                           
  2350                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  2351  022A  3002               	movlw	2
  2352  022B  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2353                           
  2354                           ;./lcd.h: 73:   Lcd_Cmd(0x08);
  2355  0230  3008               	movlw	8
  2356  0231  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2357                           
  2358                           ;./lcd.h: 74:   Lcd_Cmd(0x00);
  2359  0236  3000               	movlw	0
  2360  0237  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2361                           
  2362                           ;./lcd.h: 75:   Lcd_Cmd(0x0C);
  2363  023C  300C               	movlw	12
  2364  023D  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2365                           
  2366                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2367  0242  3000               	movlw	0
  2368  0243  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2369                           
  2370                           ;./lcd.h: 77:   Lcd_Cmd(0x06);
  2371  0248  3006               	movlw	6
  2372  0249  120A  118A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2373  024E                     l76:
  2374  024E  0008               	return
  2375  024F                     __end_of_Lcd_Init:
  2376                           
  2377                           	psect	text11
  2378  04BB                     __ptext11:	
  2379 ;; *************** function _Lcd_Cmd *****************
  2380 ;; Defined at:
  2381 ;;		line 25 in file "./lcd.h"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  a               1    wreg     unsigned char 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  a               1    5[COMMON] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, pclath, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2395 ;;      Params:         0       0       0       0       0
  2396 ;;      Locals:         1       0       0       0       0
  2397 ;;      Temps:          2       0       0       0       0
  2398 ;;      Totals:         3       0       0       0       0
  2399 ;;Total ram usage:        3 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; Hardware stack levels required when called: 3
  2402 ;; This function calls:
  2403 ;;		_Lcd_Port
  2404 ;; This function is called by:
  2405 ;;		_Lcd_Set_Cursor
  2406 ;;		_Lcd_Init
  2407 ;;		_Lcd_Clear
  2408 ;;		_Lcd_Shift_Right
  2409 ;;		_Lcd_Shift_Left
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413  04BB                     _Lcd_Cmd:	
  2414                           ;psect for function _Lcd_Cmd
  2415                           
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2419                           ;Lcd_Cmd@a stored from wreg
  2420  04BB  00F5               	movwf	Lcd_Cmd@a
  2421  04BC                     l1188:
  2422                           
  2423                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:  RD2 = 0;
  2424  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  2425  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  2426  04BE  1108               	bcf	8,2	;volatile
  2427  04BF                     l1190:
  2428                           
  2429                           ;./lcd.h: 28:  Lcd_Port(a);
  2430  04BF  0875               	movf	Lcd_Cmd@a,w
  2431  04C0  120A  118A  2459  120A  118A  	fcall	_Lcd_Port
  2432  04C5                     l1192:
  2433                           
  2434                           ;./lcd.h: 29:  RD3 = 1;
  2435  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2436  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2437  04C7  1588               	bsf	8,3	;volatile
  2438  04C8                     l1194:
  2439                           
  2440                           ;./lcd.h: 30:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2441  04C8  301A               	movlw	26
  2442  04C9  00F4               	movwf	??_Lcd_Cmd+1
  2443  04CA  30F8               	movlw	248
  2444  04CB  00F3               	movwf	??_Lcd_Cmd
  2445  04CC                     u1427:
  2446  04CC  0BF3               	decfsz	??_Lcd_Cmd,f
  2447  04CD  2CCC               	goto	u1427
  2448  04CE  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2449  04CF  2CCC               	goto	u1427
  2450  04D0  0000               	nop
  2451  04D1                     l1196:
  2452                           
  2453                           ;./lcd.h: 31:         RD3 = 0;
  2454  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2455  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2456  04D3  1188               	bcf	8,3	;volatile
  2457  04D4                     l64:
  2458  04D4  0008               	return
  2459  04D5                     __end_of_Lcd_Cmd:
  2460                           
  2461                           	psect	text12
  2462  0459                     __ptext12:	
  2463 ;; *************** function _Lcd_Port *****************
  2464 ;; Defined at:
  2465 ;;		line 3 in file "./lcd.h"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  a               1    wreg     unsigned char 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  a               1    2[COMMON] unsigned char 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2479 ;;      Params:         0       0       0       0       0
  2480 ;;      Locals:         1       0       0       0       0
  2481 ;;      Temps:          0       0       0       0       0
  2482 ;;      Totals:         1       0       0       0       0
  2483 ;;Total ram usage:        1 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 2
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_Lcd_Cmd
  2490 ;;		_Lcd_Init
  2491 ;;		_Lcd_Write_Char
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495  0459                     _Lcd_Port:	
  2496                           ;psect for function _Lcd_Port
  2497                           
  2498                           
  2499                           ;incstack = 0
  2500                           ; Regs used in _Lcd_Port: [wreg]
  2501                           ;Lcd_Port@a stored from wreg
  2502  0459  00F2               	movwf	Lcd_Port@a
  2503  045A                     l1178:
  2504                           
  2505                           ;./lcd.h: 3: void Lcd_Port(char a);./lcd.h: 4: {;./lcd.h: 5:  if(a & 1)
  2506  045A  1C72               	btfss	Lcd_Port@a,0
  2507  045B  2C5D               	goto	u561
  2508  045C  2C5E               	goto	u560
  2509  045D                     u561:
  2510  045D  2C62               	goto	l53
  2511  045E                     u560:
  2512  045E                     l1180:
  2513                           
  2514                           ;./lcd.h: 6:   RD4 = 1;
  2515  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2516  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0460  1608               	bsf	8,4	;volatile
  2518  0461  2C65               	goto	l54
  2519  0462                     l53:	
  2520                           ;./lcd.h: 7:  else
  2521                           
  2522                           
  2523                           ;./lcd.h: 8:   RD4 = 0;
  2524  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0464  1208               	bcf	8,4	;volatile
  2527  0465                     l54:
  2528                           
  2529                           ;./lcd.h: 10:  if(a & 2)
  2530  0465  1CF2               	btfss	Lcd_Port@a,1
  2531  0466  2C68               	goto	u571
  2532  0467  2C69               	goto	u570
  2533  0468                     u571:
  2534  0468  2C6B               	goto	l55
  2535  0469                     u570:
  2536  0469                     l1182:
  2537                           
  2538                           ;./lcd.h: 11:   RD5 = 1;
  2539  0469  1688               	bsf	8,5	;volatile
  2540  046A  2C6C               	goto	l56
  2541  046B                     l55:	
  2542                           ;./lcd.h: 12:  else
  2543                           
  2544                           
  2545                           ;./lcd.h: 13:   RD5 = 0;
  2546  046B  1288               	bcf	8,5	;volatile
  2547  046C                     l56:
  2548                           
  2549                           ;./lcd.h: 15:  if(a & 4)
  2550  046C  1D72               	btfss	Lcd_Port@a,2
  2551  046D  2C6F               	goto	u581
  2552  046E  2C70               	goto	u580
  2553  046F                     u581:
  2554  046F  2C72               	goto	l57
  2555  0470                     u580:
  2556  0470                     l1184:
  2557                           
  2558                           ;./lcd.h: 16:   RD6 = 1;
  2559  0470  1708               	bsf	8,6	;volatile
  2560  0471  2C73               	goto	l58
  2561  0472                     l57:	
  2562                           ;./lcd.h: 17:  else
  2563                           
  2564                           
  2565                           ;./lcd.h: 18:   RD6 = 0;
  2566  0472  1308               	bcf	8,6	;volatile
  2567  0473                     l58:
  2568                           
  2569                           ;./lcd.h: 20:  if(a & 8)
  2570  0473  1DF2               	btfss	Lcd_Port@a,3
  2571  0474  2C76               	goto	u591
  2572  0475  2C77               	goto	u590
  2573  0476                     u591:
  2574  0476  2C79               	goto	l59
  2575  0477                     u590:
  2576  0477                     l1186:
  2577                           
  2578                           ;./lcd.h: 21:   RD7 = 1;
  2579  0477  1788               	bsf	8,7	;volatile
  2580  0478  2C7A               	goto	l61
  2581  0479                     l59:	
  2582                           ;./lcd.h: 22:  else
  2583                           
  2584                           
  2585                           ;./lcd.h: 23:   RD7 = 0;
  2586  0479  1388               	bcf	8,7	;volatile
  2587  047A                     l61:
  2588  047A  0008               	return
  2589  047B                     __end_of_Lcd_Port:
  2590                           
  2591                           	psect	text13
  2592  03A0                     __ptext13:	
  2593 ;; *************** function _ContaSegundos *****************
  2594 ;; Defined at:
  2595 ;;		line 103 in file "main.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0, pclath, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2609 ;;      Params:         0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0
  2611 ;;      Temps:          2       0       0       0       0
  2612 ;;      Totals:         2       0       0       0       0
  2613 ;;Total ram usage:        2 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; Hardware stack levels required when called: 1
  2616 ;; This function calls:
  2617 ;;		_cronometro
  2618 ;; This function is called by:
  2619 ;;		Interrupt level 1
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623  03A0                     _ContaSegundos:	
  2624                           ;psect for function _ContaSegundos
  2625                           
  2626  03A0                     i1l1520:
  2627                           
  2628                           ;main.c: 105:     if(TMR1IF)
  2629  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2630  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2631  03A2  1C0C               	btfss	12,0	;volatile
  2632  03A3  2BA5               	goto	u107_21
  2633  03A4  2BA6               	goto	u107_20
  2634  03A5                     u107_21:
  2635  03A5  2BD2               	goto	i1l119
  2636  03A6                     u107_20:
  2637  03A6                     i1l1522:
  2638                           
  2639                           ;main.c: 106:     {;main.c: 107:         PIR1bits.TMR1IF = 0;
  2640  03A6  100C               	bcf	12,0	;volatile
  2641  03A7                     i1l1524:
  2642                           
  2643                           ;main.c: 108:         TMR1L = 0x95;
  2644  03A7  3095               	movlw	149
  2645  03A8  008E               	movwf	14	;volatile
  2646                           
  2647                           ;main.c: 109:         TMR1H = 0xE7;
  2648  03A9  30E7               	movlw	231
  2649  03AA  008F               	movwf	15	;volatile
  2650  03AB                     i1l1526:
  2651                           
  2652                           ;main.c: 113:         cronometro();
  2653  03AB  120A  118A  23D9  120A  118A  	fcall	_cronometro
  2654  03B0                     i1l1528:
  2655                           
  2656                           ;main.c: 115:         contador++;
  2657  03B0  3001               	movlw	1
  2658  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2659  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2660  03B3  07BC               	addwf	_contador,f
  2661  03B4  1803               	skipnc
  2662  03B5  0ABD               	incf	_contador+1,f
  2663  03B6  3000               	movlw	0
  2664  03B7  07BD               	addwf	_contador+1,f
  2665  03B8                     i1l1530:
  2666                           
  2667                           ;main.c: 116:         if(contador == 100)
  2668  03B8  3064               	movlw	100
  2669  03B9  063C               	xorwf	_contador,w
  2670  03BA  043D               	iorwf	_contador+1,w
  2671  03BB  1D03               	btfss	3,2
  2672  03BC  2BBE               	goto	u108_21
  2673  03BD  2BBF               	goto	u108_20
  2674  03BE                     u108_21:
  2675  03BE  2BD2               	goto	i1l119
  2676  03BF                     u108_20:
  2677  03BF                     i1l1532:
  2678                           
  2679                           ;main.c: 117:         {;main.c: 118:             cronometro();
  2680  03BF  120A  118A  23D9  120A  118A  	fcall	_cronometro
  2681  03C4                     i1l1534:
  2682                           
  2683                           ;main.c: 119:             inverte = ~inverte;
  2684  03C4  3001               	movlw	(0+1) shl (_inverte& (0+7))
  2685  03C5  06FB               	xorwf	_inverte/(0+8),f
  2686  03C6                     i1l1536:
  2687                           
  2688                           ;main.c: 120:             RC3 = inverte;
  2689  03C6  187B               	btfsc	_inverte/(0+8),_inverte& (0+7)
  2690  03C7  2BC9               	goto	u109_21
  2691  03C8  2BCD               	goto	u109_20
  2692  03C9                     u109_21:
  2693  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2694  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2695  03CB  1587               	bsf	7,3	;volatile
  2696  03CC  2BD0               	goto	u110_24
  2697  03CD                     u109_20:
  2698  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2699  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2700  03CF  1187               	bcf	7,3	;volatile
  2701  03D0                     u110_24:
  2702  03D0                     i1l1538:
  2703                           
  2704                           ;main.c: 121:             contador = 0;
  2705  03D0  01BC               	clrf	_contador
  2706  03D1  01BD               	clrf	_contador+1
  2707  03D2                     i1l119:
  2708  03D2  0871               	movf	??_ContaSegundos+1,w
  2709  03D3  008A               	movwf	10
  2710  03D4  0E70               	swapf	??_ContaSegundos,w
  2711  03D5  0083               	movwf	3
  2712  03D6  0EFE               	swapf	btemp,f
  2713  03D7  0E7E               	swapf	btemp,w
  2714  03D8  0009               	retfie
  2715  03D9                     __end_of_ContaSegundos:
  2716                           
  2717                           	psect	intentry
  2718  0004                     __pintentry:	
  2719                           ;incstack = 0
  2720                           ; Regs used in _ContaSegundos: [wreg+status,2+status,0+pclath+cstack]
  2721                           
  2722  0004                     interrupt_function:
  2723  007E                     saved_w	set	btemp
  2724  0004  00FE               	movwf	btemp
  2725  0005  0E03               	swapf	3,w
  2726  0006  00F0               	movwf	??_ContaSegundos
  2727  0007  080A               	movf	10,w
  2728  0008  00F1               	movwf	??_ContaSegundos+1
  2729  0009  120A  118A  2BA0   	ljmp	_ContaSegundos
  2730                           
  2731                           	psect	text14
  2732  03D9                     __ptext14:	
  2733 ;; *************** function _cronometro *****************
  2734 ;; Defined at:
  2735 ;;		line 133 in file "main.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2749 ;;      Params:         0       0       0       0       0
  2750 ;;      Locals:         0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0
  2752 ;;      Totals:         0       0       0       0       0
  2753 ;;Total ram usage:        0 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_ContaSegundos
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762  03D9                     _cronometro:	
  2763                           ;psect for function _cronometro
  2764                           
  2765  03D9                     i1l1454:	
  2766                           ;incstack = 0
  2767                           ; Regs used in _cronometro: [wreg+status,2+status,0]
  2768                           
  2769                           
  2770                           ;main.c: 135:     centesimos++;
  2771  03D9  3001               	movlw	1
  2772  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2773  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2774  03DC  07BE               	addwf	_centesimos,f
  2775  03DD  1803               	skipnc
  2776  03DE  0ABF               	incf	_centesimos+1,f
  2777  03DF  3000               	movlw	0
  2778  03E0  07BF               	addwf	_centesimos+1,f
  2779  03E1                     i1l1456:
  2780                           
  2781                           ;main.c: 137:     if(centesimos == 100)
  2782  03E1  3064               	movlw	100
  2783  03E2  063E               	xorwf	_centesimos,w
  2784  03E3  043F               	iorwf	_centesimos+1,w
  2785  03E4  1D03               	btfss	3,2
  2786  03E5  2BE7               	goto	u103_21
  2787  03E6  2BE8               	goto	u103_20
  2788  03E7                     u103_21:
  2789  03E7  2C08               	goto	i1l128
  2790  03E8                     u103_20:
  2791  03E8                     i1l1458:
  2792                           
  2793                           ;main.c: 138:     {;main.c: 139:         centesimos = 0;
  2794  03E8  01BE               	clrf	_centesimos
  2795  03E9  01BF               	clrf	_centesimos+1
  2796  03EA                     i1l1460:
  2797                           
  2798                           ;main.c: 140:         segundos++;
  2799  03EA  3001               	movlw	1
  2800  03EB  07C0               	addwf	_segundos,f
  2801  03EC  1803               	skipnc
  2802  03ED  0AC1               	incf	_segundos+1,f
  2803  03EE  3000               	movlw	0
  2804  03EF  07C1               	addwf	_segundos+1,f
  2805  03F0                     i1l1462:
  2806                           
  2807                           ;main.c: 142:         if(segundos == 60)
  2808  03F0  303C               	movlw	60
  2809  03F1  0640               	xorwf	_segundos,w
  2810  03F2  0441               	iorwf	_segundos+1,w
  2811  03F3  1D03               	btfss	3,2
  2812  03F4  2BF6               	goto	u104_21
  2813  03F5  2BF7               	goto	u104_20
  2814  03F6                     u104_21:
  2815  03F6  2C08               	goto	i1l128
  2816  03F7                     u104_20:
  2817  03F7                     i1l1464:
  2818                           
  2819                           ;main.c: 143:         {;main.c: 144:            segundos = 0;
  2820  03F7  01C0               	clrf	_segundos
  2821  03F8  01C1               	clrf	_segundos+1
  2822  03F9                     i1l1466:
  2823                           
  2824                           ;main.c: 145:            minutos++;
  2825  03F9  3001               	movlw	1
  2826  03FA  07C2               	addwf	_minutos,f
  2827  03FB  1803               	skipnc
  2828  03FC  0AC3               	incf	_minutos+1,f
  2829  03FD  3000               	movlw	0
  2830  03FE  07C3               	addwf	_minutos+1,f
  2831  03FF                     i1l1468:
  2832                           
  2833                           ;main.c: 147:            if(minutos == 60) minutos = 0;
  2834  03FF  303C               	movlw	60
  2835  0400  0642               	xorwf	_minutos,w
  2836  0401  0443               	iorwf	_minutos+1,w
  2837  0402  1D03               	btfss	3,2
  2838  0403  2C05               	goto	u105_21
  2839  0404  2C06               	goto	u105_20
  2840  0405                     u105_21:
  2841  0405  2C08               	goto	i1l128
  2842  0406                     u105_20:
  2843  0406                     i1l1470:
  2844  0406  01C2               	clrf	_minutos
  2845  0407  01C3               	clrf	_minutos+1
  2846  0408                     i1l128:
  2847  0408  0008               	return
  2848  0409                     __end_of_cronometro:
  2849  007E                     btemp	set	126	;btemp
  2850  007E                     wtemp0	set	126
  2851                           
  2852                           	psect	config
  2853                           
  2854                           ;Config register CONFIG @ 0x2007
  2855                           ;	Oscillator Selection bits
  2856                           ;	FOSC = HS, HS oscillator
  2857                           ;	Watchdog Timer Enable bit
  2858                           ;	WDTE = ON, WDT enabled
  2859                           ;	Power-up Timer Enable bit
  2860                           ;	PWRTE = ON, PWRT enabled
  2861                           ;	Brown-out Reset Enable bit
  2862                           ;	BOREN = ON, BOR enabled
  2863                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2864                           ;	LVP = 0x1, unprogrammed default
  2865                           ;	Data EEPROM Memory Code Protection bit
  2866                           ;	CPD = 0x1, unprogrammed default
  2867                           ;	Flash Program Memory Write Enable bits
  2868                           ;	WRT = 0x3, unprogrammed default
  2869                           ;	In-Circuit Debugger Mode bit
  2870                           ;	DEBUG = 0x1, unprogrammed default
  2871                           ;	Flash Program Memory Code Protection bit
  2872                           ;	CP = 0x1, unprogrammed default
  2873  2007                     	org	8199
  2874  2007  3FF6               	dw	16374

Data Sizes:
    Strings     15
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     28      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _setCronometro->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ContaSegundos in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setCronometro
    _setCronometro->_sprintf
    _sprintf->___lwmod

Critical Paths under _ContaSegundos in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ContaSegundos in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ContaSegundos in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ContaSegundos in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3443
                                             25 BANK0      3     3      0
                           _Lcd_Init
                      _setCronometro
 ---------------------------------------------------------------------------------
 (1) _setCronometro                                        1     1      0    3245
                                             24 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    20      7    2488
                                              5 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     301
                                              7 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     456
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ContaSegundos                                        2     2      0       0
                                              0 COMMON     2     2      0
                         _cronometro
 ---------------------------------------------------------------------------------
 (6) _cronometro                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _setCronometro
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _ContaSegundos (ROOT)
   _cronometro

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      2E       5       57.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Mon Mar 07 17:47:26 2022

                       pc 0002                        l61 047A                        l53 0462  
                      l54 0465                        l55 046B                        l56 046C  
                      l64 04D4                        l57 0472                        l73 02A6  
                      l58 0473                        l59 0479                        l76 024E  
                      l85 049B                        l79 039F                        fsr 0004  
     ___wmul@multiplicand 0074                       l122 0433                       l108 0307  
                     l226 003B                       l244 0115                       l261 01F0  
                     l265 0440                       l267 0458                       l537 02EA  
                     l547 0366                       l718 04E6                       _RB0 0030  
                     _RC0 0038                       _RC2 003A                       _RC3 003B  
                     _RD2 0042                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u610 04DD                       u611 04DC                       u620 04E3  
                     u605 0378                       u621 04E2                       u710 02D2  
                     u630 043A                       u711 02D1                       u631 0439  
                     u560 045E                       u800 0257                       u561 045D  
                     u801 0256                       u705 02C2                       u570 0469  
                     u730 02E6                       u571 0468                       u731 02E5  
                     u715 02CE                       u580 0470                       u820 0282  
                     u660 0454                       u581 046F                       u821 0281  
                     u725 02DA                       u661 0453                       u645 0441  
                     u590 0477                       u670 02AF                       u591 0476  
                     u815 025F                       u671 02AE                       u655 0448  
                     u840 049B                       u841 049A                       u690 02C1  
                     u835 028A                       u691 02C0                       u685 02B3  
                     fsr0 0004                       indf 0000                      l1200 0372  
                    l1210 038E                      l1202 0375                      l1300 0273  
                    l1212 0394                      l1204 0383                      l1220 04D7  
                    l1310 029E                      l1302 027C                      l1214 0397  
                    l1206 0386                      l1230 0434                      l1222 04DD  
                    l1304 0282                      l1216 039C                      l1208 038B  
                    l1312 047C                      l1240 0454                      l1232 0436  
                    l1224 04E3                      l1306 0293                      l1314 047F  
                    l1250 02B2                      l1234 043A                      l1226 04E5  
                    l1218 04D6                      l1180 045E                      l1308 0298  
                    l1316 048A                      l1260 02D8                      l1252 02B9  
                    l1244 02A7                      l1236 0447                      l1182 0469  
                    l1190 04BF                      l1318 0490                      l1262 02D9  
                    l1254 02BD                      l1246 02A9                      l1238 044E  
                    l1184 0470                      l1192 04C5                      l1440 01F7  
                    l1264 02E0                      l1256 02C1                      l1248 02AF  
                    l1186 0477                      l1178 045A                      l1194 04C8  
                    l1442 0200                      l1258 02D2                      l1266 02E6  
                    l1610 0037                      l1602 0020                      l1196 04D1  
                    l1188 04BC                      l1444 020F                      l1292 0252  
                    l1700 01C6                      l1620 0063                      l1612 003C  
                    l1604 0025                      l1446 0215                      l1438 01F1  
                    l1294 0257                      l1198 0368                      l1702 01CD  
                    l1622 0067                      l1606 002B                      l1296 0268  
                    l1704 01D1                      l1640 00D2                      l1624 007C  
                    l1632 00A3                      l1616 0040                      l1608 0032  
                    l1720 0409                      l1298 026D                      l1650 00DD  
                    l1642 00D6                      l1634 00C2                      l1810 00B7  
                    l1626 008F                      l1618 0053                      l1706 01DA  
                    l1722 0421                      l1730 02F0                      l1580 032B  
                    l1660 010F                      l1644 00DB                      l1636 00CA  
                    l1708 01EC                      l1628 0093                      l1724 042D  
                    l1740 02F5                      l1732 02F1                      l1590 0345  
                    l1582 0333                      l1670 013A                      l1662 0120  
                    l1654 00F9                      l1638 00CE                      l1750 0300  
                    l1742 02F8                      l1734 02F2                      l1726 02EB  
                    l1592 034F                      l1584 0336                      l1680 0156  
                    l1672 0141                      l1664 012C                      l1656 0103  
                    l1808 004E                      l1760 0310                      l1752 0301  
                    l1744 02F9                      l1736 02F3                      l1728 02EF  
                    l1594 0355                      l1586 033D                      l1690 0180  
                    l1674 0145                      l1682 0163                      l1666 0130  
                    l1658 0109                      l1762 031E                      l1754 0302  
                    l1746 02FE                      l1738 02F4                      l1596 035C  
                    l1588 0341                      l1692 0186                      l1684 0169  
                    l1676 014B                      l1668 0134                      l1764 0321  
                    l1756 0308                      l1748 02FF                      l1598 0362  
                    l1694 018D                      l1686 0170                      l1678 0152  
                    l1758 030E                      l1766 0322                      l1688 0174  
                    l1696 0191                      l1698 0196                      STR_1 04AC  
                    u1110 0333                      u1111 0332                      u1200 00D2  
                    u1201 00D1                      u1130 0345                      u1210 00F8  
                    u1131 0344                      u1211 00F7                      u1140 034F  
                    u1300 0169                      u1220 0103                      u1141 034E  
                    u1125 0337                      u1301 0168                      u1221 0102  
                    u1310 0180                      u1230 0109                      u1311 017F  
                    u1231 0108                      u1215 00F4                      u1160 0362  
                    u1320 0186                      u1240 010F                      u1161 0361  
                    u1145 034B                      u1321 0185                      u1241 010E  
                    u1330 01DA                      u1250 0120                      u1170 002B  
                    u1155 0356                      u1331 01D9                      u1251 011F  
                    u1171 002A                      u1340 01EC                      u1260 0134  
                    u1180 0063                      u1341 01EB                      u1261 0133  
                    u1181 0062                      u1270 013A                      u1190 00A3  
                    u1350 030E                      u1407 020A                      u1271 0139  
                    u1255 011C                      u1191 00A2                      u1351 030D  
                    u1280 014B                      u1417 0219                      u1281 014A  
                    u1290 0162                      u1427 04CC                      u1291 0161  
                    u1367 0318                      u1377 0388                      u1387 0399  
                    u1397 01FB         ?_Lcd_Write_String 0070                      _main 02EB  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 04D5     __end_of_setCronometro 0434                     ?_main 0070  
         __end_of___lwdiv 02EB                     i1l119 03D2                     i1l128 0408  
         __end_of___lwmod 0367                     _TMR1H 000F                     _TMR1L 000E  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
         __end_of_dpowers 04AC           __end_of_isdigit 04E7            __pbitbssCOMMON 03D8  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 01F1          __end_of_Lcd_Init 024F          __end_of_Lcd_Port 047B  
         __initialization 000F              __end_of_main 032B                    ??_main 0039  
                  u110_24 03D0                    u103_20 03E8                    u103_21 03E7  
                  u104_20 03F7                    i1l1520 03A0                    u104_21 03F6  
                  i1l1530 03B8                    i1l1522 03A6                    i1l1460 03EA  
                  i1l1532 03BF                    i1l1524 03A7                    i1l1470 0406  
                  i1l1462 03F0                    i1l1454 03D9                    i1l1534 03C4  
                  i1l1526 03AB                    u105_20 0406                    i1l1464 03F7  
                  i1l1456 03E1                    i1l1536 03C6                    i1l1528 03B0  
                  u105_21 0405                    i1l1466 03F9                    i1l1458 03E8  
                  i1l1538 03D0                    i1l1468 03FF                    u107_20 03A6  
                  u107_21 03A5                    u108_20 03BF                    u108_21 03BE  
                  u109_20 03CD                    u109_21 03C9                 ??_Lcd_Cmd 0073  
                  _TMR1IF 0060                    ___wmul 0434                 ??___lwdiv 0076  
               ??___lwmod 007A                    _buffer 0044                 ??_isdigit 0072  
                  saved_w 007E                 ??_sprintf 002C           Lcd_Set_Cursor@a 0020  
         Lcd_Set_Cursor@b 0076           Lcd_Set_Cursor@y 0022           Lcd_Set_Cursor@z 0021  
 __end_of__initialization 0019            __pcstackCOMMON 0070            _Lcd_Set_Cursor 024F  
          _OPTION_REGbits 0081                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
            sprintf@width 0034                __pbssBANK0 003C                __pmaintext 02EB  
   __end_of_ContaSegundos 03D9                   ?___wmul 0072                _centesimos 003E  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 02A7                ??_Lcd_Init 0076  
              ??_Lcd_Port 0072                __stringtab 049C            _Lcd_Write_Char 0367  
                 _Lcd_Cmd 04BB                _cronometro 03D9                   ___lwdiv 02A7  
                 ___lwmod 032B           ?_Lcd_Set_Cursor 0076                   __ptext1 0409  
                 __ptext2 001D                   __ptext3 04D5                   __ptext4 0434  
                 __ptext5 032B                   __ptext6 02A7                   __ptext7 047B  
                 __ptext8 0367                   __ptext9 024F                 _T1CONbits 0010  
                 _dpowers 04A2                   _isdigit 04D5                   _inverte 03D8  
                 _minutos 0042                   _sprintf 001D                   clrloop0 04E8  
  __end_of_Lcd_Write_Char 03A0      end_of_initialization 0019                 Lcd_Port@a 0072  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 007A         Lcd_Write_String@i 0078  
             ?_cronometro 0070            __end_of___wmul 0459          _Lcd_Write_String 047B  
           _setCronometro 0409       start_initialization 000F                  ??___wmul 0076  
         Lcd_Write_Char@a 0076           Lcd_Write_Char@y 0075            ?_setCronometro 0070  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0033               sprintf@prec 0030          ___lwdiv@dividend 0074  
        ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072                  ?___lwmod 0020  
               __pstrings 049C                  ?_isdigit 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0025         interrupt_function 0004            ___wmul@product 0076  
               clear_ram0 04E7                  _PIE1bits 008C                  Lcd_Cmd@a 0075  
                _PIR1bits 000C           ??_setCronometro 0038               __stringbase 04A1  
       ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073                  _Lcd_Init 01F1  
                _Lcd_Port 0459  __end_of_Lcd_Write_String 049C              ??_cronometro 0070  
           _ContaSegundos 03A0        __end_of__stringtab 04A2               _isdigit$732 0072  
              sprintf@val 0031           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
      __end_of_cronometro 0409                  __ptext10 01F1                  __ptext11 04BB  
                __ptext12 0459                  __ptext13 03A0                  __ptext14 03D9  
                _contador 003C                  _segundos 0040            ?_ContaSegundos 0070  
              _INTCONbits 000B                  isdigit@c 0073        Lcd_Write_Char@temp 0074  
                intlevel1 0000                 sprintf@ap 002F                 sprintf@sp 0036  
        ___lwmod@dividend 0022                 stringcode 049C        Lcd_Set_Cursor@temp 0023  
                sprintf@c 0037                  sprintf@f 0025           ___lwmod@divisor 0020  
         ___lwmod@counter 0024                  stringdir 049C                  stringtab 049C  
         ??_ContaSegundos 0070  
